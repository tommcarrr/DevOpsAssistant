using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.IO;
using System.Text;

namespace PromptGenerator;

[Generator]
public class PromptGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var prompts = context.AdditionalTextsProvider
            .Where(at => at.Path.EndsWith(".txt"))
            .Select((at, ct) => (Name: Path.GetFileNameWithoutExtension(at.Path),
                                 Content: at.GetText(ct)!.ToString()));

        context.RegisterSourceOutput(prompts, (spc, prompt) =>
        {
            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine("namespace GeneratedPrompts");
            sb.AppendLine("{");
            sb.Append("    public static class ");
            sb.Append(prompt.Name.Replace(" ", "_"));
            sb.AppendLine("Prompt");
            sb.AppendLine("    {");
            sb.Append("        public static string Value => @\"");
            sb.Append(prompt.Content.Replace("\"", "\"\"").Replace("\r", ""));
            sb.AppendLine("\";");
            sb.AppendLine("    }");
            sb.AppendLine("}");

            spc.AddSource(prompt.Name + ".g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
        });
    }
}
