using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Immutable;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Linq;

namespace PromptGenerator;

[Generator]
public class PromptGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var prompts = context.AdditionalTextsProvider
            .Where(at => at.Path.EndsWith(".txt"))
            .SelectMany((at, ct) => ParseFile(at.Path,
                                               at.GetText(ct)!.ToString()));

        context.RegisterSourceOutput(prompts, (spc, prompt) =>
        {
            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine("namespace GeneratedPrompts");
            sb.AppendLine("{");
            sb.Append("    public static class ");
            sb.Append(prompt.Name.Replace(" ", "_"));
            sb.AppendLine("Prompt");
            sb.AppendLine("    {");
            sb.Append("        public static string Value => @\"");
            sb.Append(prompt.Content.Replace("\"", "\"\"").Replace("\r", ""));
            sb.AppendLine("\";");
            sb.AppendLine("    }");
            sb.AppendLine("}");

            spc.AddSource(prompt.Name + ".g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
        });
    }

    private static ImmutableArray<(string Name, string Content)> ParseFile(string path, string text)
    {
        var fileName = Path.GetFileNameWithoutExtension(path);
        var sections = new List<(string Name, StringBuilder Builder)>();
        StringBuilder? current = null;
        string? currentName = null;

        foreach (var line in text.Replace("\r", "").Split('\n'))
        {
            if (line.StartsWith("====") && line.EndsWith("===="))
            {
                if (currentName is not null && current is not null)
                {
                    sections.Add((currentName, current));
                }

                currentName = line.Trim('=', ' ').Trim();
                current = new StringBuilder();
            }
            else
            {
                current ??= new StringBuilder();
                current.AppendLine(line);
            }
        }

        if (currentName is not null && current is not null)
        {
            sections.Add((currentName, current));
        }

        if (sections.Count == 0)
        {
            sections.Add((fileName, new StringBuilder(text)));
        }

        return sections
            .Select(s => (s.Item1, s.Item2.ToString()))
            .ToImmutableArray();
    }
}
