@inject DevOpsConfigService ConfigService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SettingsDialog> L
@using System.Linq
@using DevOpsAssistant.Services
@using DevOpsAssistant.Services.Models

<MudDialog ContentClass="pa-4" ActionsClass="pa-4">
    <DialogContent>
        <MudStack Spacing="2">
            <MudSelect T="string" Value="_selected" ValueChanged="OnProjectChanged" Label='@L["Project"]' Immediate="true">
                @foreach (var p in ConfigService.Projects)
                {
                    <MudSelectItem Value="@p.Name">@p.Name</MudSelectItem>
                }
                <MudSelectItem Value="@NewProjectValue">@L["NewProject"]</MudSelectItem>
            </MudSelect>
            @if (_creating)
            {
                <MudTextField @bind-Value="_newProjectName" Label='@L["Project"]' />
                @if (ConfigService.Projects.Count > 0)
                {
                    <MudSelect T="string" Label='@L["ImportFrom"]' @bind-Value="_importFrom">
                        <MudSelectItem Value="@string.Empty">@L["None"]</MudSelectItem>
                        @foreach (var p in ConfigService.Projects)
                        {
                            <MudSelectItem Value="@p.Name">@p.Name</MudSelectItem>
                        }
                    </MudSelect>
                }
                <MudStack Row="true" Spacing="1" Class="mt-2">
                    <MudButton OnClick="CreateProject" Color="Color.Primary" Disabled="_newProjectName.Trim().Length < 2">@L["NewProject"]</MudButton>
                    <MudButton OnClick="CancelNewProject" Color="Color.Secondary">@L["Cancel"]</MudButton>
                </MudStack>
            }
            else
            {
                <MudTextField @bind-Value="_model.Project" Label='@L["Project"]' />
                <MudButton OnClick="DeleteProject" Color="Color.Error" Disabled="ConfigService.Projects.Count == 0" Class="mt-2">@L["DeleteProject"]</MudButton>
            }
        </MudStack>
        <MudTabs Class="mt-4">
            <MudTabPanel Text='@L["GeneralTab"]'>
                <MudStack Spacing="2">
                    <MudTextField @bind-Value="_model.Project" Label='@L["Project"]'/>
                    <MudTextField @bind-Value="_model.Organization" Label='@L["Organization"]'/>
                    <MudTextField @bind-Value="_model.PatToken" Label='@L["PatToken"]' InputType="InputType.Password" HelperText="Leave blank to use global token"/>
                    <MudTextField @bind-Value="_model.MainBranch" Label='@L["MainBranch"]'/>
                    <MudTextField @bind-Value="_model.DefaultStates" Label='@L["DefaultStates"]' HelperText="Comma separated"/>
                    <MudSwitch T="bool" @bind-Value="_model.DarkMode" Color="Color.Primary" Label='@L["DarkMode"]'/>
                    <MudSwitch T="bool" @bind-Value="_model.ReleaseNotesTreeView" Color="Color.Primary" Label='@L["ReleaseNotesTreeView"]'/>
                </MudStack>
            </MudTabPanel>
            <MudTabPanel Text='@L["StoryQualityTab"]'>
                <MudStack Spacing="2">
                    <MudTextField @bind-Value="_model.DefinitionOfReady" Label='@L["DefinitionOfReady"]' Lines="3"/>
                </MudStack>
            </MudTabPanel>
            <MudTabPanel Text='@L["PromptsTab"]'>
                <MudStack Spacing="2">
                    <MudTextField @bind-Value="_model.StoryQualityPrompt" Label='@L["StoryQualityPrompt"]' Lines="3"/>
                    <MudTextField @bind-Value="_model.ReleaseNotesPrompt" Label='@L["ReleaseNotesPrompt"]' Lines="3"/>
                    <MudTextField @bind-Value="_model.RequirementsPrompt" Label='@L["RequirementsPrompt"]' Lines="3"/>
                    <MudTextField @bind-Value="_model.PromptCharacterLimit" Label='@L["PromptLimit"]' InputType="InputType.Number" />
                    <MudCheckBox T="bool" @bind-Value="_promptsAll" Label='@L["SaveForAll"]' />
                    @if (_promptsAll)
                    {
                        <MudText Color="Color.Error" Typo="Typo.caption">@L["OverrideWarning"]</MudText>
                    }
                </MudStack>
            </MudTabPanel>
            <MudTabPanel Text='@L["ValidationTab"]'>
                <MudStack Spacing="1">
                    <MudText Typo="Typo.h6" Class="mt-2">Epic</MudText>
                    <MudSwitch T="bool" @bind-Value="_model.Rules.Epic.HasDescription" Color="Color.Primary" Label="Has description"/>

                    <MudDivider Class="my-2"/>

                    <MudText Typo="Typo.h6" Class="mt-2">Feature</MudText>
                    <MudSwitch T="bool" @bind-Value="_model.Rules.Feature.HasDescription" Color="Color.Primary" Label="Has description"/>
                    <MudSwitch T="bool" @bind-Value="_model.Rules.Feature.HasParent" Color="Color.Primary" Label="Has parent"/>

                    <MudDivider Class="my-2"/>

                    <MudText Typo="Typo.h6" Class="mt-2">User Story</MudText>
                    <MudSwitch T="bool" @bind-Value="_model.Rules.Story.HasDescription" Color="Color.Primary" Label="Has description"/>
                    <MudSwitch T="bool" @bind-Value="_model.Rules.Story.HasParent" Color="Color.Primary" Label="Has parent"/>
                    <MudSwitch T="bool" @bind-Value="_model.Rules.Story.HasStoryPoints" Color="Color.Primary" Label="Has story points"/>
                    <MudSwitch T="bool" @bind-Value="_model.Rules.Story.HasAcceptanceCriteria" Color="Color.Primary" Label="Has acceptance criteria"/>
                    <MudSwitch T="bool" @bind-Value="_model.Rules.Story.HasAssignee" Color="Color.Primary" Label="Has assignee"/>

                    <MudDivider Class="my-2"/>

                    <MudText Typo="Typo.h6" Class="mt-2">Bug</MudText>
                    <MudSwitch T="bool" @bind-Value="_model.Rules.Bug.IncludeReproSteps" Color="Color.Primary" Label="Include Repro Steps"/>
                    <MudSwitch T="bool" @bind-Value="_model.Rules.Bug.IncludeSystemInfo" Color="Color.Primary" Label="Include System Info"/>
                    <MudSwitch T="bool" @bind-Value="_model.Rules.Bug.HasStoryPoints" Color="Color.Primary" Label='@L["BugHasStoryPoints"]'/>
                    <MudCheckBox T="bool" @bind-Value="_validationAll" Label='@L["SaveForAll"]' Class="mt-2" />
                    @if (_validationAll)
                    {
                        <MudText Color="Color.Error" Typo="Typo.caption">@L["OverrideWarning"]</MudText>
                    }
                </MudStack>
            </MudTabPanel>
        </MudTabs>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Save" Color="Color.Primary">@L["Save"]</MudButton>
        <MudButton OnClick="Cancel" Color="Color.Secondary">@L["Cancel"]</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;

    private const string NewProjectValue = "__new";
    private DevOpsConfig _model = new();
    private string _selected = string.Empty;
    private string _newProjectName = string.Empty;
    private string _importFrom = string.Empty;
    private bool _creating;
    private bool _promptsAll;
    private bool _validationAll;

    protected override async Task OnInitializedAsync()
    {
        await ConfigService.LoadAsync();
        _selected = ConfigService.CurrentProject.Name;
        var cfg = ConfigService.Config;
        _model = new DevOpsConfig
        {
            Organization = cfg.Organization,
            Project = cfg.Project,
            PatToken = cfg.PatToken,
            MainBranch = cfg.MainBranch,
            DefaultStates = cfg.DefaultStates,
            DarkMode = cfg.DarkMode,
            ReleaseNotesTreeView = cfg.ReleaseNotesTreeView,
            DefinitionOfReady = cfg.DefinitionOfReady,
            StoryQualityPrompt = cfg.StoryQualityPrompt,
            ReleaseNotesPrompt = cfg.ReleaseNotesPrompt,
            RequirementsPrompt = cfg.RequirementsPrompt,
            PromptCharacterLimit = cfg.PromptCharacterLimit,
            Rules = new ValidationRules
            {
                Epic = new EpicRules { HasDescription = cfg.Rules.Epic.HasDescription },
                Feature = new FeatureRules
                {
                    HasDescription = cfg.Rules.Feature.HasDescription,
                    HasParent = cfg.Rules.Feature.HasParent
                },
                Story = new StoryRules
                {
                    HasDescription = cfg.Rules.Story.HasDescription,
                    HasParent = cfg.Rules.Story.HasParent,
                    HasStoryPoints = cfg.Rules.Story.HasStoryPoints,
                    HasAcceptanceCriteria = cfg.Rules.Story.HasAcceptanceCriteria,
                    HasAssignee = cfg.Rules.Story.HasAssignee
                },
                Bug = new BugRules
                {
                    IncludeReproSteps = cfg.Rules.Bug.IncludeReproSteps,
                    IncludeSystemInfo = cfg.Rules.Bug.IncludeSystemInfo,
                    HasStoryPoints = cfg.Rules.Bug.HasStoryPoints
                }
            }
        };
        StateHasChanged();
    }

    private async Task Save()
    {
        bool result;
        if (_selected == ConfigService.CurrentProject.Name)
        {
            result = await ConfigService.SaveCurrentAsync(_model.Project, _model);
        }
        else
        {
            result = await ConfigService.UpdateProjectAsync(_selected, _model.Project, _model);
        }
        if (!result)
        {
            Snackbar.Add(L["DuplicateName"].Value, Severity.Error);
            return;
        }
        if (_promptsAll || _validationAll)
        {
            var parameters = new DialogParameters { ["Message"] = L["ConfirmOverrideAll"] };
            var dialog = await DialogService.ShowAsync<ConfirmDialog>(L["Confirm"], parameters);
            var res = await dialog.Result;
            if (res?.Canceled != false)
                return;

            foreach (var p in ConfigService.Projects)
            {
                if (p.Name == _model.Project) continue;
                var cfg = p.Config;
                if (_promptsAll)
                {
                    cfg.StoryQualityPrompt = _model.StoryQualityPrompt;
                    cfg.ReleaseNotesPrompt = _model.ReleaseNotesPrompt;
                    cfg.RequirementsPrompt = _model.RequirementsPrompt;
                    cfg.PromptCharacterLimit = _model.PromptCharacterLimit;
                }
                if (_validationAll)
                {
                    cfg.Rules = _model.Rules;
                }
                await ConfigService.UpdateProjectAsync(p.Name, p.Name, cfg);
            }
        }
        Snackbar.Add(L["SavedMessage"].Value, Severity.Success);
        MudDialog?.Close(DialogResult.Ok(true));
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void OnProjectChanged(string name)
    {
        _selected = name;
        if (name == NewProjectValue)
        {
            _creating = true;
            _newProjectName = string.Empty;
            _importFrom = string.Empty;
            return;
        }

        _creating = false;
        var proj = ConfigService.Projects.First(p => p.Name == name);
        var cfg = proj.Config;
        _model = new DevOpsConfig
        {
            Organization = cfg.Organization,
            Project = cfg.Project,
            PatToken = cfg.PatToken,
            MainBranch = cfg.MainBranch,
            DefaultStates = cfg.DefaultStates,
            DarkMode = cfg.DarkMode,
            ReleaseNotesTreeView = cfg.ReleaseNotesTreeView,
            DefinitionOfReady = cfg.DefinitionOfReady,
            StoryQualityPrompt = cfg.StoryQualityPrompt,
            ReleaseNotesPrompt = cfg.ReleaseNotesPrompt,
            RequirementsPrompt = cfg.RequirementsPrompt,
            PromptCharacterLimit = cfg.PromptCharacterLimit,
            Rules = cfg.Rules
        };
        StateHasChanged();
    }

    private async Task CreateProject()
    {
        DevOpsProject? copy = ConfigService.Projects.FirstOrDefault(p => p.Name == _importFrom);
        var added = await ConfigService.AddProjectAsync(_newProjectName, copy);
        if (!added)
        {
            Snackbar.Add(L["DuplicateName"].Value, Severity.Error);
            return;
        }
        _newProjectName = string.Empty;
        _importFrom = string.Empty;
        _creating = false;
        _selected = ConfigService.CurrentProject.Name;
        var cfg = ConfigService.Config;
        _model = new DevOpsConfig
        {
            Organization = cfg.Organization,
            Project = cfg.Project,
            PatToken = cfg.PatToken,
            MainBranch = cfg.MainBranch,
            DefaultStates = cfg.DefaultStates,
            DarkMode = cfg.DarkMode,
            ReleaseNotesTreeView = cfg.ReleaseNotesTreeView,
            DefinitionOfReady = cfg.DefinitionOfReady,
            StoryQualityPrompt = cfg.StoryQualityPrompt,
            ReleaseNotesPrompt = cfg.ReleaseNotesPrompt,
            RequirementsPrompt = cfg.RequirementsPrompt,
            PromptCharacterLimit = cfg.PromptCharacterLimit,
            Rules = cfg.Rules
        };
    }

    private void CancelNewProject()
    {
        _creating = false;
        _selected = ConfigService.CurrentProject.Name;
        _newProjectName = string.Empty;
        _importFrom = string.Empty;
    }

    private async Task DeleteProject()
    {
        var parameters = new DialogParameters { ["Message"] = $"{L["ConfirmDelete"].Value} {_model.Project}?" };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>(L["Confirm"], parameters);
        var result = await dialog.Result;
        if (result?.Canceled != false) return;
        await ConfigService.RemoveProjectAsync(_model.Project);
        _selected = ConfigService.CurrentProject.Name;
        var cfg = ConfigService.Config;
        _model = new DevOpsConfig
        {
            Organization = cfg.Organization,
            Project = cfg.Project,
            PatToken = cfg.PatToken,
            MainBranch = cfg.MainBranch,
            DefaultStates = cfg.DefaultStates,
            DarkMode = cfg.DarkMode,
            ReleaseNotesTreeView = cfg.ReleaseNotesTreeView,
            DefinitionOfReady = cfg.DefinitionOfReady,
            StoryQualityPrompt = cfg.StoryQualityPrompt,
            ReleaseNotesPrompt = cfg.ReleaseNotesPrompt,
            RequirementsPrompt = cfg.RequirementsPrompt,
            PromptCharacterLimit = cfg.PromptCharacterLimit,
            Rules = cfg.Rules
        };
    }

}