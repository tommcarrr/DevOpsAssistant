@using MudBlazor
@using DevOpsAssistant.Services
@inject DevOpsConfigService ConfigService

<MudDialog ContentClass="pa-4" ActionsClass="pa-4">
    <DialogContent>
        <MudTabs>
            <MudTabPanel Text="General">
                <MudStack Spacing="2">
                    <MudTextField @bind-Value="_model.Organization" Label="Organization" />
                    <MudTextField @bind-Value="_model.Project" Label="Project" />
                    <MudTextField @bind-Value="_model.PatToken" Label="PAT Token" InputType="InputType.Password" />
                    <MudSwitch T="bool" @bind-Checked="_model.DarkMode" Color="Color.Primary" Label="Dark Mode" />
                </MudStack>
            </MudTabPanel>
            <MudTabPanel Text="Validation Rules">
                <MudStack Spacing="1">
                    <MudSwitch T="bool" @bind-Checked="_model.Rules.EpicHasDescription" Label="Epic has description" />
                    <MudSwitch T="bool" @bind-Checked="_model.Rules.FeatureHasDescription" Label="Feature has description" />
                    <MudSwitch T="bool" @bind-Checked="_model.Rules.FeatureHasParent" Label="Feature has parent" />
                    <MudSwitch T="bool" @bind-Checked="_model.Rules.StoryHasDescription" Label="Story has description" />
                    <MudSwitch T="bool" @bind-Checked="_model.Rules.StoryHasParent" Label="Story has parent" />
                    <MudSwitch T="bool" @bind-Checked="_model.Rules.StoryHasStoryPoints" Label="Story has story points" />
                    <MudSwitch T="bool" @bind-Checked="_model.Rules.StoryHasAcceptanceCriteria" Label="Story has acceptance criteria" />
                    <MudSwitch T="bool" @bind-Checked="_model.Rules.StoryHasAssignee" Label="Story has assignee" />
                </MudStack>
            </MudTabPanel>
        </MudTabs>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Save" Color="Color.Primary">Save</MudButton>
        <MudButton OnClick="Cancel" Color="Color.Secondary">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;

    private DevOpsConfig _model = new();

    protected override async Task OnInitializedAsync()
    {
        await ConfigService.LoadAsync();
        var cfg = ConfigService.Config;
        _model = new DevOpsConfig
        {
            Organization = cfg.Organization,
            Project = cfg.Project,
            PatToken = cfg.PatToken,
            DarkMode = cfg.DarkMode,
            Rules = new ValidationRules
            {
                EpicHasDescription = cfg.Rules.EpicHasDescription,
                FeatureHasDescription = cfg.Rules.FeatureHasDescription,
                FeatureHasParent = cfg.Rules.FeatureHasParent,
                StoryHasDescription = cfg.Rules.StoryHasDescription,
                StoryHasParent = cfg.Rules.StoryHasParent,
                StoryHasStoryPoints = cfg.Rules.StoryHasStoryPoints,
                StoryHasAcceptanceCriteria = cfg.Rules.StoryHasAcceptanceCriteria,
                StoryHasAssignee = cfg.Rules.StoryHasAssignee
            }
        };
        StateHasChanged();
    }

    private async Task Save()
    {
        await ConfigService.SaveAsync(_model);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel() => MudDialog.Cancel();
}
