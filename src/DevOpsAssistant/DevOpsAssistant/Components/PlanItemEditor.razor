@using Microsoft.Extensions.Localization
@inject IStringLocalizer<PlanItemEditor> L

<MudPaper Class="@($"pa-6 {WorkItemHelpers.GetItemClass(Type)}")" @ondrop="OnDropInternal" @ondragover:preventDefault="Droppable">
    <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
        @if (Draggable)
        {
            <MudIconButton Icon="@Icons.Material.Filled.DragIndicator" Class="drag-handle" draggable="true" @ondragstart="DragStart" Size="Size.Small" />
        }
        <MudText Typo="@HeaderTypo">@Type</MudText>
        @if (OnDelete.HasDelegate)
        {
            <MudTooltip Text="@DeleteTooltip">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="OnDelete" />
            </MudTooltip>
        }
    </MudStack>
    <MudStack Spacing="1">
        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
            <MudText Typo="Typo.subtitle2">@L["TitleLabel"]</MudText>
            @if (!_editTitle)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="BeginEditTitle" />
            }
            else
            {
                <MudIconButton Icon="@Icons.Material.Filled.Check" Size="Size.Small" OnClick="ConfirmTitle" />
            }
        </MudStack>
        @if (_editTitle)
        {
            <MudTextField @bind-Value="_titleEdit" Label="@L["TitleLabel"]" />
        }
        else
        {
            <div>@Title</div>
        }

        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
            <MudText Typo="Typo.subtitle2">@L["DescriptionLabel"]</MudText>
            @if (!_editDescription)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="BeginEditDescription" />
            }
            else
            {
                <MudIconButton Icon="@Icons.Material.Filled.Check" Size="Size.Small" OnClick="ConfirmDescription" />
            }
        </MudStack>
        @if (_editDescription)
        {
            <MudTextField @bind-Value="_descriptionEdit" Label="@L["DescriptionLabel"]" Lines="3" />
        }
        else
        {
            <MudPaper Class="preview-box mud-typography-body1" Elevation="0">
                @((MarkupString)Description)
            </MudPaper>
        }

        @if (AcceptanceCriteria != null)
        {
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                <MudText Typo="Typo.subtitle2">@L["AcceptanceCriteriaLabel"]</MudText>
                @if (!_editCriteria)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="BeginEditCriteria" />
                }
                else
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Check" Size="Size.Small" OnClick="ConfirmCriteria" />
                }
            </MudStack>
            @if (_editCriteria)
            {
                <MudTextField @bind-Value="_criteriaEdit" Label="@L["AcceptanceCriteriaLabel"]" Lines="3" />
            }
            else
            {
                <MudPaper Class="preview-box mud-typography-body1" Elevation="0">
                    @((MarkupString)AcceptanceCriteria)
                </MudPaper>
            }
        }

        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
            <MudText Typo="Typo.subtitle2">@L["TagsLabel"]</MudText>
            @if (!_editTags)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="BeginEditTags" />
            }
            else
            {
                <MudIconButton Icon="@Icons.Material.Filled.Check" Size="Size.Small" OnClick="ConfirmTags" />
            }
        </MudStack>
        @if (_editTags)
        {
            <MudChipSet T="string">
                @foreach (var t in _tagsEdit)
                {
                    if (IsProtected(t))
                    {
                        <MudChip Value="@t">@t</MudChip>
                    }
                    else
                    {
                        <MudChip Value="@t" OnClose="(MudChip<string> _) => RemoveTag(t)">@t</MudChip>
                    }
                }
            </MudChipSet>
            <MudStack Row="true" Spacing="1" AlignItems="AlignItems.End">
            <MudTextField T="string" @bind-Value="_newTag" Label="@L["TagLabel"]" />
            <MudButton Variant="Variant.Text" OnClick="AddTag" Disabled="string.IsNullOrWhiteSpace(_newTag)">@L["AddLabel"]</MudButton>
            </MudStack>
        }
        else
        {
            <div>@string.Join(", ", Tags)</div>
        }
    </MudStack>

    @if (ChildContent != null)
    {
        @ChildContent
    }
</MudPaper>

@code {
    [Parameter] public string Type { get; set; } = string.Empty;
    [Parameter] public bool Draggable { get; set; }
    [Parameter] public bool Droppable { get; set; }
    [Parameter] public EventCallback DragStart { get; set; }
    [Parameter] public EventCallback Drop { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }
    [Parameter] public string DeleteTooltip { get; set; } = "Delete";
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> TitleChanged { get; set; }
    [Parameter] public string Description { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> DescriptionChanged { get; set; }
    [Parameter] public string? AcceptanceCriteria { get; set; }
    [Parameter] public EventCallback<string?> AcceptanceCriteriaChanged { get; set; }
    [Parameter] public List<string> Tags { get; set; } = new();
    [Parameter] public EventCallback<List<string>> TagsChanged { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private string _newTag = string.Empty;
    private bool _editTitle;
    private bool _editDescription;
    private bool _editCriteria;
    private bool _editTags;
    private string _titleEdit = string.Empty;
    private string _descriptionEdit = string.Empty;
    private string? _criteriaEdit;
    private List<string> _tagsEdit = new();

    private Typo HeaderTypo => Type switch
    {
        "Epic" => Typo.h6,
        "Feature" => Typo.subtitle1,
        _ => Typo.subtitle2
    };

    private void AddTag()
    {
        if (!string.IsNullOrWhiteSpace(_newTag))
        {
            _tagsEdit.Add(_newTag.Trim());
            _newTag = string.Empty;
        }
    }

    private bool IsProtected(string tag) => string.Equals(tag, AppConstants.AiGeneratedTag, StringComparison.OrdinalIgnoreCase);

    private void RemoveTag(string tag)
    {
        if (IsProtected(tag))
            return;
        _tagsEdit.Remove(tag);
    }

    private Task OnDropInternal()
    {
        if (Droppable && Drop.HasDelegate)
            return Drop.InvokeAsync();
        return Task.CompletedTask;
    }

    private void BeginEditTitle()
    {
        _titleEdit = Title;
        _editTitle = true;
    }

    private async Task ConfirmTitle()
    {
        _editTitle = false;
        Title = _titleEdit;
        await TitleChanged.InvokeAsync(Title);
    }

    private void BeginEditDescription()
    {
        _descriptionEdit = Description;
        _editDescription = true;
    }

    private async Task ConfirmDescription()
    {
        _editDescription = false;
        Description = _descriptionEdit;
        await DescriptionChanged.InvokeAsync(Description);
    }

    private void BeginEditCriteria()
    {
        _criteriaEdit = AcceptanceCriteria;
        _editCriteria = true;
    }

    private async Task ConfirmCriteria()
    {
        _editCriteria = false;
        AcceptanceCriteria = _criteriaEdit;
        await AcceptanceCriteriaChanged.InvokeAsync(AcceptanceCriteria);
    }

    private void BeginEditTags()
    {
        _tagsEdit = Tags.ToList();
        _editTags = true;
    }

    private async Task ConfirmTags()
    {
        _editTags = false;
        Tags = _tagsEdit;
        await TagsChanged.InvokeAsync(Tags);
    }
}
