@using DevOpsAssistant.Services.Models
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<WikiDocumentSelector> L

<MudTooltip Text='@L["SourceTooltip"]'>
    <MudRadioGroup T="DocumentSource"
                   Value="@Source"
                   ValueChanged="OnSourceChanged">
        <MudRadio T="DocumentSource" Value="@DocumentSource.Wiki">@L["WikiLabel"]</MudRadio>
        <MudRadio T="DocumentSource" Value="@DocumentSource.Document">@L["DocumentLabel"]</MudRadio>
        <MudRadio T="DocumentSource" Value="@DocumentSource.Text">@L["TextLabel"]</MudRadio>
    </MudRadioGroup>
</MudTooltip>
@if (Source == DocumentSource.Document)
{
    <InputFile OnChange="OnFileSelected" accept=".pdf,.docx,.pptx,.md" />
}
else if (Source == DocumentSource.Text)
{
    <MudTextField T="string"
                  Value="@Text"
                  ValueChanged="OnTextChanged"
                  Lines="4"
                  Placeholder="@L["TextPlaceholder"]"
                  Immediate="true" />
}
else if (WikiItems != null)
{
    <MudTreeView T="WikiPageNode"
                 Items="@WikiItems"
                 SelectionMode="SelectionMode.MultiSelection"
                 SelectedValues="@SelectedPages"
                 SelectedValuesChanged="@(pages => OnSelectedPagesChanged(pages))"
                 Class="scroll-300">
        <ItemTemplate>
            <MudTreeViewItem Items="@context.Children" Value="@context.Value" Text="@context.Text" @bind-Expanded="@context.Expanded" />
        </ItemTemplate>
    </MudTreeView>
}

@code {
    [Parameter] public DocumentSource Source { get; set; }
    [Parameter] public EventCallback<DocumentSource> SourceChanged { get; set; }
    [Parameter] public IBrowserFile? File { get; set; }
    [Parameter] public EventCallback<IBrowserFile?> FileChanged { get; set; }
    [Parameter] public string? Text { get; set; }
    [Parameter] public EventCallback<string?> TextChanged { get; set; }
    [Parameter] public List<TreeItemData<WikiPageNode>>? WikiItems { get; set; }
    [Parameter] public IReadOnlyCollection<WikiPageNode>? SelectedPages { get; set; }
    [Parameter] public EventCallback<IReadOnlyCollection<WikiPageNode>?> SelectedPagesChanged { get; set; }

    private Task OnFileSelected(InputFileChangeEventArgs e)
    {
        File = e.File;
        return FileChanged.InvokeAsync(File);
    }

    private Task OnSourceChanged(DocumentSource source)
    {
        Source = source;
        return SourceChanged.InvokeAsync(Source);
    }

    private Task OnTextChanged(string? value)
    {
        Text = value;
        return TextChanged.InvokeAsync(Text);
    }

    private Task OnSelectedPagesChanged(IReadOnlyCollection<WikiPageNode> pages)
    {
        SelectedPages = pages;
        return SelectedPagesChanged.InvokeAsync(SelectedPages);
    }
}
