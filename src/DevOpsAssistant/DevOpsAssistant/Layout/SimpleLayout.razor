@using DevOpsAssistant.Components
@inherits LayoutComponentBase
@inject IDialogService DialogService
@inject DevOpsConfigService ConfigService
@inject VersionService VersionService
@inject IJSRuntime JS
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SimpleLayout> L

<MudThemeProvider IsDarkMode="@ConfigService.GlobalDarkMode"/>
<MudDialogProvider/>
<MudPopoverProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Color="Color.Primary" Elevation="1">
        <MudText Typo="Typo.h6" Class="ms-2 me-4">
            <MudNavLink Href="" Match="NavLinkMatch.All" Style="color:inherit;text-decoration:none">DevOpsAssistant</MudNavLink>
        </MudText>
        <MudSpacer/>
        <MudIconButton Icon="@Icons.Material.Filled.Settings" OnClick="OpenOptionsDialog" title='@L["GlobalSettings"]'/>
        <MudIconButton Icon="@Icons.Material.Filled.Help" Href="/help" title='@L["Help"]' class="mx-2"/>
        <MudMenu Icon="@Icons.Material.Filled.Logout" Dense="true" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" title='@L["SignOut"]'>
            <MudMenuItem OnClick="RemovePat">@L["RemovePat"]</MudMenuItem>
            <MudMenuItem OnClick="SignOut">@L["RemoveAll"]</MudMenuItem>
        </MudMenu>
    </MudAppBar>

    <MudMainContent>
        <div class="main-content">
            <MudContainer MaxWidth="MaxWidth.Large" Class="pa-4 mt-4">
                @Body
            </MudContainer>
        </div>
        <footer class="app-footer">
            <MudContainer MaxWidth="MaxWidth.Large" Class="py-2 footer-content">
                <MudText Typo="Typo.body2" Align="Align.Left">
                    @string.Format(L["FooterCopyright"], System.DateTime.Now.Year)
                </MudText>
                <MudText Typo="Typo.caption" Align="Align.Right">
                    Version @VersionService.Version
                </MudText>
            </MudContainer>
        </footer>
    </MudMainContent>
</MudLayout>

@code {
    protected override async Task OnInitializedAsync()
    {
        await VersionService.LoadAsync();
        await ConfigService.LoadAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setHighContrast", ConfigService.GlobalHighContrast);
        }
    }

    private async Task SignOut()
    {
        var parameters = new DialogParameters { ["Message"] = L["RemoveAllWarning"].Value };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>(L["Confirm"], parameters);
        var result = await dialog.Result;
        if (result?.Canceled != false) return;

        await ConfigService.ClearAsync();
        StateHasChanged();
    }

    private async Task RemovePat()
    {
        var parameters = new DialogParameters { ["Message"] = L["RemovePatWarning"].Value };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>(L["Confirm"], parameters);
        var result = await dialog.Result;
        if (result?.Canceled != false) return;

        await ConfigService.RemoveGlobalPatAsync();
        StateHasChanged();
    }

    private async Task OpenOptionsDialog()
    {
        await DialogService.ShowAsync<GlobalOptionsDialog>(L["GlobalSettings"]);
    }
}
