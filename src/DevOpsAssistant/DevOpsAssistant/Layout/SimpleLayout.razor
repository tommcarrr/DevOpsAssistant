@using DevOpsAssistant.Components
@inherits LayoutComponentBase
@implements IDisposable
@inject IDialogService DialogService
@inject DevOpsConfigService ConfigService
@inject VersionService VersionService
@using DevOpsAssistant.Utils
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SimpleLayout> L
@inject ThemeSessionService ThemeSession

<MudThemeProvider Theme="@CurrentTheme" @bind-IsDarkMode="_isDarkMode"/>
<MudDialogProvider/>
<MudPopoverProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Color="Color.Primary" Elevation="1">
        <MudText Typo="Typo.h6">
            <MudNavLink Href="" Match="NavLinkMatch.All" Class="no-link-style">DevOpsAssistant</MudNavLink>
        </MudText>
        <MudSpacer/>
        <MudIconButton Icon="@(_isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)" Color="Color.Inherit" OnClick="ToggleDarkMode" title='@L["ToggleTheme"]'/>
        <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" OnClick="OpenOptionsDialog" title='@L["GlobalSettings"]'/>
        <MudIconButton Icon="@Icons.Material.Filled.Help" Color="Color.Inherit" OnClick="OpenHelpDialog" aria-label="@L["Help"]" title='@L["Help"]'/>
        <MudMenu Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" Dense="true" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" title='@L["SignOut"]'>
            <MudMenuItem OnClick="RemovePat">@L["RemovePat"]</MudMenuItem>
            <MudMenuItem OnClick="RemoveOrg">@L["RemoveOrg"]</MudMenuItem>
            <MudMenuItem OnClick="SignOut">@L["RemoveAll"]</MudMenuItem>
        </MudMenu>
    </MudAppBar>

    <MudMainContent>
        <div class="main-content">
            <MudContainer MaxWidth="MaxWidth.Large" Class="pa-6">
                @Body
            </MudContainer>
        </div>
        <footer class="app-footer">
            <MudContainer MaxWidth="MaxWidth.Large" Class="footer-content">
            <MudText Typo="Typo.body2" Align="Align.Left" Inline="true">
                @string.Format(L["FooterCopyright"], System.DateTime.Now.Year)
            </MudText>
            <MudText Typo="Typo.caption" Align="Align.Left" Inline="true">
                @L["FooterDisclaimer"]
            </MudText>
            <MudText Typo="Typo.caption" Class="float-right" Inline="true">
                Version @VersionService.Version
            </MudText>
            </MudContainer>
        </footer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _isDarkMode;
    private MudTheme CurrentTheme => ThemeSession.IsDoom ? DoomTheme.Theme : AzureDevOpsTheme.Theme;

    protected override void OnInitialized()
    {
        ThemeSession.ThemeChanged += OnThemeChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        await VersionService.LoadAsync();
        await ConfigService.LoadAsync();
        _isDarkMode = ConfigService.GlobalDarkMode;
    }



    private async Task SignOut()
    {
        var parameters = new DialogParameters { ["Message"] = L["RemoveAllWarning"].Value };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>(L["Confirm"], parameters);
        var result = await dialog.Result;
        if (result?.Canceled != false) return;

        await ConfigService.ClearAsync();
        StateHasChanged();
    }

    private async Task RemovePat()
    {
        var parameters = new DialogParameters { ["Message"] = L["RemovePatWarning"].Value };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>(L["Confirm"], parameters);
        var result = await dialog.Result;
        if (result?.Canceled != false) return;

        await ConfigService.RemoveGlobalPatAsync();
        StateHasChanged();
    }

    private async Task RemoveOrg()
    {
        var parameters = new DialogParameters { ["Message"] = L["RemoveOrgWarning"].Value };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>(L["Confirm"], parameters);
        var result = await dialog.Result;
        if (result?.Canceled != false) return;

        await ConfigService.RemoveGlobalOrganizationAsync();
        StateHasChanged();
    }

    private async Task ToggleDarkMode()
    {
        _isDarkMode = !_isDarkMode;
        await ConfigService.SaveGlobalDarkModeAsync(_isDarkMode);
    }

    private async Task OpenOptionsDialog()
    {
        await DialogService.ShowAsync<GlobalOptionsDialog>(L["GlobalSettings"]);
    }

    private async Task OpenHelpDialog()
    {
        await DialogService.ShowAsync<HelpDialog>(L["Help"]);
    }

    private void OnThemeChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ThemeSession.ThemeChanged -= OnThemeChanged;
    }
}
