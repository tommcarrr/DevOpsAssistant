@using DevOpsAssistant.Components
@inherits LayoutComponentBase
@implements IDisposable
@inject IDialogService DialogService
@inject DevOpsConfigService ConfigService
@inject VersionService VersionService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<MainLayout> L

<MudThemeProvider IsDarkMode="@ConfigService.GlobalDarkMode"/>
<MudDialogProvider/>
<MudPopoverProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Color="Color.Primary" Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="ToggleDrawer"/>
        <MudText Typo="Typo.h6" Class="ms-2 me-4">
            <MudNavLink Href="" Match="NavLinkMatch.All" Style="color:inherit;text-decoration:none">DevOpsAssistant</MudNavLink>
        </MudText>
        <MudSpacer/>
        <MudMenu Label='@L["Projects"]' Class="me-2">
            @foreach (var p in ConfigService.Projects)
            {
                <MudMenuItem OnClick="() => ChangeProject(p.Name)">@p.Name</MudMenuItem>
            }
            <MudDivider />
            <MudMenuItem Href="/projects/new">@L["NewProject"]</MudMenuItem>
        </MudMenu>
        <MudIconButton Icon="@Icons.Material.Filled.Settings" OnClick="OpenOptionsDialog" title='@L["GlobalSettings"]' class="me-2"/>
        <MudIconButton Icon="@Icons.Material.Filled.Help" Href="/help" title='@L["Help"]' class="me-2"/>
        <MudMenu Icon="@Icons.Material.Filled.Logout" Dense="true" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" title='@L["SignOut"]'>
            <MudMenuItem OnClick="RemovePat">@L["RemovePat"]</MudMenuItem>
            <MudMenuItem OnClick="SignOut">@L["RemoveAll"]</MudMenuItem>
        </MudMenu>
    </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen" Variant="DrawerVariant.Responsive" Elevation="1" Class="mud-width-220" ClipMode="DrawerClipMode.Always">
        <MudNavMenu>
            <MudNavGroup Title="@L["WorkItems"]" Expanded="true">
                <MudNavLink Href="@($"projects/{_selectedProject}/epics-features")" Icon="@Icons.Material.Filled.List" Disabled="@IsProjectInvalid">@L["Epics"]</MudNavLink>
                <MudNavLink Href="@($"projects/{_selectedProject}/validation")" Icon="@Icons.Material.Filled.Rule" Disabled="@IsProjectInvalid">@L["Validation"]</MudNavLink>
                <MudNavLink Href="@($"projects/{_selectedProject}/story-review")" Icon="@Icons.Material.Filled.Check" Disabled="@IsProjectInvalid">@L["StoryReview"]</MudNavLink>
                <MudNavLink Href="@($"projects/{_selectedProject}/requirements-planner")" Icon="@Icons.Material.Filled.NoteAlt" Disabled="@IsProjectInvalid">@L["RequirementPlanner"]</MudNavLink>
            </MudNavGroup>
            <MudNavGroup Title="@L["Reports"]" Expanded="true">
                <MudNavLink Href="@($"projects/{_selectedProject}/release-notes")" Icon="@Icons.Material.Filled.Article" Disabled="@IsProjectInvalid">@L["ReleaseNotes"]</MudNavLink>
                <MudNavLink Href="@($"projects/{_selectedProject}/metrics")" Icon="@Icons.Material.Filled.Insights" Disabled="@IsProjectInvalid">@L["Metrics"]</MudNavLink>
                <MudNavLink Href="@($"projects/{_selectedProject}/branch-health")" Icon="@Icons.Material.Filled.Source" Disabled="@IsProjectInvalid">@L["BranchHealth"]</MudNavLink>
            </MudNavGroup>
            <MudNavLink Href="@($"/projects/{_selectedProject}/settings")" Icon="@Icons.Material.Filled.Settings">@L["Settings"]</MudNavLink>
        </MudNavMenu>
    </MudDrawer>

    <MudMainContent>
        <div class="main-content">
            <MudContainer MaxWidth="MaxWidth.Large" Class="pa-4 mt-4">
                @Body
            </MudContainer>
        </div>
        <footer class="app-footer">
            <MudContainer MaxWidth="MaxWidth.Large" Class="py-2 footer-content">
                <MudText Typo="Typo.body2" Align="Align.Left">
                    @string.Format(L["FooterCopyright"], System.DateTime.Now.Year)
                </MudText>
                <MudText Typo="Typo.caption" Align="Align.Right">
                    Version @VersionService.Version
                </MudText>
            </MudContainer>
        </footer>
    </MudMainContent>
</MudLayout>

@code {

    private bool _drawerOpen = true;
    private string _selectedProject = string.Empty;
    private bool _initialized;
    
    private void HandleProjectChanged()
    {
        _selectedProject = ConfigService.CurrentProject.Name;
        InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        ConfigService.ProjectChanged += HandleProjectChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setHighContrast", ConfigService.GlobalHighContrast);
        }
        if (!_initialized)
            return;
        EnsureSettingsIfNeeded();
    }

    protected override async Task OnInitializedAsync()
    {
        await VersionService.LoadAsync();
        await ConfigService.LoadAsync();
        _selectedProject = ConfigService.CurrentProject.Name;
        _initialized = true;
        StateHasChanged();
    }

    private void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
    }


    private async Task SignOut()
    {
        var parameters = new DialogParameters { ["Message"] = L["RemoveAllWarning"].Value };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>(L["Confirm"], parameters);
        var result = await dialog.Result;
        if (result?.Canceled != false) return;

        await ConfigService.ClearAsync();
        StateHasChanged();
    }

    private async Task RemovePat()
    {
        var parameters = new DialogParameters { ["Message"] = L["RemovePatWarning"].Value };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>(L["Confirm"], parameters);
        var result = await dialog.Result;
        if (result?.Canceled != false) return;

        await ConfigService.RemoveGlobalPatAsync();
        StateHasChanged();
    }

    private async Task OpenOptionsDialog()
    {
        await DialogService.ShowAsync<GlobalOptionsDialog>(L["GlobalSettings"]);
    }

    private async Task ChangeProject(string name)
    {
        if (name == ConfigService.CurrentProject.Name)
            return;

        _selectedProject = name;
        var parameters = new DialogParameters { ["Message"] = L["ChangeProjectWarning"].Value };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>(L["Confirm"], parameters);
        var result = await dialog.Result;
        if (result?.Canceled != false)
        {
            _selectedProject = ConfigService.CurrentProject.Name;
            StateHasChanged();
            return;
        }

        await ConfigService.SelectProjectAsync(name);
        _selectedProject = ConfigService.CurrentProject.Name;
        StateHasChanged();
        EnsureSettingsIfNeeded();

        var relative = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        if (relative.StartsWith("projects/"))
        {
            var segments = relative.Split('/', StringSplitOptions.RemoveEmptyEntries);
            if (segments.Length > 1 && segments[1] != "new")
            {
                segments[1] = name;
                NavigationManager.NavigateTo($"/{string.Join('/', segments)}", replace: true);
                return;
            }
            NavigationManager.NavigateTo("/", replace: true);
        }
    }

    private void EnsureSettingsIfNeeded()
    {
        var relative = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        if (!ConfigService.Projects.Any())
        {
            if (!relative.StartsWith("projects/new"))
                NavigationManager.NavigateTo("/projects/new", replace: true);
            return;
        }

        if (IsProjectInvalid &&
            !relative.StartsWith("projects/new") &&
            !relative.EndsWith("/settings"))
        {
            NavigationManager.NavigateTo($"/projects/{_selectedProject}/settings", replace: true);
        }
    }

    private bool IsProjectInvalid => !ConfigService.IsCurrentProjectValid;

    public void Dispose()
    {
        ConfigService.ProjectChanged -= HandleProjectChanged;
    }

}