@using DevOpsAssistant.Components
@inherits LayoutComponentBase
@inject IDialogService DialogService
@inject DevOpsConfigService ConfigService
@inject VersionService VersionService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<MainLayout> L

<MudThemeProvider IsDarkMode="@ConfigService.Config.DarkMode"/>
<MudDialogProvider/>
<MudPopoverProvider/>

<MudLayout>
    <MudAppBar Color="Color.Primary" Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="ToggleDrawer"/>
        <MudText Typo="Typo.h6" Class="ms-2 me-4">
            <MudNavLink Href="" Match="NavLinkMatch.All" Style="color:inherit;text-decoration:none">DevOpsAssistant</MudNavLink>
        </MudText>
        <MudSpacer/>
        <MudMenu Label='@L["Projects"]' Class="me-2">
            @foreach (var p in ConfigService.Projects)
            {
                <MudMenuItem OnClick="() => ChangeProject(p.Name)">@p.Name</MudMenuItem>
            }
            <MudDivider />
            <MudMenuItem Href="/projects/new">@L["NewProject"]</MudMenuItem>
        </MudMenu>
        <MudIconButton Icon="@Icons.Material.Filled.Logout" OnClick="SignOut" title='@L["SignOut"]'/>
    </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen" Variant="DrawerVariant.Responsive" Elevation="1" Class="mud-width-220" ClipMode="DrawerClipMode.Always">
        <MudNavMenu>
            <MudNavLink Href="" Icon="@Icons.Material.Filled.Home" Match="NavLinkMatch.All">@L["Home"]</MudNavLink>
            <MudNavGroup Title="@L["WorkItems"]" Expanded="true">
                <MudNavLink Href="epics-features" Icon="@Icons.Material.Filled.List" Disabled="@IsConfigMissing">@L["Epics"]</MudNavLink>
                <MudNavLink Href="validation" Icon="@Icons.Material.Filled.Rule" Disabled="@IsConfigMissing">@L["Validation"]</MudNavLink>
                <MudNavLink Href="story-review" Icon="@Icons.Material.Filled.Check" Disabled="@IsConfigMissing">@L["StoryReview"]</MudNavLink>
                <MudNavLink Href="requirements-planner" Icon="@Icons.Material.Filled.NoteAlt" Disabled="@IsConfigMissing">@L["RequirementPlanner"]</MudNavLink>
            </MudNavGroup>
            <MudNavGroup Title="@L["Reports"]" Expanded="true">
                <MudNavLink Href="release-notes" Icon="@Icons.Material.Filled.Article" Disabled="@IsConfigMissing">@L["ReleaseNotes"]</MudNavLink>
                <MudNavLink Href="metrics" Icon="@Icons.Material.Filled.Insights" Disabled="@IsConfigMissing">@L["Metrics"]</MudNavLink>
                <MudNavLink Href="branch-health" Icon="@Icons.Material.Filled.Source" Disabled="@IsConfigMissing">@L["BranchHealth"]</MudNavLink>
            </MudNavGroup>
            <MudNavLink Href="@($"/projects/{_selectedProject}/settings")" Icon="@Icons.Material.Filled.Settings">@L["Settings"]</MudNavLink>
            <MudNavLink Href="help" Icon="@Icons.Material.Filled.Help">@L["Help"]</MudNavLink>
        </MudNavMenu>
    </MudDrawer>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="pa-4 mt-4">
            @Body
        </MudContainer>
    </MudMainContent>
    <footer>
        <MudText Typo="Typo.caption" Align="Align.Center" Class="pa-2">
            Version @VersionService.Version
        </MudText>
    </footer>
</MudLayout>

@code {

    private bool _drawerOpen = true;
    private string _selectedProject = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await VersionService.LoadAsync();
        await ConfigService.LoadAsync();
        _selectedProject = ConfigService.CurrentProject.Name;
        StateHasChanged();
    }

    private void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
    }


    private async Task SignOut()
    {
        await ConfigService.ClearAsync();
        StateHasChanged();
    }

    private async Task ChangeProject(string name)
    {
        if (name == ConfigService.CurrentProject.Name)
            return;

        _selectedProject = name;
        var parameters = new DialogParameters { ["Message"] = L["ChangeProjectWarning"].Value };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>(L["Confirm"], parameters);
        var result = await dialog.Result;
        if (result?.Canceled != false)
        {
            _selectedProject = ConfigService.CurrentProject.Name;
            StateHasChanged();
            return;
        }

        await ConfigService.SelectProjectAsync(name);
        _selectedProject = ConfigService.CurrentProject.Name;
        StateHasChanged();
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private bool IsConfigMissing =>
        string.IsNullOrWhiteSpace(ConfigService.Config.Organization) ||
        string.IsNullOrWhiteSpace(ConfigService.Config.Project) ||
        string.IsNullOrWhiteSpace(ConfigService.Config.PatToken);

}