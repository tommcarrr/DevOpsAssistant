@using DevOpsAssistant.Components
@inherits LayoutComponentBase
@inject IDialogService DialogService
@inject DevOpsConfigService ConfigService

<MudThemeProvider IsDarkMode="@ConfigService.Config.DarkMode"/>
<MudDialogProvider/>
<MudPopoverProvider/>

<MudLayout>
    <MudAppBar Color="Color.Primary" Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="ToggleDrawer"/>
        <MudText Typo="Typo.h6" Class="ms-2 me-4">
            <MudNavLink Href="" Match="NavLinkMatch.All" Style="color:inherit;text-decoration:none">DevOpsAssistant</MudNavLink>
        </MudText>
        <MudSpacer/>
        <MudIconButton Icon="@Icons.Material.Filled.Settings" OnClick="OpenSettings"/>
        <MudIconButton Icon="@Icons.Material.Filled.Logout" OnClick="SignOut" title="Sign Out"/>
    </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen" Variant="DrawerVariant.Responsive" Elevation="1" Class="mud-width-220" ClipMode="DrawerClipMode.Always">
        <MudNavMenu>
            <MudNavLink Href="" Icon="@Icons.Material.Filled.Home" Match="NavLinkMatch.All">Home</MudNavLink>
            <MudNavLink Href="epics-features" Icon="@Icons.Material.Filled.List" Disabled="@IsConfigMissing">Epics &amp; Features</MudNavLink>
            <MudNavLink Href="validation" Icon="@Icons.Material.Filled.Rule" Disabled="@IsConfigMissing">Validation</MudNavLink>
            <MudNavLink Href="release-notes" Icon="@Icons.Material.Filled.Article" Disabled="@IsConfigMissing">Release Notes</MudNavLink>
            <MudNavLink Href="story-review" Icon="@Icons.Material.Filled.Check" Disabled="@IsConfigMissing">Story Quality</MudNavLink>
            <MudNavLink Href="metrics" Icon="@Icons.Material.Filled.Insights" Disabled="@IsConfigMissing">Metrics</MudNavLink>
        </MudNavMenu>
    </MudDrawer>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="pa-4 mt-4">
            @if (IsConfigMissing)
            {
                <DevOpsAssistant.Components.SplashScreen OnSettingsSaved="StateHasChanged"/>
            }
            else
            {
                @Body
            }
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {

    private bool _drawerOpen = true;

    protected override async Task OnInitializedAsync()
    {
        await ConfigService.LoadAsync();
        StateHasChanged();
    }

    private void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task OpenSettings()
    {
        var dialog = await DialogService.ShowAsync<SettingsDialog>("Settings");
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            StateHasChanged();
        }
    }

    private async Task SignOut()
    {
        await ConfigService.ClearAsync();
        StateHasChanged();
    }

    private bool IsConfigMissing =>
        string.IsNullOrWhiteSpace(ConfigService.Config.Organization) ||
        string.IsNullOrWhiteSpace(ConfigService.Config.Project) ||
        string.IsNullOrWhiteSpace(ConfigService.Config.PatToken);

}