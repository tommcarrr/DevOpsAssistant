@inherits LayoutComponentBase
@implements IDisposable
@inject IDialogService DialogService
@inject DevOpsConfigService ConfigService
@inject VersionService VersionService
@inject NavigationManager NavigationManager
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<MainLayout> L
@inject ThemeSessionService ThemeSession

<MudThemeProvider Theme="@CurrentTheme" @bind-IsDarkMode="_isDarkMode"/>
<MudDialogProvider/>
<MudPopoverProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Color="Color.Primary" Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="ToggleDrawer" aria-label="@L["Menu"]"/>
        <MudText Typo="Typo.h6">
            <MudNavLink Href="" Match="NavLinkMatch.All" Class="no-link-style app-logo">@L["AppName"]</MudNavLink>
        </MudText>
        <MudSpacer/>
        <MudMenu Label='@(_selectedProject.Length > 0 ? _selectedProject : L["Projects"])' EndIcon="@Icons.Material.Filled.ArrowDropDown">
            @foreach (var p in ConfigService.Projects.OrderBy(p => p.Name))
            {
                <MudMenuItem OnClick="() => ChangeProject(p.Name)"
                             Style="@GetProjectStyle(p.Color)"
                             Class="@GetProjectClass(p.Color)">@p.Name</MudMenuItem>
            }
            <MudDivider />
            <MudMenuItem Href="/projects/new">@L["NewProject"]</MudMenuItem>
        </MudMenu>
        <MudIconButton Icon="@(_isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)" Color="Color.Inherit" OnClick="ToggleDarkMode" title='@L["ToggleTheme"]'/>
        <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" OnClick="OpenOptionsDialog" title='@L["GlobalSettings"]'/>
        <MudIconButton Icon="@Icons.Material.Filled.Help" Color="Color.Inherit" OnClick="OpenHelpDialog" aria-label="@L["Help"]" title='@L["Help"]'/>
        <MudMenu Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" Dense="true" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" title='@L["SignOut"]'>
            <MudMenuItem OnClick="RemovePat">@L["RemovePat"]</MudMenuItem>
            <MudMenuItem OnClick="RemoveOrg">@L["RemoveOrg"]</MudMenuItem>
            <MudMenuItem OnClick="SignOut">@L["RemoveAll"]</MudMenuItem>
        </MudMenu>
    </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen" Variant="DrawerVariant.Responsive" Elevation="1" Class="mud-width-220" ClipMode="DrawerClipMode.Always">
            <MudNavMenu>
                <MudNavGroup Title="@L["WorkItems"]" Expanded="true">
                        <MudNavLink Href="@($"projects/{_selectedProject}/epics-features")" Icon="@Icons.Material.Filled.List" Disabled="@IsProjectInvalid">@L["Epics"]</MudNavLink>
                        <MudNavLink Href="@($"projects/{_selectedProject}/validation")" Icon="@Icons.Material.Filled.Rule" Disabled="@IsProjectInvalid">@L["Validation"]</MudNavLink>
                        <MudNavLink Href="@($"projects/{_selectedProject}/bulk-tag")" Icon="@Icons.Material.Filled.Label" Disabled="@IsProjectInvalid">@L["BulkTag"]</MudNavLink>
                        <MudNavLink Href="@($"projects/{_selectedProject}/work-item-viewer")" Icon="@Icons.Material.Filled.Visibility" Disabled="@IsProjectInvalid">@L["WorkItemViewer"]</MudNavLink>
                </MudNavGroup>
                <MudNavGroup Title="@L["AIHelpers"]" Expanded="true">
                        <MudNavLink Href="@($"projects/{_selectedProject}/requirements-planner")" Icon="@Icons.Material.Filled.NoteAlt" Disabled="@IsProjectInvalid">@L["RequirementPlanner"]</MudNavLink>
                        <MudNavLink Href="@($"projects/{_selectedProject}/requirements-coaching")" Icon="@Icons.Material.Filled.Spellcheck" Disabled="@IsProjectInvalid">@L["RequirementQuality"]</MudNavLink>
                        <MudNavLink Href="@($"projects/{_selectedProject}/work-item-coaching")" Icon="@Icons.Material.Filled.Check" Disabled="@IsProjectInvalid">@L["WorkItemQuality"]</MudNavLink>
                        <MudNavLink Href="@($"projects/{_selectedProject}/release-notes")" Icon="@Icons.Material.Filled.Article" Disabled="@IsProjectInvalid">@L["ReleaseNotes"]</MudNavLink>
                </MudNavGroup>
                <MudNavGroup Title="@L["Reports"]" Expanded="true">
                        <MudNavLink Href="@($"projects/{_selectedProject}/metrics")" Icon="@Icons.Material.Filled.Insights" Disabled="@IsProjectInvalid">@L["Metrics"]</MudNavLink>
                        <MudNavLink Href="@($"projects/{_selectedProject}/branch-health")" Icon="@Icons.Material.Filled.Source" Disabled="@IsProjectInvalid">@L["BranchHealth"]</MudNavLink>
                </MudNavGroup>
                <MudNavLink Href="@($"/projects/{_selectedProject}/settings")" Icon="@Icons.Material.Filled.Settings">@L["ProjectSettings"]</MudNavLink>
            </MudNavMenu>
    </MudDrawer>

    <MudMainContent>
        <div class="main-content">
            <MudContainer MaxWidth="MaxWidth.Large" Class="pa-6">
                @Body
            </MudContainer>
        </div>
        <footer class="app-footer">
            <MudContainer MaxWidth="MaxWidth.Large" Class="footer-content">
            <MudText Typo="Typo.body2" Align="Align.Left" Inline="true">
                @string.Format(L["FooterCopyright"], DateTime.Now.Year)
            </MudText>
            <MudText Typo="Typo.caption" Align="Align.Left" Inline="true">
                @L["FooterDisclaimer"]
            </MudText>
            <MudText Typo="Typo.caption" Class="float-right" Inline="true">
                @L["VersionLabel"] @VersionService.Version
            </MudText>
            </MudContainer>
        </footer>
    </MudMainContent>
</MudLayout>

@code {

    private bool _drawerOpen = true;
    private string _selectedProject = string.Empty;
    private bool _initialized;
    private bool _isDarkMode;
    private MudTheme CurrentTheme
        => (ThemeSession.IsDoom
                ? DoomTheme.Theme
                : (ConfigService.GlobalHighContrast ? HighContrastTheme.Theme : AzureDevOpsTheme.Theme))
            .WithPrimaryColor(ConfigService.CurrentProject.Color);

    private static string GetProjectStyle(string color)
        => string.IsNullOrWhiteSpace(color) ? string.Empty : $"background-color:{color};";

    private static string GetProjectClass(string color)
        => string.IsNullOrWhiteSpace(color) ? string.Empty : "project-color-item";
    
    private void HandleProjectChanged()
    {
        _selectedProject = ConfigService.CurrentProject.Name;
        InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        ConfigService.ProjectChanged += HandleProjectChanged;
        ThemeSession.ThemeChanged += OnThemeChanged;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!_initialized)
            return;
        EnsureSettingsIfNeeded();
    }

    protected override async Task OnInitializedAsync()
    {
        await VersionService.LoadAsync();
        await ConfigService.LoadAsync();
        _selectedProject = ConfigService.CurrentProject.Name;
        _isDarkMode = ConfigService.GlobalDarkMode;
        _initialized = true;
        StateHasChanged();
    }

    private void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task ToggleDarkMode()
    {
        _isDarkMode = !_isDarkMode;
        await ConfigService.SaveGlobalDarkModeAsync(_isDarkMode);
    }


    private async Task SignOut()
    {
        var parameters = new DialogParameters { ["Message"] = L["RemoveAllWarning"].Value };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>(L["Confirm"], parameters);
        var result = await dialog.Result;
        if (result?.Canceled != false) return;

        await ConfigService.ClearAsync();
        StateHasChanged();
    }

    private async Task RemovePat()
    {
        var parameters = new DialogParameters { ["Message"] = L["RemovePatWarning"].Value };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>(L["Confirm"], parameters);
        var result = await dialog.Result;
        if (result?.Canceled != false) return;

        await ConfigService.RemoveGlobalPatAsync();
        StateHasChanged();
    }

    private async Task RemoveOrg()
    {
        var parameters = new DialogParameters { ["Message"] = L["RemoveOrgWarning"].Value };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>(L["Confirm"], parameters);
        var result = await dialog.Result;
        if (result?.Canceled != false) return;

        await ConfigService.RemoveGlobalOrganizationAsync();
        StateHasChanged();
    }

    private void OnThemeChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task OpenOptionsDialog()
    {
        await DialogService.ShowAsync<GlobalOptionsDialog>(L["GlobalSettings"]);
    }

    private async Task OpenHelpDialog()
    {
        await DialogService.ShowAsync<HelpDialog>(L["Help"]);
    }

    private async Task ChangeProject(string name)
    {
        if (name == ConfigService.CurrentProject.Name)
            return;

        _selectedProject = name;
        var parameters = new DialogParameters { ["Message"] = L["ChangeProjectWarning"].Value };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>(L["Confirm"], parameters);
        var result = await dialog.Result;
        if (result?.Canceled != false)
        {
            _selectedProject = ConfigService.CurrentProject.Name;
            StateHasChanged();
            return;
        }

        await ConfigService.SelectProjectAsync(name);
        _selectedProject = ConfigService.CurrentProject.Name;
        StateHasChanged();
        EnsureSettingsIfNeeded();

        var relative = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        if (relative.StartsWith("projects/"))
        {
            var segments = relative.Split('/', StringSplitOptions.RemoveEmptyEntries);
            if (segments.Length > 1 && segments[1] != "new")
            {
                segments[1] = name;
                NavigationManager.NavigateTo($"/{string.Join('/', segments)}", replace: true);
                return;
            }
            NavigationManager.NavigateTo("/", replace: true);
        }
    }

    private void EnsureSettingsIfNeeded()
    {
        var relative = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        if (!ConfigService.Projects.Any())
        {
            if (!relative.StartsWith("projects/new"))
                NavigationManager.NavigateTo("/projects/new", replace: true);
            return;
        }

        if (IsProjectInvalid &&
            !relative.StartsWith("projects/new") &&
            !relative.EndsWith("/settings"))
        {
            NavigationManager.NavigateTo($"/projects/{_selectedProject}/settings", replace: true);
        }
    }

    private bool IsProjectInvalid => !ConfigService.IsCurrentProjectValid;

    public void Dispose()
    {
        ConfigService.ProjectChanged -= HandleProjectChanged;
        ThemeSession.ThemeChanged -= OnThemeChanged;
    }

}