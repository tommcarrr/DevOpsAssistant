@page "/metrics"
@inject IDevOpsApiService ApiService

<PageTitle>Metrics</PageTitle>

<MudAlert Severity="Severity.Info" Class="mb-4">
    Choose a backlog and click <b>Load</b> to display weekly throughput,
    lead time and cycle time statistics. Charts visualize these metrics
    for the last twelve weeks.
</MudAlert>

<MudPaper Class="p-4 mb-4">
    <MudGrid>
        <MudItem xs="12" md="3">
            <MudSelect T="string" @bind-Value="_path" Label="Backlog">
                @foreach (var b in _backlogs)
                {
                    <MudSelectItem Value="@b">@b</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" md="3">
            <MudSelect T="AggregateMode" @bind-Value="_mode" Label="Aggregate By">
                <MudSelectItem Value="AggregateMode.Week">Week</MudSelectItem>
                <MudSelectItem Value="AggregateMode.Month">Month</MudSelectItem>
            </MudSelect>
        </MudItem>
        <MudItem xs="12" md="3">
            <MudDatePicker @bind-Date="_startDate" Label="Start Date" />
        </MudItem>
        <MudItem xs="12" md="3">
            <MudButton Color="Color.Primary" OnClick="Load">Load</MudButton>
        </MudItem>
    </MudGrid>
</MudPaper>

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (_periods.Any())
{
    <MudTable Items="_periods" Dense="true" Hover="true">
        <HeaderContent>
            <MudTh>Period Ending</MudTh>
            <MudTh>Avg Lead Time (days)</MudTh>
            <MudTh>Avg Cycle Time (days)</MudTh>
            <MudTh>Throughput</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Period">@context.End.ToString("yyyy-MM-dd")</MudTd>
            <MudTd DataLabel="Lead">@context.AvgLeadTime.ToString("0.0")</MudTd>
            <MudTd DataLabel="Cycle">@context.AvgCycleTime.ToString("0.0")</MudTd>
            <MudTd DataLabel="Throughput">@context.Throughput</MudTd>
        </RowTemplate>
    </MudTable>

    <MudPaper Class="pa-2 mt-4">
        <MudChart ChartType="ChartType.Line" ChartSeries="_leadCycleSeries" XAxisLabels="_xAxisLabels" Height="300" />
    </MudPaper>
    <MudPaper Class="pa-2 mt-4">
        <MudChart ChartType="ChartType.Bar" ChartSeries="_throughputSeries" XAxisLabels="_xAxisLabels" Height="300" />
    </MudPaper>
}

@code {
    private string _path = string.Empty;
    private string[] _backlogs = [];
    private bool _loading;
    private AggregateMode _mode = AggregateMode.Week;
    private DateTime? _startDate = DateTime.Today.AddDays(-84);
    private List<PeriodMetrics> _periods = new();

    private string[] _xAxisLabels = [];
    private List<ChartSeries> _leadCycleSeries = [];
    private List<ChartSeries> _throughputSeries = [];

    protected override async Task OnInitializedAsync()
    {
        _backlogs = await ApiService.GetBacklogsAsync();
        if (_backlogs.Length > 0)
            _path = _backlogs[0];
    }

    private async Task Load()
    {
        _loading = true;
        StateHasChanged();
        try
        {
            var items = await ApiService.GetStoryMetricsAsync(_path, _startDate);
            ComputePeriods(items);
        }
        finally
        {
            _loading = false;
        }
    }

    private void ComputePeriods(List<StoryMetric> items)
    {
        _periods.Clear();
        var startDate = _startDate ?? DateTime.Today.AddDays(-84);
        DateTime start = _mode == AggregateMode.Week
            ? StartOfWeek(startDate)
            : new DateTime(startDate.Year, startDate.Month, 1);
        var endBoundary = DateTime.Today;
        while (start <= endBoundary)
        {
            DateTime next = _mode == AggregateMode.Week ? start.AddDays(7) : start.AddMonths(1);
            var rangeItems = items.Where(x => x.ClosedDate >= start && x.ClosedDate < next).ToList();
            var metrics = new PeriodMetrics
            {
                Start = start,
                End = next.AddDays(-1),
                Throughput = rangeItems.Count,
                AvgLeadTime = rangeItems.Any() ? rangeItems.Average(w => (w.ClosedDate - w.CreatedDate).TotalDays) : 0,
                AvgCycleTime = rangeItems.Any() ? rangeItems.Average(w => (w.ClosedDate - w.ActivatedDate).TotalDays) : 0
            };
            _periods.Add(metrics);
            start = next;
        }

        _xAxisLabels = _periods.Select(p => _mode == AggregateMode.Week
                ? p.End.ToString("MM/dd")
                : p.End.ToString("yyyy-MM")).ToArray();
        var lead = _periods.Select(p => p.AvgLeadTime).ToArray();
        var cycle = _periods.Select(p => p.AvgCycleTime).ToArray();
        var throughput = _periods.Select(p => (double)p.Throughput).ToArray();
        _leadCycleSeries =
        [
            new ChartSeries { Name = "Lead Time", Data = lead },
            new ChartSeries { Name = "Cycle Time", Data = cycle }
        ];
        _throughputSeries =
        [
            new ChartSeries { Name = "Throughput", Data = throughput }
        ];
    }

    private static DateTime StartOfWeek(DateTime dt)
    {
        int diff = (7 + (int)dt.DayOfWeek - (int)DayOfWeek.Monday) % 7;
        return dt.Date.AddDays(-diff);
    }

    private class PeriodMetrics
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public double AvgLeadTime { get; set; }
        public double AvgCycleTime { get; set; }
        public int Throughput { get; set; }
    }
}
