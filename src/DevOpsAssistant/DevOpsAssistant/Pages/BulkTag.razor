@page "/projects/{ProjectName}/bulk-tag"
@using DevOpsAssistant.Services.Models
@inject DevOpsApiService ApiService
@inject ISnackbar Snackbar
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<BulkTag> L
@inherits ProjectComponentBase

<PageTitle>DevOpsAssistant - Bulk Tag</PageTitle>

@if (!string.IsNullOrWhiteSpace(_error))
{
    <MudAlert Severity="Severity.Error">@_error</MudAlert>
}

<WorkItemSelector Expanded="@_filtersExpanded" ExpandedChanged="@(v => _filtersExpanded = v)" UseIteration="true" SelectedChanged="OnWorkItemsSelected" StateKey="StateKey" />
<MudStack Row="true" Spacing="2" AlignItems="AlignItems.End" Class="mb-4">
    <MudAutocomplete T="string" @bind-Value="_tag" Label="@L["TagLabel"]" SearchFunc="SearchTags" Class="min-w-200" />
    <MudButton Variant="Variant.Text" OnClick="AddTag" Disabled="string.IsNullOrWhiteSpace(_tag)">@L["AddTag"]</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ApplyTags" Disabled="!_selectedItems.Any() || !_selectedTags.Any() || _loading">@L["AddTags"]</MudButton>
</MudStack>
@if (_selectedTags.Any())
{
    <MudChipSet T="string" Class="mb-2">
        @foreach (var t in _selectedTags)
        {
            <MudChip Value="@t" OnClose="(MudChip<string> _) => RemoveTag(t)" Closeable="true">@t</MudChip>
        }
    </MudChipSet>
}

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}

@if (_selectedItems.Any())
{
    <MudTable Items="_selectedItems" Dense="true">
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Title</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd>
                <MudTooltip Text='@L["DeleteTooltip"]'>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="() => RemoveItem(context)" />
                </MudTooltip>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    [Parameter] public string ProjectName { get; set; } = string.Empty;

    private readonly HashSet<WorkItemInfo> _selectedItems = [];
    private HashSet<string> _selectedTags = new();
    private string[] _tags = [];
    private string _tag = string.Empty;
    private bool _loading;
    private string? _error;
    private bool _filtersExpanded = true;
    private const string StateKey = "bulk-tag";

    protected override async Task OnInitializedAsync()
    {
        await ConfigService.LoadAsync();
        if (!string.IsNullOrWhiteSpace(ProjectName) && ConfigService.CurrentProject.Name != ProjectName)
        {
            await ConfigService.SelectProjectAsync(ProjectName);
        }
        try
        {
            _tags = (await ApiService.GetTagsAsync()).ToArray();
            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    private Task OnWorkItemsSelected(IReadOnlyCollection<WorkItemInfo> items)
    {
        _selectedItems.Clear();
        foreach (var i in items)
            _selectedItems.Add(i);
        return Task.CompletedTask;
    }

    private void RemoveItem(WorkItemInfo item)
    {
        _selectedItems.Remove(item);
    }

    private Task<IEnumerable<string>> SearchTags(string value, CancellationToken _)
    {
        IEnumerable<string> result = _tags;
        if (!string.IsNullOrWhiteSpace(value))
            result = result.Where(t => t.Contains(value, StringComparison.OrdinalIgnoreCase));
        result = result.Where(t => !_selectedTags.Contains(t));
        return Task.FromResult(result);
    }

    private void AddTag()
    {
        if (string.IsNullOrWhiteSpace(_tag))
            return;
        _selectedTags.Add(_tag);
        _tag = string.Empty;
    }

    private void RemoveTag(string tag)
    {
        _selectedTags.Remove(tag);
    }


    private async Task ApplyTags()
    {
        if (_selectedItems.Count == 0 || _selectedTags.Count == 0) return;
        _loading = true;
        StateHasChanged();
        try
        {
            foreach (var item in _selectedItems)
                foreach (var tag in _selectedTags)
                    await ApiService.AddTagAsync(item.Id, tag);
                    Snackbar.Add(L["AddedMessage"].Value, Severity.Success);
            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    protected override Task OnProjectChangedAsync()
    {
        return OnInitializedAsync();
    }
}
