@page "/projects/{ProjectName}/validation"
@using DevOpsAssistant.Services.Models
@inject DevOpsApiService ApiService
@inject PageStateService StateService
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Validation> L
@inherits ProjectComponentBase

<PageTitle>@L["PageTitle"]</PageTitle>

@if (!_hasRules)
{
    <MudAlert Severity="Severity.Warning">
        @L["NoRules"]
        <MudButton Variant="Variant.Text"
                   StartIcon="@Icons.Material.Filled.Settings"
                   Href="@($"/projects/{ConfigService.CurrentProject.Name}/settings")"
                  >
            @L["OpenSettings"]
        </MudButton>
    </MudAlert>
}
@if (!string.IsNullOrWhiteSpace(_error))
{
    <MudAlert Severity="Severity.Error">@_error</MudAlert>
}
@if (_hasRules)
{
    <MudButton Variant="Variant.Text" OnClick="ToggleRules" StartIcon="@(_rulesExpanded ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)">
        @(_rulesExpanded ? L["HideRules"] : L["ShowRules"])
    </MudButton>
    <MudCollapse Expanded="_rulesExpanded">
        <MudList T="string" Dense="true">
            @foreach (var r in _activeRules)
            {
                <MudListItem T="string">@r</MudListItem>
            }
        </MudList>
    </MudCollapse>
}

<WorkItemSelector Expanded="@_filtersExpanded" ExpandedChanged="@(v => _filtersExpanded = v)" UseIteration="true" SelectedChanged="OnWorkItemsSelected" StateKey="StateKey" />
<MudStack Row="true" Spacing="2" Class="mb-4">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Load" Disabled="!_hasRules || !_selectedItems.Any()">@L["Check"]</MudButton>
    <MudButton Variant="Variant.Outlined" OnClick="Reset">@L["Reset"]</MudButton>
</MudStack>

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
}
else if (_results != null)
{
    if (_results.Count == 0)
    {
        <MudAlert Severity="Severity.Success">@L["AllConform"]</MudAlert>
    }
    else
    {
        <MudStack Row="true" Spacing="2" Justify="Justify.FlexEnd" Class="mb-2">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@_loading" OnClick="TagAll">@L["TagAllInvalid"]</MudButton>
        </MudStack>
        <MudPaper Class="pa-6 work-item-container">
            <MudList T="ResultItem" Dense="true" Class="work-item-tree">
                @foreach (var r in _results)
                {
                    <MudListItem T="ResultItem">
                        <MudStack Spacing="1">
                            <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                                <MudText>
                                    <MudLink Href="@r.Info.Url" Class="@WorkItemHelpers.GetItemClass(r.Info.WorkItemType)" Target="_blank">@r.Info.Title</MudLink> - @r.Info.WorkItemType (@r.Info.State)
                                </MudText>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" Disabled="@(_loading || r.NeedsAttention)" OnClick="() => TagItem(r)">@L["Tag"]</MudButton>
                                @if (r.NeedsAttention)
                                {
                                    <MudTooltip Text='@L["AlreadyTaggedTooltip"]'>
                                        <MudIcon Icon="@Icons.Material.Filled.Flag" Color="Color.Error" />
                                    </MudTooltip>
                                }
                            </MudStack>
                            <ul class="work-item-violations">
                                @foreach (var v in r.Violations)
                                {
                                    <li>@v</li>
                                }
                            </ul>
                        </MudStack>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
    }
}

@code {
    [Parameter] public string ProjectName { get; set; } = string.Empty;
    private readonly HashSet<WorkItemInfo> _selectedItems = [];
    private bool _loading;
    private bool _hasRules;
    private string[] _activeRules = [];
    private bool _rulesExpanded;
    private bool _filtersExpanded = true;
    private List<ResultItem>? _results;
    private string? _error;
    private const string StateKey = "validation";

    protected override async Task OnInitializedAsync()
    {
        await ConfigService.LoadAsync();
        if (!string.IsNullOrWhiteSpace(ProjectName) &&
            ConfigService.CurrentProject.Name != ProjectName)
        {
            await ConfigService.SelectProjectAsync(ProjectName);
        }
        try
        {
            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        ComputeRules();
    }

    private async Task Load()
    {
        if (!_hasRules)
            return;
        _filtersExpanded = false;
        _loading = true;
        StateHasChanged();
        try
        {
            var details = await ApiService.GetWorkItemDetailsAsync(_selectedItems.Select(i => i.Id));
            _results = Validate(details);
            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    @*Load*@}

@code {
    private List<ResultItem> Validate(List<WorkItemDetails> items)
    {
        var rules = ConfigService.Config.Rules;
        List<ResultItem> list = [];
        foreach (var item in items)
        {
            List<string> v = [];
            if (item.Info.WorkItemType.Equals("Epic", StringComparison.OrdinalIgnoreCase))
            {
                if (rules.Epic.HasDescription && !item.HasDescription) v.Add("Missing description");
            }
            else if (item.Info.WorkItemType.Equals("Feature", StringComparison.OrdinalIgnoreCase))
            {
                if (rules.Feature.HasDescription && !item.HasDescription) v.Add("Missing description");
                if (rules.Feature.HasParent && !item.HasParent) v.Add("Missing parent");
            }
            else if (item.Info.WorkItemType.Equals("User Story", StringComparison.OrdinalIgnoreCase))
            {
                if (rules.Story.HasDescription && !item.HasDescription) v.Add("Missing description");
                if (rules.Story.HasParent && !item.HasParent) v.Add("Missing parent");
                if (rules.Story.HasStoryPoints && !item.HasStoryPoints) v.Add("Missing story points");
                if (rules.Story.HasAcceptanceCriteria && !item.HasAcceptanceCriteria) v.Add("Missing acceptance criteria");
                if (rules.Story.HasAssignee && !item.HasAssignee) v.Add("Unassigned");
            }
            else if (item.Info.WorkItemType.Equals("Bug", StringComparison.OrdinalIgnoreCase))
            {
                if (rules.Bug.IncludeReproSteps && !item.HasReproSteps) v.Add("Missing repro steps");
                if (rules.Bug.IncludeSystemInfo && !item.HasSystemInfo) v.Add("Missing system info");
                if (rules.Bug.HasStoryPoints && !item.HasStoryPoints) v.Add("Missing story points");
            }

            if (v.Count > 0)
                list.Add(new ResultItem
                {
                    Info = item.Info,
                    Violations = v,
                    NeedsAttention = item.NeedsAttention
                });
        }

        return list;
    }


    private void ComputeRules()
    {
        var r = ConfigService.Config.Rules;
        List<string> list = [];
        if (r.Epic.HasDescription) list.Add("Epics must have a description");
        if (r.Feature.HasDescription) list.Add("Features must have a description");
        if (r.Feature.HasParent) list.Add("Features must have a parent");
        if (r.Story.HasDescription) list.Add("Stories must have a description");
        if (r.Story.HasParent) list.Add("Stories must have a parent");
        if (r.Story.HasStoryPoints) list.Add("Stories must have story points");
        if (r.Story.HasAcceptanceCriteria) list.Add("Stories must have acceptance criteria");
        if (r.Story.HasAssignee) list.Add("Stories must have an assignee");
        if (r.Bug.IncludeReproSteps) list.Add("Bugs must have repro steps");
        if (r.Bug.IncludeSystemInfo) list.Add("Bugs must have system info");
        if (r.Bug.HasStoryPoints) list.Add(L["BugStoryPointsRule"]);
        _activeRules = list.ToArray();
        _hasRules = _activeRules.Length > 0;
    }

    private void ToggleRules()
    {
        _rulesExpanded = !_rulesExpanded;
    }


    private async Task TagItem(ResultItem item)
    {
        try
        {
            await ApiService.AddTagAsync(item.Info.Id, "Needs Attention");
            var comment = "Flagged as needing attention<br/>" +
                string.Join("<br/>", item.Violations.Select(v => $"- {v}"));
            await ApiService.AddCommentAsync(item.Info.Id, comment);
            item.NeedsAttention = true;
            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        StateHasChanged();
    }

    private async Task TagAll()
    {
        if (_results == null || _results.Count == 0) return;
        _loading = true;
        StateHasChanged();
        try
        {
            foreach (var r in _results)
            {
                await ApiService.AddTagAsync(r.Info.Id, "Needs Attention");
                var comment = "Flagged as needing attention<br/>" +
                    string.Join("<br/>", r.Violations.Select(v => $"- {v}"));
                await ApiService.AddCommentAsync(r.Info.Id, comment);
                r.NeedsAttention = true;
            }
            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task Reset()
    {
        _selectedItems.Clear();
        _results = null;
        await StateService.ClearAsync(StateKey);
        StateHasChanged();
    }

    private Task OnWorkItemsSelected(IReadOnlyCollection<WorkItemInfo> items)
    {
        _selectedItems.Clear();
        foreach (var i in items)
            _selectedItems.Add(i);
        return Task.CompletedTask;
    }

    private class ResultItem
    {
        public WorkItemInfo Info { get; set; } = new();
        public List<string> Violations { get; set; } = [];
        public bool NeedsAttention { get; set; }
    }


    protected override Task OnProjectChangedAsync()
    {
        return OnInitializedAsync();
    }
}

}
