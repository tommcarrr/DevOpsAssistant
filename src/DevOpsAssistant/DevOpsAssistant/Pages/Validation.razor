@page "/validation"
@using DevOpsAssistant.Components
@inject DevOpsApiService ApiService
@inject DevOpsConfigService ConfigService
@inject IDialogService DialogService

<PageTitle>DevOpsAssistant - Story Validation</PageTitle>

@if (!_hasRules)
{
    <MudAlert Severity="Severity.Warning" Class="mb-4">
        No validation rules are configured.
        <MudButton Variant="Variant.Text"
                   StartIcon="@Icons.Material.Filled.Settings"
                   OnClick="OpenSettings" Class="ms-2">
            Open Settings
        </MudButton>
    </MudAlert>
}
@if (!string.IsNullOrWhiteSpace(_error))
{
    <MudAlert Severity="Severity.Error" Class="mb-4">@_error</MudAlert>
}
else
{
    <MudAlert Severity="Severity.Info" Class="mb-4">
        Select a backlog and states then click <b>Check</b> to validate work items against
        your configured rules. Any violations will be listed below.
        @if (_hasRules)
        {
            <MudButton Class="mt-2 rules-toggle"
                       Variant="Variant.Text"
                       OnClick="ToggleRules"
                       StartIcon="@(_rulesExpanded ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)">
                @(_rulesExpanded ? "Hide Rules" : "Show Rules")
            </MudButton>
            <MudCollapse Expanded="_rulesExpanded">
                <MudList T="string" Dense="true" Class="ms-4 mt-2">
                    @foreach (var r in _activeRules)
                    {
                        <MudListItem T="string">@r</MudListItem>
                    }
                </MudList>
            </MudCollapse>
        }
    </MudAlert>
}

<MudPaper Class="p-4 mb-4">
    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.End" Wrap="Wrap.Wrap">
        <MudSelect T="string" @bind-Value="_path" Label="Backlog">
            @foreach (var b in _backlogs)
            {
                <MudSelectItem Value="@b">@b</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="string" MultiSelection="true" SelectedValues="SelectedStates" SelectedValuesChanged="@(vals => OnStatesChanged(vals))" Label="States">
            @foreach (var s in _states)
            {
                <MudSelectItem Value="@s">@s</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="string" MultiSelection="true" SelectedValues="SelectedTypes" SelectedValuesChanged="@(vals => OnTypesChanged(vals))" Label="Types">
            @foreach (var t in _types)
            {
                <MudSelectItem Value="@t">@t</MudSelectItem>
            }
        </MudSelect>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Load" Disabled="!_hasRules">Check</MudButton>
    </MudStack>
</MudPaper>

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
}
else if (_results != null)
{
    if (_results.Count == 0)
    {
        <MudAlert Severity="Severity.Success">All items conform to rules.</MudAlert>
    }
    else
    {
        <MudStack Row="true" Spacing="2" Class="mb-2">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@_loading" OnClick="TagAll">Tag All</MudButton>
        </MudStack>
        <MudPaper Class="pa-2 work-item-container">
            <MudList T="ResultItem" Dense="true" Class="work-item-tree">
                @foreach (var r in _results)
                {
                    <MudListItem T="ResultItem">
                        <MudStack Spacing="1">
                            <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                                <MudText>
                                    <MudLink Href="@r.Info.Url" Class="@WorkItemHelpers.GetItemClass(r.Info.WorkItemType)" Target="_blank">@r.Info.Title</MudLink> - @r.Info.WorkItemType (@r.Info.State)
                                </MudText>
                                <MudButton Variant="Variant.Text" Size="Size.Small" Disabled="@_loading" OnClick="() => TagItem(r)">Tag</MudButton>
                            </MudStack>
                            <ul class="work-item-violations">
                                @foreach (var v in r.Violations)
                                {
                                    <li>@v</li>
                                }
                            </ul>
                        </MudStack>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
    }
}

@code {
    private string _path = string.Empty;
    private string[] _backlogs = [];
    private string[] _states = [];
    private readonly string[] _types = ["Epic", "Feature", "User Story", "Bug"];
    private HashSet<string> SelectedStates { get; set; } = new();
    private HashSet<string> SelectedTypes { get; set; } = new();
    private bool _loading;
    private bool _hasRules;
    private string[] _activeRules = [];
    private bool _rulesExpanded;
    private List<ResultItem>? _results;
    private string? _error;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _backlogs = await ApiService.GetBacklogsAsync();
            if (_backlogs.Length > 0)
                _path = _backlogs[0];
            _states = await ApiService.GetStatesAsync();
            var extras = ConfigService.Config.DefaultStates?.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries) ?? Array.Empty<string>();
            SelectedStates = _states
                .Where(s => s.Equals("New", StringComparison.OrdinalIgnoreCase) ||
                            s.Equals("Active", StringComparison.OrdinalIgnoreCase) ||
                            extras.Any(e => s.Equals(e, StringComparison.OrdinalIgnoreCase)))
                .ToHashSet();
            SelectedTypes = _types.ToHashSet();
            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        ComputeRules();
    }

    private async Task Load()
    {
        if (!_hasRules)
            return;
        _loading = true;
        StateHasChanged();
        try
        {
            var items = await ApiService.GetValidationItemsAsync(_path, SelectedStates, SelectedTypes);
            _results = Validate(items);
            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private List<ResultItem> Validate(List<WorkItemDetails> items)
    {
        var rules = ConfigService.Config.Rules;
        List<ResultItem> list = [];
        foreach (var item in items)
        {
            List<string> v = [];
            if (item.Info.WorkItemType.Equals("Epic", StringComparison.OrdinalIgnoreCase))
            {
                if (rules.Epic.HasDescription && !item.HasDescription) v.Add("Missing description");
            }
            else if (item.Info.WorkItemType.Equals("Feature", StringComparison.OrdinalIgnoreCase))
            {
                if (rules.Feature.HasDescription && !item.HasDescription) v.Add("Missing description");
                if (rules.Feature.HasParent && !item.HasParent) v.Add("Missing parent");
            }
            else if (item.Info.WorkItemType.Equals("User Story", StringComparison.OrdinalIgnoreCase))
            {
                if (rules.Story.HasDescription && !item.HasDescription) v.Add("Missing description");
                if (rules.Story.HasParent && !item.HasParent) v.Add("Missing parent");
                if (rules.Story.HasStoryPoints && !item.HasStoryPoints) v.Add("Missing story points");
                if (rules.Story.HasAcceptanceCriteria && !item.HasAcceptanceCriteria) v.Add("Missing acceptance criteria");
                if (rules.Story.HasAssignee && !item.HasAssignee) v.Add("Unassigned");
            }
            else if (item.Info.WorkItemType.Equals("Bug", StringComparison.OrdinalIgnoreCase))
            {
                if (rules.Bug.IncludeReproSteps && !item.HasReproSteps) v.Add("Missing repro steps");
                if (rules.Bug.IncludeSystemInfo && !item.HasSystemInfo) v.Add("Missing system info");
            }

            if (v.Count > 0)
                list.Add(new ResultItem { Info = item.Info, Violations = v });
        }

        return list;
    }

    private Task OnStatesChanged(IEnumerable<string> values)
    {
        SelectedStates = new HashSet<string>(values);
        return Task.CompletedTask;
    }

    private Task OnTypesChanged(IEnumerable<string> values)
    {
        SelectedTypes = new HashSet<string>(values);
        return Task.CompletedTask;
    }

    private void ComputeRules()
    {
        var r = ConfigService.Config.Rules;
        List<string> list = [];
        if (r.Epic.HasDescription) list.Add("Epics must have a description");
        if (r.Feature.HasDescription) list.Add("Features must have a description");
        if (r.Feature.HasParent) list.Add("Features must have a parent");
        if (r.Story.HasDescription) list.Add("Stories must have a description");
        if (r.Story.HasParent) list.Add("Stories must have a parent");
        if (r.Story.HasStoryPoints) list.Add("Stories must have story points");
        if (r.Story.HasAcceptanceCriteria) list.Add("Stories must have acceptance criteria");
        if (r.Story.HasAssignee) list.Add("Stories must have an assignee");
        if (r.Bug.IncludeReproSteps) list.Add("Bugs must have repro steps");
        if (r.Bug.IncludeSystemInfo) list.Add("Bugs must have system info");
        _activeRules = list.ToArray();
        _hasRules = _activeRules.Length > 0;
    }

    private void ToggleRules()
    {
        _rulesExpanded = !_rulesExpanded;
    }

    private async Task OpenSettings()
    {
        var dialog = await DialogService.ShowAsync<SettingsDialog>("Settings");
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            ComputeRules();
            StateHasChanged();
        }
    }

    private async Task TagItem(ResultItem item)
    {
        try
        {
            await ApiService.AddTagAsync(item.Info.Id, "Needs Attention");
            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        StateHasChanged();
    }

    private async Task TagAll()
    {
        if (_results == null || _results.Count == 0) return;
        _loading = true;
        StateHasChanged();
        try
        {
            foreach (var r in _results)
                await ApiService.AddTagAsync(r.Info.Id, "Needs Attention");
            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private class ResultItem
    {
        public WorkItemInfo Info { get; set; } = new();
        public List<string> Violations { get; set; } = [];
    }


}