@page "/validation"
@using DevOpsAssistant.Components
@inject DevOpsApiService ApiService
@inject DevOpsConfigService ConfigService
@inject IDialogService DialogService

<PageTitle>Validation</PageTitle>

@if (!_hasRules)
{
    <MudAlert Severity="Severity.Warning" Class="mb-4">
        No validation rules are configured.
        <MudButton Variant="Variant.Text"
                   StartIcon="@Icons.Material.Filled.Settings"
                   OnClick="OpenSettings" Class="ms-2">
            Open Settings
        </MudButton>
    </MudAlert>
}
else
{
    <MudAlert Severity="Severity.Info" Class="mb-4">
        Select a backlog and click <b>Check</b> to validate work items against
        your configured rules. Any violations will be listed below.
        <MudText Typo="Typo.subtitle2" Class="mt-2">Rules:</MudText>
        <MudList T="string" Dense="true" Class="ms-4">
            @foreach (var r in _activeRules)
            {
                <MudListItem T="string">@r</MudListItem>
            }
        </MudList>
    </MudAlert>
}

<MudPaper Class="p-4 mb-4">
    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.End" Wrap="Wrap.Wrap">
        <MudSelect T="string" @bind-Value="_path" Label="Backlog">
            @foreach (var b in _backlogs)
            {
                <MudSelectItem Value="@b">@b</MudSelectItem>
            }
        </MudSelect>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Load" Disabled="!_hasRules">Check</MudButton>
    </MudStack>
</MudPaper>

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
}
else if (_results != null)
{
    if (_results.Count == 0)
    {
        <MudAlert Severity="Severity.Success">All items conform to rules.</MudAlert>
    }
    else
    {
        <MudPaper Class="pa-2">
            <MudList T="ResultItem" Dense="true">
                @foreach (var r in _results)
                {
                    <MudListItem T="ResultItem">
                        <MudLink Href="@r.Info.Url" Target="_blank">@r.Info.Title</MudLink> - @r.Info.WorkItemType
                        <br/>
                        <span class="text-secondary">@string.Join(", ", r.Violations)</span>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
    }
}

@code {
    private string _path = string.Empty;
    private string[] _backlogs = [];
    private bool _loading;
    private bool _hasRules;
    private string[] _activeRules = [];
    private List<ResultItem>? _results;

    protected override async Task OnInitializedAsync()
    {
        _backlogs = await ApiService.GetBacklogsAsync();
        if (_backlogs.Length > 0)
            _path = _backlogs[0];
        ComputeRules();
    }

    private async Task Load()
    {
        if (!_hasRules)
            return;
        _loading = true;
        StateHasChanged();
        try
        {
            var items = await ApiService.GetValidationItemsAsync(_path);
            _results = Validate(items);
        }
        finally
        {
            _loading = false;
        }
    }

    private List<ResultItem> Validate(List<WorkItemDetails> items)
    {
        var rules = ConfigService.Config.Rules;
        var list = new List<ResultItem>();
        foreach (var item in items)
        {
            var v = new List<string>();
            if (item.Info.WorkItemType.Equals("Epic", StringComparison.OrdinalIgnoreCase))
            {
                if (rules.EpicHasDescription && !item.HasDescription) v.Add("Missing description");
            }
            else if (item.Info.WorkItemType.Equals("Feature", StringComparison.OrdinalIgnoreCase))
            {
                if (rules.FeatureHasDescription && !item.HasDescription) v.Add("Missing description");
                if (rules.FeatureHasParent && !item.HasParent) v.Add("Missing parent");
            }
            else if (item.Info.WorkItemType.Equals("User Story", StringComparison.OrdinalIgnoreCase))
            {
                if (rules.StoryHasDescription && !item.HasDescription) v.Add("Missing description");
                if (rules.StoryHasParent && !item.HasParent) v.Add("Missing parent");
                if (rules.StoryHasStoryPoints && !item.HasStoryPoints) v.Add("Missing story points");
                if (rules.StoryHasAcceptanceCriteria && !item.HasAcceptanceCriteria) v.Add("Missing acceptance criteria");
                if (rules.StoryHasAssignee && !item.HasAssignee) v.Add("Unassigned");
            }

            if (v.Count > 0)
                list.Add(new ResultItem { Info = item.Info, Violations = v });
        }

        return list;
    }

    private void ComputeRules()
    {
        var r = ConfigService.Config.Rules;
        var list = new List<string>();
        if (r.EpicHasDescription) list.Add("Epics must have a description");
        if (r.FeatureHasDescription) list.Add("Features must have a description");
        if (r.FeatureHasParent) list.Add("Features must have a parent");
        if (r.StoryHasDescription) list.Add("Stories must have a description");
        if (r.StoryHasParent) list.Add("Stories must have a parent");
        if (r.StoryHasStoryPoints) list.Add("Stories must have story points");
        if (r.StoryHasAcceptanceCriteria) list.Add("Stories must have acceptance criteria");
        if (r.StoryHasAssignee) list.Add("Stories must have an assignee");
        _activeRules = list.ToArray();
        _hasRules = _activeRules.Length > 0;
    }

    private async Task OpenSettings()
    {
        var dialog = await DialogService.ShowAsync<SettingsDialog>("Settings");
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            ComputeRules();
            StateHasChanged();
        }
    }

    private class ResultItem
    {
        public WorkItemInfo Info { get; set; } = new();
        public List<string> Violations { get; set; } = [];
    }

}