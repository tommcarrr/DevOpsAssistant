@page "/epics-features"
@inject DevOpsApiService ApiService
@inject DevOpsConfigService ConfigService

<PageTitle>Epics and Features</PageTitle>

<MudPaper Class="p-4 mb-4">
    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.End" Wrap="Wrap.Wrap">
        <MudSelect T="string" @bind-Value="_path" Label="Backlog">
            @foreach (var b in _backlogs)
            {
                <MudSelectItem Value="@b">@b</MudSelectItem>
            }
        </MudSelect>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Load">Load</MudButton>
    </MudStack>
</MudPaper>

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
}
else if (_roots != null)
{
    <MudPaper Class="work-item-container">
        <MudList T="WorkItemNode" Dense="true" Class="work-item-tree">
            @foreach (var epic in _roots)
            {
                <MudListItem T="WorkItemNode" Class="@GetItemClass(epic.Info.WorkItemType)">
                    <MudLink Href="@epic.Info.Url" Target="_blank">
                        <b>@epic.Info.Title</b>
                    </MudLink> - @epic.Info.WorkItemType (@epic.Info.State)
                    @StatusIcon(epic) @SuggestedState(epic)
                    @if (epic.Children.Any())
                    {
                        <MudList T="WorkItemNode" Dense="true" Class="ms-4">
                            @foreach (var feature in epic.Children)
                            {
                                <MudListItem T="WorkItemNode" Class="@GetItemClass(feature.Info.WorkItemType)">
                                    <MudLink Href="@feature.Info.Url" Target="_blank">
                                        <b>@feature.Info.Title</b>
                                    </MudLink> - @feature.Info.WorkItemType (@feature.Info.State)
                                    @StatusIcon(feature) @SuggestedState(feature)
                                    @if (feature.Children.Any())
                                    {
                                        <MudList T="WorkItemNode" Dense="true" Class="ms-4">
                                            @foreach (var item in feature.Children)
                                            {
                                                <MudListItem T="WorkItemNode" Class="@GetItemClass(item.Info.WorkItemType)">
                                                    <MudLink Href="@item.Info.Url" Target="_blank">@item.Info.Title</MudLink> - @item.Info.WorkItemType (@item.Info.State)
                                                    @SuggestedState(item)
                                                </MudListItem>
                                            }
                                        </MudList>
                                    }
                                </MudListItem>
                            }
                        </MudList>
                    }
                </MudListItem>
            }
        </MudList>
    </MudPaper>
}

@code {
    private string _path = string.Empty;
    private string[] _backlogs = [];
    private bool _loading;
    private List<WorkItemNode>? _roots;

    protected override async Task OnInitializedAsync()
    {
        _backlogs = await ApiService.GetBacklogsAsync();
        if (_backlogs.Length > 0)
            _path = _backlogs[0];
    }

    private async Task Load()
    {
        _loading = true;
        StateHasChanged();
        try
        {
            _roots = await ApiService.GetWorkItemHierarchyAsync(_path);
        }
        finally
        {
            _loading = false;
        }
    }


    private RenderFragment StatusIcon(WorkItemNode node)
    {
        return builder =>
        {
            if (!node.StatusValid)
            {
                builder.OpenComponent<MudIcon>(0);
                builder.AddAttribute(1, "Color", Color.Warning);
                builder.AddAttribute(2, "Icon", Icons.Material.Filled.Warning);
                builder.CloseComponent();
            }
        };
    }

    private RenderFragment SuggestedState(WorkItemNode node)
    {
        return builder =>
        {
            if (!node.StatusValid)
            {
                builder.OpenElement(0, "span");
                builder.AddAttribute(1, "class", "ms-1 text-secondary");
                builder.AddContent(2, $"(Suggested: {node.ExpectedState})");
                builder.CloseElement();
                builder.AddMarkupContent(3, "&nbsp;");
                builder.OpenComponent<MudButton>(4);
                builder.AddAttribute(5, "Variant", Variant.Text);
                builder.AddAttribute(6, "Size", Size.Small);
                builder.AddAttribute(7, "OnClick", EventCallback.Factory.Create<MouseEventArgs>(this, () => UpdateState(node)));
                builder.AddAttribute(8, "ChildContent", (RenderFragment)(b => b.AddContent(0, "Update")));
                builder.CloseComponent();
            }
        };
    }

    private async Task UpdateState(WorkItemNode node)
    {
        await ApiService.UpdateWorkItemStateAsync(node.Info.Id, node.ExpectedState);
        node.Info.State = node.ExpectedState;
        node.StatusValid = true;

        var root = FindRoot(node);
        if (root != null)
            RecomputeStatus(root);

        StateHasChanged();
    }

    private WorkItemNode? FindRoot(WorkItemNode node)
    {
        if (_roots == null)
            return null;

        foreach (var r in _roots)
        {
            if (Contains(r, node.Info.Id))
                return r;
        }

        return null;
    }

    private static bool Contains(WorkItemNode parent, int id)
    {
        if (parent.Info.Id == id)
            return true;
        foreach (var child in parent.Children)
        {
            if (Contains(child, id))
                return true;
        }

        return false;
    }

    private static void RecomputeStatus(WorkItemNode node)
    {
        foreach (var child in node.Children)
            RecomputeStatus(child);

        if (!node.Children.Any())
        {
            node.ExpectedState = node.Info.State;
            node.StatusValid = true;
            return;
        }

        var allClosed = node.Children.All(c =>
            c.Info.State.Equals("Closed", StringComparison.OrdinalIgnoreCase) ||
            c.Info.State.Equals("Removed", StringComparison.OrdinalIgnoreCase) ||
            c.Info.State.Equals("Done", StringComparison.OrdinalIgnoreCase));

        var anyNotNew = node.Children.Any(c => !c.Info.State.Equals("New", StringComparison.OrdinalIgnoreCase));

        var expected = allClosed ? "Closed" : anyNotNew ? "Active" : "New";

        node.ExpectedState = expected;
        node.StatusValid = node.Info.State.Equals(expected, StringComparison.OrdinalIgnoreCase);
    }

    private static string GetItemClass(string type)
    {
        return type.ToLowerInvariant() switch
        {
            "epic" => "work-item-epic",
            "feature" => "work-item-feature",
            "user story" => "work-item-story",
            "task" => "work-item-task",
            "bug" => "work-item-bug",
            _ => string.Empty
        };
    }

}