@page "/projects/{ProjectName}/epics-features"
@using DevOpsAssistant.Services.Models
@inject DevOpsApiService ApiService
@inject PageStateService StateService
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<WorkItems> L
@inherits ProjectComponentBase

<PageTitle>@L["PageTitle"]</PageTitle>

@if (!string.IsNullOrWhiteSpace(_error))
{
    <MudAlert Severity="Severity.Error">@_error</MudAlert>
}

<MudExpansionPanels>
    <MudExpansionPanel Text="@L["Options"]" Expanded="@_filtersExpanded" ExpandedChanged="@(v => _filtersExpanded = v)">
        <MudPaper>
            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.End" Wrap="Wrap.Wrap">
                <MudSelect T="string" @bind-Value="_path" Label="@L["Backlog"]">
                    @foreach (var b in _backlogs)
                    {
                        <MudSelectItem Value="@b">@b</MudSelectItem>
                    }
                </MudSelect>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Load">@L["Load"]</MudButton>
            </MudStack>
        </MudPaper>
    </MudExpansionPanel>
</MudExpansionPanels>

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
}
else if (_roots != null)
{
    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateAll" Disabled="@(!HasPendingUpdates)">@L["UpdateAll"]</MudButton>
        <MudSwitch T="bool" @bind-Value="_issuesOnly" Color="Color.Primary" Label="@L["IssuesOnly"]" />
    </MudStack>
    <MudPaper Class="work-item-container">
        <MudList T="WorkItemNode" Dense="true" Class="work-item-tree">
            @foreach (var epic in DisplayRoots)
            {
                <MudListItem T="WorkItemNode" Class="@InvalidClass(epic)">
                    <MudLink Href="@epic.Info.Url" Class="@WorkItemHelpers.GetItemClass(epic.Info.WorkItemType)" Target="_blank">
                        <b>@epic.Info.Title</b>
                    </MudLink> - @epic.Info.WorkItemType (@epic.Info.State)
                    @StatusIcon(epic) @SuggestedState(epic)
                    @if (epic.Children.Any())
                    {
                        <MudList T="WorkItemNode" Dense="true">
                            @foreach (var feature in epic.Children)
                            {
                                <MudListItem T="WorkItemNode" Class="@InvalidClass(feature)">
                                    <MudLink Href="@feature.Info.Url" Class="@WorkItemHelpers.GetItemClass(feature.Info.WorkItemType)" Target="_blank">
                                        <b>@feature.Info.Title</b>
                                    </MudLink> - @feature.Info.WorkItemType (@feature.Info.State)
                                    @StatusIcon(feature) @SuggestedState(feature)
                                    @if (feature.Children.Any())
                                    {
                                        <MudList T="WorkItemNode" Dense="true">
                                            @foreach (var item in feature.Children)
                                            {
                                                <MudListItem T="WorkItemNode" Class="@InvalidClass(item)">
                                                    <MudLink Href="@item.Info.Url" Class="@WorkItemHelpers.GetItemClass(item.Info.WorkItemType)" Target="_blank">@item.Info.Title</MudLink> - @item.Info.WorkItemType (@item.Info.State)
                                                    @SuggestedState(item)
                                                </MudListItem>
                                            }
                                        </MudList>
                                    }
                                </MudListItem>
                            }
                        </MudList>
                    }
                </MudListItem>
            }
        </MudList>
    </MudPaper>
}

@code {
    [Parameter] public string ProjectName { get; set; } = string.Empty;
    private string _path = string.Empty;
    private string[] _backlogs = [];
    private bool _loading;
    private List<WorkItemNode>? _roots;
    private string? _error;
    private bool _issuesOnly = true;
    private bool _filtersExpanded = true;
    private const string StateKey = "work-items";

    private IEnumerable<WorkItemNode> DisplayRoots =>
        _roots == null
            ? Enumerable.Empty<WorkItemNode>()
            : _issuesOnly
                ? _roots.Where(HasIssue)
                : _roots;

    protected override async Task OnInitializedAsync()
    {
        await ConfigService.LoadAsync();
        if (!string.IsNullOrWhiteSpace(ProjectName) &&
            ConfigService.CurrentProject.Name != ProjectName)
        {
            await ConfigService.SelectProjectAsync(ProjectName);
        }
        try
        {
            _backlogs = await ApiService.GetBacklogsAsync();
            if (_backlogs.Length > 0)
                _path = _backlogs[0];

            var state = await StateService.LoadAsync<PageState>(StateKey);
            if (state != null)
            {
                if (!string.IsNullOrWhiteSpace(state.Path))
                    _path = state.Path;
                _issuesOnly = state.IssuesOnly;
            }
            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    private async Task Load()
    {
        _loading = true;
        StateHasChanged();
        try
        {
            _roots = await ApiService.GetWorkItemHierarchyAsync(_path);
            await StateService.SaveAsync(StateKey, new PageState
            {
                Path = _path,
                IssuesOnly = _issuesOnly
            });
            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }


    private RenderFragment StatusIcon(WorkItemNode node)
    {
        return builder =>
        {
            if (!node.StatusValid)
            {
                builder.OpenComponent<MudTooltip>(0);
                builder.AddAttribute(1, "Text",
                    L["ExpectedState", node.ExpectedState]);
                builder.AddAttribute(2, "ChildContent",
                    (RenderFragment)(b =>
                    {
                        b.OpenComponent<MudIcon>(0);
                        b.AddAttribute(1, "Color", Color.Warning);
                        b.AddAttribute(2, "Icon", Icons.Material.Filled.Warning);
                        b.CloseComponent();
                    }));
                builder.CloseComponent();
            }
        };
    }

    private RenderFragment SuggestedState(WorkItemNode node)
    {
        return builder =>
        {
            if (!node.StatusValid)
            {
                builder.OpenElement(0, "span");
                builder.AddAttribute(1, "style", "margin-left:0.25rem;color:var(--mud-palette-text-secondary,#6c757d);");
                builder.AddContent(2, L["Suggested", node.ExpectedState]);
                builder.CloseElement();
                builder.AddMarkupContent(3, "&nbsp;");
                builder.OpenComponent<MudButton>(4);
                builder.AddAttribute(5, "Variant", Variant.Filled);
                builder.AddAttribute(6, "Size", Size.Small);
                builder.AddAttribute(6, "Color", Color.Primary);
                builder.AddAttribute(7, "OnClick", EventCallback.Factory.Create<MouseEventArgs>(this, () => UpdateState(node)));
                builder.AddAttribute(8, "ChildContent", (RenderFragment)(b => b.AddContent(0, L["Update"])));
                builder.CloseComponent();
            }
        };
    }

    private async Task UpdateState(WorkItemNode node)
    {
        try
        {
            await ApiService.UpdateWorkItemStateAsync(node.Info.Id, node.ExpectedState);
            node.Info.State = node.ExpectedState;
            node.StatusValid = true;

            var root = FindRoot(node);
            if (root != null)
                WorkItemHelpers.ComputeStatus(root);
            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        StateHasChanged();
    }

    private async Task UpdateAll()
    {
        if (_roots == null)
            return;

        _loading = true;
        StateHasChanged();

        try
        {
            foreach (var node in EnumerateNodes(_roots).Where(n => !n.StatusValid))
                await ApiService.UpdateWorkItemStateAsync(node.Info.Id, node.ExpectedState);

            await Load();
            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
            _loading = false;
        }
    }

    private bool HasPendingUpdates => _roots != null && EnumerateNodes(_roots).Any(n => !n.StatusValid);

    private static string? InvalidClass(WorkItemNode node)
    {
        return node.StatusValid ? null : "work-item-invalid-state";
    }

    private static IEnumerable<WorkItemNode> EnumerateNodes(IEnumerable<WorkItemNode> nodes)
    {
        foreach (var node in nodes)
        {
            yield return node;
            foreach (var child in EnumerateNodes(node))
                yield return child;
        }
    }

    private static IEnumerable<WorkItemNode> EnumerateNodes(WorkItemNode node)
    {
        yield return node;
        foreach (var child in node.Children)
            foreach (var c in EnumerateNodes(child))
                yield return c;
    }

    private static bool HasIssue(WorkItemNode node)
    {
        if (!node.StatusValid)
            return true;
        foreach (var child in node.Children)
            if (HasIssue(child))
                return true;
        return false;
    }

    private WorkItemNode? FindRoot(WorkItemNode node)
    {
        if (_roots == null)
            return null;

        foreach (var r in _roots)
        {
            if (Contains(r, node.Info.Id))
                return r;
        }

        return null;
    }

    private static bool Contains(WorkItemNode parent, int id)
    {
        if (parent.Info.Id == id)
            return true;
        foreach (var child in parent.Children)
        {
            if (Contains(child, id))
                return true;
        }

        return false;
    }


    private class PageState
    {
        public string Path { get; set; } = string.Empty;
        public bool IssuesOnly { get; set; }
    }

    protected override Task OnProjectChangedAsync()
    {
        return OnInitializedAsync();
    }

}
