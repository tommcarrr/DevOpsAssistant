@page "/story-review"
@using System.Text
@using System.Text.Json
@using DevOpsAssistant.Services
@inject DevOpsApiService ApiService
@inject DevOpsConfigService ConfigService
@inject IJSRuntime JS
@inject PageStateService StateService

<PageTitle>DevOpsAssistant - Story Quality</PageTitle>

<MudAlert Severity="Severity.Info" Class="mb-4">
    Select a backlog and states then click <b>Generate</b> to build a prompt for reviewing user stories.
</MudAlert>
@if (!string.IsNullOrWhiteSpace(_error))
{
    <MudAlert Severity="Severity.Error" Class="mb-4">@_error</MudAlert>
}

<MudPaper Class="p-4 mb-4">
    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.End" Wrap="Wrap.Wrap">
        <MudSelect T="string" @bind-Value="_path" Label="Backlog">
            @foreach (var b in _backlogs)
            {
                <MudSelectItem Value="@b">@b</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="string" MultiSelection="true" SelectedValues="SelectedStates" SelectedValuesChanged="@(vals => OnStatesChanged(vals))" Label="States">
            @foreach (var s in _states)
            {
                <MudSelectItem Value="@s">@s</MudSelectItem>
            }
        </MudSelect>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Generate">Generate</MudButton>
        <MudButton Variant="Variant.Outlined" OnClick="Reset">Reset</MudButton>
    </MudStack>
</MudPaper>

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
}
else if (!string.IsNullOrWhiteSpace(_prompt))
{
    <MudPaper Class="pa-2">
        <MudStack Spacing="2">
            <MudTextField T="string" Text="@_prompt" Lines="10" ReadOnly="true" Class="w-100"/>
            <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.ContentCopy" OnClick="CopyPrompt">
                Copy
            </MudButton>
        </MudStack>
    </MudPaper>
}

@code {
    private string _path = string.Empty;
    private string[] _backlogs = [];
    private string[] _states = [];
    private HashSet<string> SelectedStates { get; set; } = new();
    private bool _loading;
    private string? _prompt;
    private string? _error;
    private const string StateKey = "story-review";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _backlogs = await ApiService.GetBacklogsAsync();
            if (_backlogs.Length > 0)
                _path = _backlogs[0];
            var state = await StateService.LoadAsync<PageState>(StateKey);
            if (state != null && !string.IsNullOrWhiteSpace(state.Path))
                _path = state.Path;

            _states = await ApiService.GetStatesAsync();
            var extras = ConfigService.Config.DefaultStates?.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries) ?? Array.Empty<string>();
            SelectedStates = _states
                .Where(s => s.Equals("New", StringComparison.OrdinalIgnoreCase) ||
                            s.Equals("Active", StringComparison.OrdinalIgnoreCase) ||
                            extras.Any(e => s.Equals(e, StringComparison.OrdinalIgnoreCase)))
                .ToHashSet();
            if (state?.States != null)
                SelectedStates = state.States.ToHashSet();
            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    private async Task Generate()
    {
        _loading = true;
        StateHasChanged();
        try
        {
            var items = await ApiService.GetStoriesAsync(_path, SelectedStates);
            _prompt = BuildPrompt(items, ConfigService.Config.DefinitionOfReady);
            await StateService.SaveAsync(StateKey, new PageState
            {
                Path = _path,
                States = SelectedStates.ToArray()
            });
            _error = null;
            await CopyPrompt();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task CopyPrompt()
    {
        if (!string.IsNullOrWhiteSpace(_prompt))
            await JS.InvokeVoidAsync("copyText", _prompt);
    }

    private async Task Reset()
    {
        if (_backlogs.Length > 0)
            _path = _backlogs[0];
        var extras = ConfigService.Config.DefaultStates?.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries) ?? Array.Empty<string>();
        SelectedStates = _states
            .Where(s => s.Equals("New", StringComparison.OrdinalIgnoreCase) ||
                        s.Equals("Active", StringComparison.OrdinalIgnoreCase) ||
                        extras.Any(e => s.Equals(e, StringComparison.OrdinalIgnoreCase)))
            .ToHashSet();
        _prompt = null;
        await StateService.ClearAsync(StateKey);
        StateHasChanged();
    }

    private Task OnStatesChanged(IEnumerable<string> values)
    {
        SelectedStates = new HashSet<string>(values);
        return Task.CompletedTask;
    }

    private static string BuildPrompt(IEnumerable<StoryHierarchyDetails> details, string dor)
    {
        var items = details.Select(d => new
        {
            Epic = d.Epic == null
                ? null
                : new
                {
                    d.Epic.Title,
                    Description = TextHelpers.Sanitize(d.EpicDescription)
                },
            Feature = d.Feature == null
                ? null
                : new
                {
                    d.Feature.Title,
                    Description = TextHelpers.Sanitize(d.FeatureDescription)
                },
            Story = new { d.Story.Id, d.Story.Title, Description = TextHelpers.Sanitize(d.Description) }
        });
        var json = JsonSerializer.Serialize(items, new JsonSerializerOptions { WriteIndented = true });
        var sb = new StringBuilder();
        sb.AppendLine("You are an Agile coach. Review the following user stories for adherence to the INVEST principles (Independent, Negotiable, Valuable, Estimable, Small, Testable). For each story, provide a clear evaluation of which principles are met or not met, and include actionable coaching suggestions to improve any that are lacking. Be precise and constructive. Give feedback for all the stories");
        if (!string.IsNullOrWhiteSpace(dor))
        {
            sb.AppendLine();
            sb.AppendLine("Also confirm each story meets this Definition of Ready:");
            sb.AppendLine(dor);
        }
        sb.AppendLine();
        sb.AppendLine("Work items:");
        sb.AppendLine(json);
        return sb.ToString();
    }

    private class PageState
    {
        public string Path { get; set; } = string.Empty;
        public string[]? States { get; set; }
    }
}
