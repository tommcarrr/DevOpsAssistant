@page "/projects/{ProjectName}/work-item-viewer"
@using DevOpsAssistant.Services.Models
@using System.Linq
@inject DevOpsApiService ApiService
@inject PageStateService StateService
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<WorkItemViewer> L
@inherits ProjectComponentBase

<PageTitle>@L["PageTitle"]</PageTitle>

@if (!string.IsNullOrWhiteSpace(_error))
{
    <MudAlert Severity="Severity.Error">@_error</MudAlert>
}

<WorkItemSelector Expanded="@_filtersExpanded" ExpandedChanged="@(v => _filtersExpanded = v)" UseIteration="true" SelectedChanged="OnPendingItemsSelected" />
@if (_filtersExpanded)
{
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ConfirmSelection" Disabled="@(!_pendingItems.Any())">@L["Confirm"]</MudButton>
}

<MudGrid Class="mt-4">
    <MudItem xs="12" md="4" lg="3">
        <MudPaper Class="pa-2" Style="height:80vh; overflow:auto;">
            <MudText Typo="Typo.h6">@L["SelectedItems"]</MudText>
            <MudList T="WorkItemInfo" Dense="true">
                @foreach (var item in _selectedItems)
                {
                    <MudListItem T="WorkItemInfo"
                                 Class="@($"cursor-pointer {WorkItemHelpers.GetItemClass(item.WorkItemType)}")"
                                 OnClick="() => LoadDetails(item.Id)">
                        @item.Id - @item.Title
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" md="8" lg="9">
        <MudPaper Class="pa-2" Style="height:80vh; overflow:auto;">
            @if (_loading)
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            }
            else if (_details != null)
            {
                if (string.Equals(_details.Story.WorkItemType, "Bug", StringComparison.OrdinalIgnoreCase))
                {
                    <BugView Details="_details" />
                }
                else
                {
                    <StoryView Details="_details" />
                }
            }
            else
            {
                <MudText>@L["SelectItemPrompt"]</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter] public string ProjectName { get; set; } = string.Empty;

    private readonly HashSet<WorkItemInfo> _selectedItems = [];
    private IReadOnlyCollection<WorkItemInfo> _pendingItems = Array.Empty<WorkItemInfo>();
    private bool _loading;
    private bool _filtersExpanded = true;
    private StoryHierarchyDetails? _details;
    private string? _error;

    protected override async Task OnInitializedAsync()
    {
        await ConfigService.LoadAsync();
        if (!string.IsNullOrWhiteSpace(ProjectName) && ConfigService.CurrentProject.Name != ProjectName)
        {
            await ConfigService.SelectProjectAsync(ProjectName);
        }
    }

    private Task OnPendingItemsSelected(IReadOnlyCollection<WorkItemInfo> items)
    {
        _pendingItems = items;
        return Task.CompletedTask;
    }

    private Task ConfirmSelection()
    {
        _selectedItems.Clear();
        foreach (var i in _pendingItems)
            _selectedItems.Add(i);
        var first = _selectedItems.FirstOrDefault();
        if (first != null)
            _ = LoadDetails(first.Id);
        _filtersExpanded = false;
        return Task.CompletedTask;
    }


    private async Task LoadDetails(int id)
    {
        _loading = true;
        _details = null;
        StateHasChanged();
        try
        {
            var result = await ApiService.GetStoryHierarchyDetailsAsync(new[] { id });
            _details = result.FirstOrDefault();
            if (_details != null)
                _details.Comments = await ApiService.GetCommentsAsync(id);
            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
        StateHasChanged();
    }

    protected override Task OnProjectChangedAsync()
    {
        return OnInitializedAsync();
    }
}
