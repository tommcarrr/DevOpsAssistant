@page "/projects/{ProjectName}/work-item-quality"
@using System.Text
@using System.Text.Json
@using DevOpsAssistant.Services
@using DevOpsAssistant.Services.Models
@using DevOpsAssistant.Utils
@inject DevOpsApiService ApiService
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<WorkItemQuality> L
@inherits ProjectComponentBase

<PageTitle>DevOpsAssistant - Work Item Quality</PageTitle>

@if (!string.IsNullOrWhiteSpace(_error))
{
    <MudAlert Severity="Severity.Error">@_error</MudAlert>
}

<WorkItemSelector Expanded="@_filtersExpanded" ExpandedChanged="@(v => _filtersExpanded = v)" UseIteration="true" SelectedChanged="OnWorkItemsSelected" StateKey="StateKey" />
<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="!_selectedItems.Any()" OnClick="Generate">Generate Prompt</MudButton>

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
}
else if (_promptParts != null)
{
    <MudPaper Class="pa-6">
        <MudStack Spacing="2">
            <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Download" OnClick="DownloadPrompt">Download</MudButton>
            <MudTextField T="string" Text="@_promptParts[_partIndex]" Lines="10" ReadOnly="true" />
            <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                <MudTooltip Text='@L["PrevPartTooltip"]'>
                    <MudIconButton Icon="@Icons.Material.Filled.ChevronLeft" Disabled="_partIndex == 0" OnClick="PrevPart" />
                </MudTooltip>
                <MudText Typo="Typo.body2">@($"Part {_partIndex + 1}/{_promptParts.Count}")</MudText>
                <MudTooltip Text='@L["NextPartTooltip"]'>
                    <MudIconButton Icon="@Icons.Material.Filled.ChevronRight" Disabled="_partIndex == _promptParts.Count - 1" OnClick="NextPart" />
                </MudTooltip>
                <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.ContentCopy" OnClick="() => CopyPart(_promptParts[_partIndex])">Copy</MudButton>
            </MudStack>
        </MudStack>
    </MudPaper>
}

@code {
    [Parameter] public string ProjectName { get; set; } = string.Empty;
    private readonly HashSet<WorkItemInfo> _selectedItems = [];
    private bool _loading;
    private string? _prompt;
    private List<string>? _promptParts;
    private int _partIndex;
    private string? _error;
    private bool _filtersExpanded = true;
    private const string StateKey = "work-item-quality";

    protected override async Task OnInitializedAsync()
    {
        await ConfigService.LoadAsync();
        if (!string.IsNullOrWhiteSpace(ProjectName) &&
            ConfigService.CurrentProject.Name != ProjectName)
        {
            await ConfigService.SelectProjectAsync(ProjectName);
        }
        try
        {
            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    private async Task Generate()
    {
        _filtersExpanded = false;
        _loading = true;
        StateHasChanged();
        try
        {
            var details = await ApiService.GetStoryHierarchyDetailsAsync(_selectedItems.Select(i => i.Id));
            _prompt = BuildPrompt(details, ConfigService.Config);
            _promptParts = PromptHelpers.SplitPrompt(_prompt, ConfigService.Config.PromptCharacterLimit).ToList();
            _partIndex = 0;
            _error = null;
            await CopyPrompt();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task CopyPrompt()
    {
        if (!string.IsNullOrWhiteSpace(_prompt))
        {
            await JS.InvokeVoidAsync("copyText", _prompt);
            Snackbar.Add(L["CopyToast"].Value, Severity.Success);
        }
    }

    private async Task CopyPart(string text)
    {
        await JS.InvokeVoidAsync("copyText", text);
        Snackbar.Add(L["CopyToast"].Value, Severity.Success);
    }

    private void PrevPart()
    {
        if (_partIndex > 0)
            _partIndex--;
    }

    private void NextPart()
    {
        if (_promptParts != null && _partIndex < _promptParts.Count - 1)
            _partIndex++;
    }

    private async Task DownloadPrompt()
    {
        if (!string.IsNullOrWhiteSpace(_prompt))
            await JS.InvokeVoidAsync("downloadText", "prompt.txt", _prompt);
    }


    private Task OnWorkItemsSelected(IReadOnlyCollection<WorkItemInfo> items)
    {
        _selectedItems.Clear();
        foreach (var i in items)
            _selectedItems.Add(i);
        return Task.CompletedTask;
    }

    private static string BuildPrompt(IEnumerable<StoryHierarchyDetails> details, DevOpsConfig config)
    {
        var items = details.Select(d => new
        {
            Epic = d.Epic == null
                ? null
                : new
                {
                    d.Epic.Title,
                    Description = TextHelpers.Sanitize(d.EpicDescription)
                },
            Feature = d.Feature == null
                ? null
                : new
                {
                    d.Feature.Title,
                    Description = TextHelpers.Sanitize(d.FeatureDescription)
                },
            Story = d.Story.WorkItemType.Equals("User Story", StringComparison.OrdinalIgnoreCase)
                ? new { d.Story.Id, d.Story.Title, Description = TextHelpers.Sanitize(d.Description) }
                : null,
            Bug = d.Story.WorkItemType.Equals("Bug", StringComparison.OrdinalIgnoreCase)
                ? new { d.Story.Id, d.Story.Title, Description = TextHelpers.Sanitize(d.Description), ReproSteps = TextHelpers.Sanitize(d.ReproSteps), SystemInfo = TextHelpers.Sanitize(d.SystemInfo) }
                : null
        });
        var json = JsonSerializer.Serialize(items, new JsonSerializerOptions { WriteIndented = true });
        var sb = new StringBuilder();
        if (string.IsNullOrWhiteSpace(config.StoryQualityPrompt) ||
            config.StoryQualityPromptMode == PromptMode.Append)
        {
            sb.AppendLine("You are an expert Agile coach reviewing user stories and bugs for quality.");
            sb.AppendLine();
            sb.AppendLine("For stories, assess adherence to the INVEST principles:");
        sb.AppendLine();
        sb.AppendLine("**Independent, Negotiable, Valuable, Estimable, Small, Testable**");
        sb.AppendLine();
        sb.AppendLine("Each story will be provided in JSON format with fields like `title`, `description`, and optionally `acceptanceCriteria`.");
        sb.AppendLine();
        sb.AppendLine("Generate a full report for every work item. Do not summarize or respond with only a limited sample.");
        sb.AppendLine();
        sb.AppendLine("---");
        sb.AppendLine();
        sb.AppendLine("For every story:");
        sb.AppendLine();
        sb.AppendLine("1. **Evaluate each INVEST principle** and determine whether it is Met or Not Met.");
        sb.AppendLine("2. Provide your reasoning in a **Markdown table** using pipe (`|`) delimiters and a header row.");
        sb.AppendLine("3. Display the **INVEST Score as X/6** at the end of the table.");
        sb.AppendLine();
        sb.AppendLine("---");
        sb.AppendLine();
        sb.AppendLine("### Coaching Guidelines");
        sb.AppendLine();
        sb.AppendLine("Tailor your coaching based on the score:");
        sb.AppendLine();
        sb.AppendLine("- **6/6**: No coaching needed.");
        sb.AppendLine("- **5/6**: Brief coaching (≤75 words) for the failing principle(s).");
        sb.AppendLine("- **3–4/6**: Coaching for each ❌ principle (≤150 words).");
        sb.AppendLine("- **0–2/6**: Full coaching response, including:");
        sb.AppendLine("  - A rewritten story that aligns with INVEST.");
        sb.AppendLine("  - Story **must reflect a real user or business goal**, not a technical task or internal role like \u201cdeveloper,\u201d \u201cengineer,\u201d or \u201csystem administrator.\u201d");
        sb.AppendLine("  - Valid examples include: \u201cAs a group admin\u2026\u201d, \u201cAs a learner\u2026\u201d, \u201cAs a reporting manager\u2026\u201d");
        sb.AppendLine("  - Provide acceptance criteria in **`Given / When / Then` format**, using testable, clear language.");
        sb.AppendLine("  - Use firm, measurable phrasing in acceptance criteria (e.g., \u201cis confirmed via audit\u201d, \u201cis verified with sample data\u201d).");
        sb.AppendLine("  - Coaching + rewrite + AC must be within **300 words**.");
        sb.AppendLine();
        sb.AppendLine("---");
        sb.AppendLine();
        sb.AppendLine("### Format your output in Markdown, using this structure:");
        sb.AppendLine();
        sb.AppendLine("**Story:** [Title here]");
        sb.AppendLine();
        sb.AppendLine("| INVEST Principle | Met? | Explanation |");
        sb.AppendLine("|------------------|------|-------------|");
        sb.AppendLine("| Independent      | ✅/❌ | ...         |");
        sb.AppendLine("| Negotiable       | ✅/❌ | ...         |");
        sb.AppendLine("| Valuable         | ✅/❌ | ...         |");
        sb.AppendLine("| Estimable        | ✅/❌ | ...         |");
        sb.AppendLine("| Small            | ✅/❌ | ...         |");
        sb.AppendLine("| Testable         | ✅/❌ | ...         |");
        sb.AppendLine();
        sb.AppendLine("**INVEST Score: X/6**");
        sb.AppendLine();
        sb.AppendLine("### Coaching Suggestions");
        sb.AppendLine("- **[Principle]**: [Advice]");
        sb.AppendLine();
        sb.AppendLine("### Rewritten Story (only if score ≤ 3/6)");
        sb.AppendLine("> [Rewrite using a non-technical user persona and clear outcome]");
        sb.AppendLine();
        sb.AppendLine("### Example Acceptance Criteria (Generic `Given / When / Then`)");
        sb.AppendLine("- **Given** a user enters valid login credentials,  ");
        sb.AppendLine("  **When** they submit the login form,  ");
        sb.AppendLine("  **Then** they are redirected to their dashboard.");
        sb.AppendLine();
        sb.AppendLine("- **Given** a user provides incorrect login details,  ");
        sb.AppendLine("  **When** they attempt to sign in,  ");
        sb.AppendLine("  **Then** an error message is displayed.");
        sb.AppendLine();
        sb.AppendLine("- **Given** the user submits the form with missing fields,  ");
        sb.AppendLine("  **When** validation is triggered,  ");
        sb.AppendLine("  **Then** relevant error messages guide them to complete the form.");
        sb.AppendLine();
        sb.AppendLine("- **Given** the user requests a password reset,  ");
        sb.AppendLine("  **When** they submit their email address,  ");
        sb.AppendLine("  **Then** a reset link is emailed and a confirmation message is shown.");
        sb.AppendLine();
        sb.AppendLine("---");
        sb.AppendLine();
        sb.AppendLine("For bugs, check that the reproduction steps and system information are clear and complete.");
        if (!string.IsNullOrWhiteSpace(config.DefinitionOfReady))
        {
            sb.AppendLine();
            sb.AppendLine("Also confirm each story meets this Definition of Ready:");
            sb.AppendLine(config.DefinitionOfReady);
        }
        }
        if (!string.IsNullOrWhiteSpace(config.StoryQualityPrompt))
        {
            sb.AppendLine(config.StoryQualityPrompt.Trim());
        }
        sb.AppendLine();
        sb.AppendLine("Work items:");
        sb.AppendLine(json);
        sb.AppendLine();
        if (config.OutputFormat == OutputFormat.Inline)
            sb.AppendLine("Reply inline with the analysis results.");
        else
            sb.AppendLine($"After completing the analysis, convert the output to {config.OutputFormat} format and include that version.");
        return sb.ToString();
    }


    protected override Task OnProjectChangedAsync()
    {
        return OnInitializedAsync();
    }
}
