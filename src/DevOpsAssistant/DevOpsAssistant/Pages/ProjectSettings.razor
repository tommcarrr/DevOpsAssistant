@page "/projects/{ProjectName}/settings"
@inject DevOpsConfigService ConfigService
@using DevOpsAssistant.Services.Models
@using DevOpsAssistant.Components
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<ProjectSettings> L
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Routing

<PageTitle>DevOpsAssistant - Settings</PageTitle>

<MudPaper Class="pa-6">
    <NavigationLock ConfirmExternalNavigation="true" OnBeforeInternalNavigation="ConfirmLeave" />
    <MudStack Spacing="3">
        <MudText Typo="Typo.h4">@L["ProjectSettings"] @ProjectName</MudText>
        <MudTabs @bind-ActivePanelIndex="_activeTab">
            <MudTabPanel Text='@L["GeneralTab"]'>
                <MudStack Spacing="2">
                    <MudTextField T="string" Value="_model.Project" ValueChanged="OnProjectChanged" Label='@L["Project"]' Immediate="true"/>
                    @if (string.IsNullOrWhiteSpace(ConfigService.GlobalOrganization))
                    {
                        <MudTextField T="string" Value="_model.Organization" ValueChanged="OnOrgChanged" Label="DevOps Organization" Immediate="true"/>
                        <MudCheckBox T="bool" Value="_useOrgAsGlobal" ValueChanged="OnUseOrgAsGlobalChanged" Label="Use as global organization" />
                    }
                    else
                    {
                        <MudCheckBox T="bool" Value="_overrideOrg" ValueChanged="OnOverrideOrgChanged" Label="Override global organization" />
                        @if (_overrideOrg)
                        {
                            <MudTextField T="string" Value="_model.Organization" ValueChanged="OnOrgChanged" Label="DevOps Organization" Immediate="true"/>
                        }
                    }
                    @if (string.IsNullOrWhiteSpace(ConfigService.GlobalPatToken))
                    {
                    <MudTextField T="string" Value="_model.PatToken" ValueChanged="OnPatChanged" Label='@L["PatToken"]' InputType="InputType.Password" HelperText="Leave blank to use global token" Immediate="true"/>
                        <MudCheckBox T="bool" Value="_useAsGlobal" ValueChanged="OnUseAsGlobalChanged" Label="Use as global token" />
                    }
                    else
                    {
                        <MudCheckBox T="bool" Value="_overridePat" ValueChanged="OnOverridePatChanged" Label="Override global token" />
                        @if (_overridePat)
                        {
                            <MudTextField T="string" Value="_model.PatToken" ValueChanged="OnPatChanged" Label="PAT Token" InputType="InputType.Password" Immediate="true"/>
                        }
                    }
                    <MudTextField @bind-Value="_model.MainBranch" Label='@L["MainBranch"]'/>
                    <MudStack Row="true" Spacing="1">
                        <MudButton OnClick="SaveGeneral" Variant="Variant.Filled" Color="Color.Primary" Disabled="!CanSave">@L["Save"]</MudButton>
                        <MudButton OnClick="Delete" Variant="Variant.Filled" Color="Color.Error">@L["DeleteProject"]</MudButton>
                    </MudStack>
                </MudStack>
            </MudTabPanel>
            <MudTabPanel Text='@L["StoryQualityTab"]'>
                <MudStack Spacing="2">
                    <MudTextField T="string" Value="_model.DefinitionOfReady" ValueChanged="OnQualityChanged" Label='@L["DefinitionOfReady"]' Lines="3"/>
                    <MudButton OnClick="SaveQuality" Variant="Variant.Filled" Color="Color.Primary" Disabled="!_qualityDirty">@L["Save"]</MudButton>
                </MudStack>
            </MudTabPanel>
            <MudTabPanel Text='@L["PromptsTab"]'>
                <MudStack Spacing="2">
                    <MudTextField T="string" Value="_model.StoryQualityPrompt" ValueChanged="v => OnPromptsChanged(() => _model.StoryQualityPrompt = v)" Label='@L["StoryQualityPrompt"]' Lines="3"/>
                    <MudTextField T="string" Value="_model.ReleaseNotesPrompt" ValueChanged="v => OnPromptsChanged(() => _model.ReleaseNotesPrompt = v)" Label='@L["ReleaseNotesPrompt"]' Lines="3"/>
                    <MudTextField T="string" Value="_model.RequirementsPrompt" ValueChanged="v => OnPromptsChanged(() => _model.RequirementsPrompt = v)" Label='@L["RequirementsPrompt"]' Lines="3"/>
                    <MudTextField T="int" Value="_model.PromptCharacterLimit" ValueChanged="OnPromptsLimitChanged" Label='@L["PromptLimit"]' InputType="InputType.Number" />
                    <MudCheckBox T="bool" @bind-Value="_promptsAll" Label='@L["SaveForAll"]' />
                    @if (_promptsAll)
                    {
                        <MudText Color="Color.Error" Typo="Typo.caption">@L["OverrideWarning"]</MudText>
                    }
                    <MudButton OnClick="SavePrompts" Variant="Variant.Filled" Color="Color.Primary" Disabled="!_promptsDirty">@L["Save"]</MudButton>
                </MudStack>
            </MudTabPanel>
            <MudTabPanel Text='@L["ValidationTab"]'>
                <MudStack Spacing="1">
                    <MudText Typo="Typo.h6">Epic</MudText>
                    <MudSwitch T="bool" @bind-Value="_model.Rules.Epic.HasDescription" Color="Color.Primary" Label="Has description"/>

                    <MudDivider/>

                    <MudText Typo="Typo.h6">Feature</MudText>
                    <MudSwitch T="bool" Value="_model.Rules.Feature.HasDescription" ValueChanged="v => OnValidationChanged(() => _model.Rules.Feature.HasDescription = v)" Color="Color.Primary" Label="Has description"/>
                    <MudSwitch T="bool" Value="_model.Rules.Feature.HasParent" ValueChanged="v => OnValidationChanged(() => _model.Rules.Feature.HasParent = v)" Color="Color.Primary" Label="Has parent"/>

                    <MudDivider/>

                    <MudText Typo="Typo.h6">User Story</MudText>
                    <MudSwitch T="bool" Value="_model.Rules.Story.HasDescription" ValueChanged="v => OnValidationChanged(() => _model.Rules.Story.HasDescription = v)" Color="Color.Primary" Label="Has description"/>
                    <MudSwitch T="bool" Value="_model.Rules.Story.HasParent" ValueChanged="v => OnValidationChanged(() => _model.Rules.Story.HasParent = v)" Color="Color.Primary" Label="Has parent"/>
                    <MudSwitch T="bool" Value="_model.Rules.Story.HasStoryPoints" ValueChanged="v => OnValidationChanged(() => _model.Rules.Story.HasStoryPoints = v)" Color="Color.Primary" Label="Has story points"/>
                    <MudSwitch T="bool" Value="_model.Rules.Story.HasAcceptanceCriteria" ValueChanged="v => OnValidationChanged(() => _model.Rules.Story.HasAcceptanceCriteria = v)" Color="Color.Primary" Label="Has acceptance criteria"/>
                    <MudSwitch T="bool" Value="_model.Rules.Story.HasAssignee" ValueChanged="v => OnValidationChanged(() => _model.Rules.Story.HasAssignee = v)" Color="Color.Primary" Label="Has assignee"/>

                    <MudDivider/>

                    <MudText Typo="Typo.h6">Bug</MudText>
                    <MudSwitch T="bool" Value="_model.Rules.Bug.IncludeReproSteps" ValueChanged="v => OnValidationChanged(() => _model.Rules.Bug.IncludeReproSteps = v)" Color="Color.Primary" Label="Include Repro Steps"/>
                    <MudSwitch T="bool" Value="_model.Rules.Bug.IncludeSystemInfo" ValueChanged="v => OnValidationChanged(() => _model.Rules.Bug.IncludeSystemInfo = v)" Color="Color.Primary" Label="Include System Info" />
                    <MudSwitch T="bool" Value="_model.Rules.Bug.HasStoryPoints" ValueChanged="v => OnValidationChanged(() => _model.Rules.Bug.HasStoryPoints = v)" Color="Color.Primary" Label='@L["BugHasStoryPoints"]' />
                    <MudCheckBox T="bool" @bind-Value="_validationAll" Label='@L["SaveForAll"]' />
                    @if (_validationAll)
                    {
                        <MudText Color="Color.Error" Typo="Typo.caption">@L["OverrideWarning"]</MudText>
                    }
                    <MudButton OnClick="SaveValidation" Variant="Variant.Filled" Color="Color.Primary" Disabled="!_validationDirty">@L["Save"]</MudButton>
                </MudStack>
            </MudTabPanel>
        </MudTabs>
        @if (_errors.Count > 0)
        {
            <MudAlert Severity="Severity.Error">
                @foreach (var e in _errors)
                {
                    <div>@e</div>
                }
            </MudAlert>
        }
    </MudStack>
</MudPaper>

@code {
    [Parameter] public string ProjectName { get; set; } = string.Empty;
    private DevOpsConfig _model = new();
    private List<string> _errors = new();
    private bool _overrideOrg;
    private bool _overridePat;
    private bool _useOrgAsGlobal;
    private bool _useAsGlobal;
    private bool _qualityDirty;
    private bool _promptsDirty;
    private bool _validationDirty;
    private bool _generalDirty;
    private bool _promptsAll;
    private bool _validationAll;
    private int _activeTab;

    private bool HasChanges => _generalDirty || _qualityDirty || _promptsDirty || _validationDirty;
    private bool CanSave => _errors.Count == 0;

    protected override async Task OnParametersSetAsync()
    {
        await ConfigService.LoadAsync();
        await ConfigService.SelectProjectAsync(ProjectName);
        var cfg = ConfigService.Config;
        _model = new DevOpsConfig
        {
            Organization = cfg.Organization,
            Project = cfg.Project,
            PatToken = cfg.PatToken,
            MainBranch = cfg.MainBranch,
            DefinitionOfReady = cfg.DefinitionOfReady,
            StoryQualityPrompt = cfg.StoryQualityPrompt,
            ReleaseNotesPrompt = cfg.ReleaseNotesPrompt,
            RequirementsPrompt = cfg.RequirementsPrompt,
            PromptCharacterLimit = cfg.PromptCharacterLimit,
            Rules = new ValidationRules
            {
                Epic = new EpicRules { HasDescription = cfg.Rules.Epic.HasDescription },
                Feature = new FeatureRules
                {
                    HasDescription = cfg.Rules.Feature.HasDescription,
                    HasParent = cfg.Rules.Feature.HasParent
                },
                Story = new StoryRules
                {
                    HasDescription = cfg.Rules.Story.HasDescription,
                    HasParent = cfg.Rules.Story.HasParent,
                    HasStoryPoints = cfg.Rules.Story.HasStoryPoints,
                    HasAcceptanceCriteria = cfg.Rules.Story.HasAcceptanceCriteria,
                    HasAssignee = cfg.Rules.Story.HasAssignee
                },
                Bug = new BugRules
                {
                    IncludeReproSteps = cfg.Rules.Bug.IncludeReproSteps,
                    IncludeSystemInfo = cfg.Rules.Bug.IncludeSystemInfo,
                    HasStoryPoints = cfg.Rules.Bug.HasStoryPoints
                }
            }
        };
        _overrideOrg = !string.IsNullOrWhiteSpace(_model.Organization) || string.IsNullOrWhiteSpace(ConfigService.GlobalOrganization);
        _overridePat = !string.IsNullOrWhiteSpace(_model.PatToken) || string.IsNullOrWhiteSpace(ConfigService.GlobalPatToken);
        _useOrgAsGlobal = string.IsNullOrWhiteSpace(ConfigService.GlobalOrganization);
        _useAsGlobal = string.IsNullOrWhiteSpace(ConfigService.GlobalPatToken);
        Validate();
    }

    private async Task SaveGeneral()
    {
        Validate();
        if (!CanSave)
            return;

        var toSave = new DevOpsConfig
        {
            Organization = _overrideOrg || string.IsNullOrWhiteSpace(ConfigService.GlobalOrganization) ? _model.Organization : string.Empty,
            Project = _model.Project,
            PatToken = _overridePat || string.IsNullOrWhiteSpace(ConfigService.GlobalPatToken) ? _model.PatToken : string.Empty,
            MainBranch = _model.MainBranch,
            DefinitionOfReady = _model.DefinitionOfReady,
            StoryQualityPrompt = _model.StoryQualityPrompt,
            ReleaseNotesPrompt = _model.ReleaseNotesPrompt,
            RequirementsPrompt = _model.RequirementsPrompt,
            PromptCharacterLimit = _model.PromptCharacterLimit,
            Rules = _model.Rules
        };
        var saved = await ConfigService.SaveCurrentAsync(_model.Project, toSave);
        if (!saved)
        {
            _errors = new List<string> { L["DuplicateName"] };
            return;
        }
        if (_useOrgAsGlobal && !string.IsNullOrWhiteSpace(_model.Organization))
            await ConfigService.SaveGlobalOrganizationAsync(_model.Organization);
        if (_useAsGlobal && !string.IsNullOrWhiteSpace(_model.PatToken))
            await ConfigService.SaveGlobalPatAsync(_model.PatToken);
        _generalDirty = false;
        Snackbar.Add(string.Format(L["SectionSaved"].Value, L["GeneralTab"].Value, _model.Project), Severity.Success);
    }

    private async Task SaveQuality()
    {
        var cfg = ConfigService.Config;
        cfg.DefinitionOfReady = _model.DefinitionOfReady;
        await ConfigService.SaveCurrentAsync(_model.Project, cfg);
        _qualityDirty = false;
        Snackbar.Add(string.Format(L["SectionSaved"].Value, L["StoryQualityTab"].Value, _model.Project), Severity.Success);
    }

    private async Task SavePrompts()
    {
        var cfg = ConfigService.Config;
        cfg.StoryQualityPrompt = _model.StoryQualityPrompt;
        cfg.ReleaseNotesPrompt = _model.ReleaseNotesPrompt;
        cfg.RequirementsPrompt = _model.RequirementsPrompt;
        cfg.PromptCharacterLimit = _model.PromptCharacterLimit;
        await ConfigService.SaveCurrentAsync(_model.Project, cfg);
        if (_promptsAll)
        {
            var parameters = new DialogParameters { ["Message"] = L["ConfirmOverrideAll"] };
            var dialog = await DialogService.ShowAsync<ConfirmDialog>(L["Confirm"], parameters);
            var result = await dialog.Result;
            if (result?.Canceled == false)
            {
                foreach (var p in ConfigService.Projects)
                {
                    if (p.Name == _model.Project) continue;
                    var pcfg = p.Config;
                    pcfg.StoryQualityPrompt = _model.StoryQualityPrompt;
                    pcfg.ReleaseNotesPrompt = _model.ReleaseNotesPrompt;
                    pcfg.RequirementsPrompt = _model.RequirementsPrompt;
                    pcfg.PromptCharacterLimit = _model.PromptCharacterLimit;
                    await ConfigService.UpdateProjectAsync(p.Name, p.Name, pcfg);
                }
            }
            else
            {
                return;
            }
        }
        _promptsDirty = false;
        Snackbar.Add(string.Format(L["SectionSaved"].Value, L["PromptsTab"].Value, _promptsAll ? L["AllProjects"].Value : _model.Project), Severity.Success);
    }

    private async Task SaveValidation()
    {
        var vcfg = ConfigService.Config;
        vcfg.Rules = _model.Rules;
        await ConfigService.SaveCurrentAsync(_model.Project, vcfg);
        if (_validationAll)
        {
            var parameters = new DialogParameters { ["Message"] = L["ConfirmOverrideAll"] };
            var dialog = await DialogService.ShowAsync<ConfirmDialog>(L["Confirm"], parameters);
            var result = await dialog.Result;
            if (result?.Canceled == false)
            {
                foreach (var p in ConfigService.Projects)
                {
                    if (p.Name == _model.Project) continue;
                    var vc = p.Config;
                    vc.Rules = _model.Rules;
                    await ConfigService.UpdateProjectAsync(p.Name, p.Name, vc);
                }
            }
            else
            {
                return;
            }
        }
        _validationDirty = false;
        Snackbar.Add(string.Format(L["SectionSaved"].Value, L["ValidationTab"].Value, _validationAll ? L["AllProjects"].Value : _model.Project), Severity.Success);
    }

    private async Task Delete()
    {
        var parameters = new DialogParameters { ["Message"] = $"{L["ConfirmDelete"].Value} {_model.Project}?" };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>(L["Confirm"], parameters);
        var result = await dialog.Result;
        if (result?.Canceled != false) return;
        await ConfigService.RemoveProjectAsync(_model.Project);
        if (ConfigService.Projects.Any())
            NavigationManager.NavigateTo("/projects", true);
        else
            NavigationManager.NavigateTo("/projects/new", true);
    }


    private Task OnOrgChanged(string value)
    {
        _model.Organization = value;
        Validate();
        _generalDirty = true;
        return Task.CompletedTask;
    }

    private Task OnProjectChanged(string value)
    {
        _model.Project = value;
        Validate();
        _generalDirty = true;
        return Task.CompletedTask;
    }

    private Task OnPatChanged(string value)
    {
        _model.PatToken = value;
        Validate();
        _generalDirty = true;
        return Task.CompletedTask;
    }

    private Task OnOverrideOrgChanged(bool value)
    {
        _overrideOrg = value;
        Validate();
        _generalDirty = true;
        return Task.CompletedTask;
    }

    private Task OnOverridePatChanged(bool value)
    {
        _overridePat = value;
        Validate();
        _generalDirty = true;
        return Task.CompletedTask;
    }

    private Task OnUseOrgAsGlobalChanged(bool value)
    {
        _useOrgAsGlobal = value;
        _generalDirty = true;
        return Task.CompletedTask;
    }

    private Task OnUseAsGlobalChanged(bool value)
    {
        _useAsGlobal = value;
        _generalDirty = true;
        return Task.CompletedTask;
    }

    private Task OnQualityChanged(string value)
    {
        _model.DefinitionOfReady = value;
        _qualityDirty = true;
        return Task.CompletedTask;
    }

    private Task OnPromptsChanged(Action update)
    {
        update();
        _promptsDirty = true;
        return Task.CompletedTask;
    }

    private Task OnPromptsLimitChanged(int value)
    {
        _model.PromptCharacterLimit = value;
        _promptsDirty = true;
        return Task.CompletedTask;
    }

    private Task OnValidationChanged(Action update)
    {
        update();
        _validationDirty = true;
        return Task.CompletedTask;
    }

    private async Task ConfirmLeave(LocationChangingContext context)
    {
        if (!HasChanges) return;
        var parameters = new DialogParameters { ["Message"] = L["LeaveWarning"] };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>(L["Confirm"], parameters);
        var result = await dialog.Result;
        if (result?.Canceled != false)
        {
            context.PreventNavigation();
        }
    }

    private void Validate()
    {
        _errors.Clear();
        if (string.IsNullOrWhiteSpace(_model.Project))
            _errors.Add(L["MissingProject"]);
        else if (!_model.Project.Equals(ConfigService.CurrentProject.Name, StringComparison.OrdinalIgnoreCase) &&
                 ConfigService.Projects.Any(p => p.Name.Equals(_model.Project, StringComparison.OrdinalIgnoreCase)))
            _errors.Add(L["DuplicateName"]);
        if ((_overrideOrg || string.IsNullOrWhiteSpace(ConfigService.GlobalOrganization)) &&
            string.IsNullOrWhiteSpace(_model.Organization))
            _errors.Add(L["MissingOrganization"]);
        if ((_overridePat || string.IsNullOrWhiteSpace(ConfigService.GlobalPatToken)) &&
            string.IsNullOrWhiteSpace(_model.PatToken))
            _errors.Add(L["MissingPat"]);
    }
}
