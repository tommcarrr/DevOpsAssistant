@page "/projects/{ProjectName}/settings"
@inject DevOpsConfigService ConfigService
@using DevOpsAssistant.Services.Models
@using DevOpsAssistant.Components
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SettingsDialog> L
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<PageTitle>DevOpsAssistant - Settings</PageTitle>

<MudPaper Class="p-4">
    <MudStack Spacing="2">
        <MudText Typo="Typo.h5">@L["ProjectSettings"] @ProjectName</MudText>
        <MudTextField T="string" Value="_projectName" ValueChanged="OnNameChanged" Label='@L["ProjectName"]' Immediate="true" />
        <MudTabs Class="mt-4">
            <MudTabPanel Text="General">
                <MudStack Spacing="2">
                    <MudTextField T="string" Value="_model.Organization" ValueChanged="OnOrgChanged" Label="DevOps Organization" Immediate="true"/>
                    <MudTextField T="string" Value="_model.Project" ValueChanged="OnProjectChanged" Label="DevOps Project" Immediate="true"/>
                    <MudTextField T="string" Value="_model.PatToken" ValueChanged="OnPatChanged" Label="PAT Token" InputType="InputType.Password" HelperText="Leave blank to use global token" Immediate="true"/>
                    <MudTextField @bind-Value="_model.MainBranch" Label="Main Branch"/>
                    <MudTextField @bind-Value="_model.DefaultStates" Label="Default States" HelperText="Comma separated"/>
                    <MudSwitch T="bool" @bind-Value="_model.DarkMode" Color="Color.Primary" Label="Dark Mode"/>
                    <MudSwitch T="bool" @bind-Value="_model.ReleaseNotesTreeView" Color="Color.Primary" Label="Release Notes Tree View"/>
                </MudStack>
            </MudTabPanel>
            <MudTabPanel Text="Story Quality">
                <MudStack Spacing="2">
                    <MudTextField @bind-Value="_model.DefinitionOfReady" Label="Definition of Ready" Lines="3"/>
                </MudStack>
            </MudTabPanel>
            <MudTabPanel Text='@L["PromptsTab"]'>
                <MudStack Spacing="2">
                    <MudTextField @bind-Value="_model.StoryQualityPrompt" Label='@L["StoryQualityPrompt"]' Lines="3"/>
                    <MudTextField @bind-Value="_model.ReleaseNotesPrompt" Label='@L["ReleaseNotesPrompt"]' Lines="3"/>
                    <MudTextField @bind-Value="_model.RequirementsPrompt" Label='@L["RequirementsPrompt"]' Lines="3"/>
                    <MudTextField @bind-Value="_model.PromptCharacterLimit" Label='@L["PromptLimit"]' InputType="InputType.Number" />
                </MudStack>
            </MudTabPanel>
            <MudTabPanel Text="Validation Rules">
                <MudStack Spacing="1">
                    <MudText Typo="Typo.h6" Class="mt-2">Epic</MudText>
                    <MudSwitch T="bool" @bind-Value="_model.Rules.Epic.HasDescription" Color="Color.Primary" Label="Has description"/>

                    <MudDivider Class="my-2"/>

                    <MudText Typo="Typo.h6" Class="mt-2">Feature</MudText>
                    <MudSwitch T="bool" @bind-Value="_model.Rules.Feature.HasDescription" Color="Color.Primary" Label="Has description"/>
                    <MudSwitch T="bool" @bind-Value="_model.Rules.Feature.HasParent" Color="Color.Primary" Label="Has parent"/>

                    <MudDivider Class="my-2"/>

                    <MudText Typo="Typo.h6" Class="mt-2">User Story</MudText>
                    <MudSwitch T="bool" @bind-Value="_model.Rules.Story.HasDescription" Color="Color.Primary" Label="Has description"/>
                    <MudSwitch T="bool" @bind-Value="_model.Rules.Story.HasParent" Color="Color.Primary" Label="Has parent"/>
                    <MudSwitch T="bool" @bind-Value="_model.Rules.Story.HasStoryPoints" Color="Color.Primary" Label="Has story points"/>
                    <MudSwitch T="bool" @bind-Value="_model.Rules.Story.HasAcceptanceCriteria" Color="Color.Primary" Label="Has acceptance criteria"/>
                    <MudSwitch T="bool" @bind-Value="_model.Rules.Story.HasAssignee" Color="Color.Primary" Label="Has assignee"/>

                    <MudDivider Class="my-2"/>

                    <MudText Typo="Typo.h6" Class="mt-2">Bug</MudText>
                    <MudSwitch T="bool" @bind-Value="_model.Rules.Bug.IncludeReproSteps" Color="Color.Primary" Label="Include Repro Steps"/>
                    <MudSwitch T="bool" @bind-Value="_model.Rules.Bug.IncludeSystemInfo" Color="Color.Primary" Label="Include System Info"/>
                    <MudSwitch T="bool" @bind-Value="_model.Rules.Bug.HasStoryPoints" Color="Color.Primary" Label='@L["BugHasStoryPoints"]'/>
                </MudStack>
            </MudTabPanel>
        </MudTabs>
        @if (_errors.Count > 0)
        {
            <MudAlert Severity="Severity.Error" Class="mb-2">
                @foreach (var e in _errors)
                {
                    <div>@e</div>
                }
            </MudAlert>
        }
        <MudStack Row="true" Spacing="1" Class="mt-2">
            <MudButton OnClick="Save" Color="Color.Primary" Disabled="!CanSave">Save</MudButton>
            <MudButton OnClick="Delete" Color="Color.Error">@L["DeleteProject"]</MudButton>
        </MudStack>
    </MudStack>
</MudPaper>

@code {
    [Parameter] public string ProjectName { get; set; } = string.Empty;
    private string _projectName = string.Empty;
    private DevOpsConfig _model = new();
    private List<string> _errors = new();

    private bool CanSave => _errors.Count == 0;

    protected override async Task OnParametersSetAsync()
    {
        await ConfigService.LoadAsync();
        await ConfigService.SelectProjectAsync(ProjectName);
        _projectName = ConfigService.CurrentProject.Name;
        var cfg = ConfigService.Config;
        _model = new DevOpsConfig
        {
            Organization = cfg.Organization,
            Project = cfg.Project,
            PatToken = cfg.PatToken,
            MainBranch = cfg.MainBranch,
            DefaultStates = cfg.DefaultStates,
            DarkMode = cfg.DarkMode,
            ReleaseNotesTreeView = cfg.ReleaseNotesTreeView,
            DefinitionOfReady = cfg.DefinitionOfReady,
            StoryQualityPrompt = cfg.StoryQualityPrompt,
            ReleaseNotesPrompt = cfg.ReleaseNotesPrompt,
            RequirementsPrompt = cfg.RequirementsPrompt,
            PromptCharacterLimit = cfg.PromptCharacterLimit,
            Rules = new ValidationRules
            {
                Epic = new EpicRules { HasDescription = cfg.Rules.Epic.HasDescription },
                Feature = new FeatureRules
                {
                    HasDescription = cfg.Rules.Feature.HasDescription,
                    HasParent = cfg.Rules.Feature.HasParent
                },
                Story = new StoryRules
                {
                    HasDescription = cfg.Rules.Story.HasDescription,
                    HasParent = cfg.Rules.Story.HasParent,
                    HasStoryPoints = cfg.Rules.Story.HasStoryPoints,
                    HasAcceptanceCriteria = cfg.Rules.Story.HasAcceptanceCriteria,
                    HasAssignee = cfg.Rules.Story.HasAssignee
                },
                Bug = new BugRules
                {
                    IncludeReproSteps = cfg.Rules.Bug.IncludeReproSteps,
                    IncludeSystemInfo = cfg.Rules.Bug.IncludeSystemInfo,
                    HasStoryPoints = cfg.Rules.Bug.HasStoryPoints
                }
            }
        };
        Validate();
    }

    private async Task Save()
    {
        Validate();
        if (!CanSave)
            return;

        var saved = await ConfigService.SaveCurrentAsync(_projectName, _model);
        if (!saved)
        {
            _errors = new List<string> { L["DuplicateName"] };
            return;
        }
        Snackbar.Add(L["SavedMessage"].Value, Severity.Success);
    }

    private async Task Delete()
    {
        var parameters = new DialogParameters { ["Message"] = $"{L["ConfirmDelete"].Value} {_projectName}?" };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>(L["Confirm"], parameters);
        var result = await dialog.Result;
        if (result?.Canceled != false) return;
        await ConfigService.RemoveProjectAsync(_projectName);
        if (ConfigService.Projects.Any())
            NavigationManager.NavigateTo("/projects", true);
        else
            NavigationManager.NavigateTo("/projects/new", true);
    }

    private Task OnNameChanged(string value)
    {
        _projectName = value;
        Validate();
        return Task.CompletedTask;
    }

    private Task OnOrgChanged(string value)
    {
        _model.Organization = value;
        Validate();
        return Task.CompletedTask;
    }

    private Task OnProjectChanged(string value)
    {
        _model.Project = value;
        Validate();
        return Task.CompletedTask;
    }

    private Task OnPatChanged(string value)
    {
        _model.PatToken = value;
        Validate();
        return Task.CompletedTask;
    }

    private void Validate()
    {
        _errors.Clear();
        if (string.IsNullOrWhiteSpace(_projectName))
            _errors.Add(L["MissingName"]);
        else if (!_projectName.Equals(ConfigService.CurrentProject.Name, StringComparison.OrdinalIgnoreCase) &&
                 ConfigService.Projects.Any(p => p.Name.Equals(_projectName, StringComparison.OrdinalIgnoreCase)))
            _errors.Add(L["DuplicateName"]);
        if (string.IsNullOrWhiteSpace(_model.Organization))
            _errors.Add(L["MissingOrganization"]);
        if (string.IsNullOrWhiteSpace(_model.Project))
            _errors.Add(L["MissingProject"]);
        if (string.IsNullOrWhiteSpace(_model.PatToken) && string.IsNullOrWhiteSpace(ConfigService.GlobalPatToken))
            _errors.Add(L["MissingPat"]);
    }
}
