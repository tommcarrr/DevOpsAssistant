@page "/"
@page "/projects/{ProjectName}"
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Home> L
@inject DevOpsAssistant.Services.DevOpsConfigService ConfigService
@inject NavigationManager NavigationManager

<PageTitle>DevOpsAssistant - Home</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudText Typo="Typo.h4" Class="mb-2">@L["Welcome"]</MudText>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.body1">
                @L["Description"]
            </MudText>
            <MudList T="string" Dense="true" Class="ms-4 mt-2">
                <MudListItem T="string">@L["Epics"]</MudListItem>
                <MudListItem T="string">@L["Validation"]</MudListItem>
                <MudListItem T="string">@L["ReleaseNotes"]</MudListItem>
                <MudListItem T="string">@L["Quality"]</MudListItem>
                <MudListItem T="string">@L["Metrics"]</MudListItem>
            </MudList>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter] public string? ProjectName { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await ConfigService.LoadAsync();
        if (!string.IsNullOrWhiteSpace(ProjectName) && ConfigService.CurrentProject.Name != ProjectName)
        {
            await ConfigService.SelectProjectAsync(ProjectName);
            NavigationManager.NavigateTo(NavigationManager.Uri.Replace($"/projects/{ProjectName}", "/"), forceLoad: true);
        }
    }
}
