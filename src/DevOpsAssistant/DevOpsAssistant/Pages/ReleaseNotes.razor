@page "/projects/{ProjectName}/release-notes"
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using DevOpsAssistant.Services
@using DevOpsAssistant.Services.Models
@using DevOpsAssistant.Utils
@using MudBlazor
@using GeneratedPrompts
@inject DevOpsApiService ApiService
@inject IJSRuntime JS
@inject PromptService PromptService
@inherits ProjectComponentBase
@inject ISnackbar Snackbar
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<ReleaseNotes> L

<PageTitle>DevOpsAssistant - Release Notes</PageTitle>

@if (!string.IsNullOrWhiteSpace(_error))
{
    <MudAlert Severity="Severity.Error">@_error</MudAlert>
}

<WorkItemSelector Expanded="@_filtersExpanded" ExpandedChanged="@(v => _filtersExpanded = v)" UseIteration="true" SelectedChanged="OnWorkItemsSelected" StateKey="StateKey" />
<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="_loading || !_selectedItems.Any()" OnClick="Generate">@L["GeneratePrompt"]</MudButton>
@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
}
else if (_promptParts != null)
{
    <MudPaper Class="pa-6">
        <MudStack Spacing="2">
            <MudButton Variant="Variant.Text"
                       StartIcon="@Icons.Material.Filled.Download"
                       OnClick="DownloadPrompt">
                @L["Download"]
            </MudButton>
            <MudTextField T="string"
                          Text="@_promptParts[_partIndex]"
                          Lines="10"
                          ReadOnly="true"
                          />
            <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                <MudTooltip Text='@L["PrevPartTooltip"]'>
                    <MudIconButton Icon="@Icons.Material.Filled.ChevronLeft"
                                   Disabled="_partIndex == 0"
                                   OnClick="PrevPart" />
                </MudTooltip>
                <MudText Typo="Typo.body2">@string.Format(L["PartFormat"], _partIndex + 1, _promptParts.Count)</MudText>
                <MudTooltip Text='@L["NextPartTooltip"]'>
                    <MudIconButton Icon="@Icons.Material.Filled.ChevronRight"
                                   Disabled="_partIndex == _promptParts.Count - 1"
                                   OnClick="NextPart" />
                </MudTooltip>
                <MudButton Variant="Variant.Text"
                           StartIcon="@Icons.Material.Filled.ContentCopy"
                           OnClick="() => CopyPart(_promptParts[_partIndex])">
                    @L["Copy"]
                </MudButton>
            </MudStack>
        </MudStack>
    </MudPaper>
}

@code {
    [Parameter] public string ProjectName { get; set; } = string.Empty;
    private readonly HashSet<WorkItemInfo> _selectedItems = [];
    private bool _loading;
    private string? _prompt;
    private List<string>? _promptParts;
    private int _partIndex;
    private string? _error;
    private bool _filtersExpanded = true;
    private const string StateKey = "release-notes";

    protected override async Task OnInitializedAsync()
    {
        await ConfigService.LoadAsync();
        if (!string.IsNullOrWhiteSpace(ProjectName) &&
            ConfigService.CurrentProject.Name != ProjectName)
        {
            await ConfigService.SelectProjectAsync(ProjectName);
        }
    }

    private async Task Generate()
    {
        if (_selectedItems.Count == 0) return;
        _filtersExpanded = false;
        _loading = true;
        StateHasChanged();
        try
        {
            var ids = _selectedItems.Select(s => s.Id);
            var details = await ApiService.GetStoryHierarchyDetailsAsync(ids);
            var json = BuildPromptData(details, ConfigService.Config);
            _prompt = PromptService.BuildReleaseNotesPrompt(json, ConfigService.Config);
            _promptParts = PromptHelpers.SplitPrompt(_prompt, ConfigService.Config.PromptCharacterLimit).ToList();
            _partIndex = 0;
            _error = null;
            await CopyPrompt();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }


    private async Task CopyPrompt()
    {
        if (!string.IsNullOrWhiteSpace(_prompt))
        {
            await JS.InvokeVoidAsync("copyText", _prompt);
            Snackbar.Add(L["CopyToast"].Value, Severity.Success);
        }
    }

    private async Task CopyPart(string text)
    {
        await JS.InvokeVoidAsync("copyText", text);
        Snackbar.Add(L["CopyToast"].Value, Severity.Success);
    }

    private void PrevPart()
    {
        if (_partIndex > 0)
            _partIndex--;
    }

    private void NextPart()
    {
        if (_promptParts != null && _partIndex < _promptParts.Count - 1)
            _partIndex++;
    }

    private async Task DownloadPrompt()
    {
        if (!string.IsNullOrWhiteSpace(_prompt))
            await JS.InvokeVoidAsync("downloadText", "prompt.txt", _prompt);
    }

    private static string BuildPromptData(IEnumerable<StoryHierarchyDetails> details, DevOpsConfig config)
    {
        var hierarchy = details.Select(d => new
        {
            Epic = d.Epic == null ? null : new { d.Epic.Id, d.Epic.Title, Description = TextHelpers.Sanitize(d.EpicDescription) },
            Feature = d.Feature == null ? null : new { d.Feature.Id, d.Feature.Title, Description = TextHelpers.Sanitize(d.FeatureDescription) },
            Item = new
            {
                d.Story.Id,
                d.Story.Title,
                d.Story.WorkItemType,
                Description = TextHelpers.Sanitize(d.Description),
                ReproSteps = config.Rules.Bug.IncludeReproSteps ? TextHelpers.Sanitize(d.ReproSteps) : null,
                SystemInfo = config.Rules.Bug.IncludeSystemInfo ? TextHelpers.Sanitize(d.SystemInfo) : null,
                AcceptanceCriteria = TextHelpers.Sanitize(d.AcceptanceCriteria)
            }
        });
        return JsonSerializer.Serialize(hierarchy, new JsonSerializerOptions { WriteIndented = true, DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull });
    }



    private Task OnWorkItemsSelected(IReadOnlyCollection<WorkItemInfo> items)
    {
        _selectedItems.Clear();
        foreach (var i in items)
            _selectedItems.Add(i);
        return Task.CompletedTask;
    }



    protected override Task OnProjectChangedAsync()
    {
        return OnInitializedAsync();
    }

}
