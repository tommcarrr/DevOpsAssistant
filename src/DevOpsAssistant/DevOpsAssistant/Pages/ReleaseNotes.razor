@page "/release-notes"
@using System.Net
@using System.Text
@using System.Text.Json
@using System.Text.RegularExpressions
@inject DevOpsApiService ApiService
@inject IJSRuntime JS

<PageTitle>Release Notes Prompt</PageTitle>

<MudAlert Severity="Severity.Info" Class="mb-4">
    Search and select user stories, then click <b>Generate</b> to build a
    prompt summarizing them for release notes. Use the copy button to
    copy the generated text to the clipboard.
</MudAlert>

<MudPaper Class="p-4 mb-4">
    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.End" Wrap="Wrap.Wrap">
        <MudAutocomplete T="WorkItemInfo"
                         Label="User Stories"
                         SearchFunc="SearchStories"
                         ToStringFunc="@(s => $"{s.Id} - {s.Title}")"
                         Value="_searchValue"
                         ValueChanged="OnStorySelected"/>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="_loading" OnClick="Generate">Generate Prompt</MudButton>
    </MudStack>
</MudPaper>

@if (_selectedStories.Any())
{
    <MudTable Items="_selectedStories" Dense="true" Class="mb-4">
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Title</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Error"
                               Size="Size.Small"
                               OnClick="() => Remove(context)"/>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
}
else if (!string.IsNullOrWhiteSpace(_prompt))
{
    <MudPaper Class="pa-2">
        <MudStack Spacing="2">
            <MudTextField T="string"
                          Text="@_prompt"
                          Lines="10"
                          ReadOnly="true"
                          Class="w-100"/>
            <MudButton Variant="Variant.Text"
                       StartIcon="@Icons.Material.Filled.ContentCopy"
                       OnClick="CopyPrompt">
                Copy
            </MudButton>
        </MudStack>
    </MudPaper>
}

@code {
    private readonly HashSet<WorkItemInfo> _selectedStories = [];
    private WorkItemInfo? _searchValue;
    private bool _loading;
    private string? _prompt;

    private Task<IEnumerable<WorkItemInfo>> SearchStories(string value, CancellationToken _)
    {
        if (string.IsNullOrWhiteSpace(value) || value.Length < 2)
            return Task.FromResult<IEnumerable<WorkItemInfo>>(Array.Empty<WorkItemInfo>());
        return ApiService.SearchUserStoriesAsync(value).ContinueWith(t => (IEnumerable<WorkItemInfo>)t.Result);
    }

    private void OnStorySelected(WorkItemInfo? item)
    {
        if (item != null)
            _selectedStories.Add(item);
        _searchValue = null;
        StateHasChanged();
    }

    private void Remove(WorkItemInfo story)
    {
        _selectedStories.Remove(story);
        StateHasChanged();
    }

    private async Task Generate()
    {
        if (_selectedStories.Count == 0) return;
        _loading = true;
        StateHasChanged();
        try
        {
            var ids = _selectedStories.Select(s => s.Id);
            var details = await ApiService.GetStoryHierarchyDetailsAsync(ids);
            _prompt = BuildPrompt(details);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task CopyPrompt()
    {
        if (!string.IsNullOrWhiteSpace(_prompt))
            await JS.InvokeVoidAsync("copyText", _prompt);
    }

    private static string BuildPrompt(IEnumerable<StoryHierarchyDetails> details)
    {
        var hierarchy = details.Select(d => new
        {
            Epic = d.Epic == null ? null : new { d.Epic.Id, d.Epic.Title },
            Feature = d.Feature == null ? null : new { d.Feature.Id, d.Feature.Title },
            Story = new { d.Story.Id, d.Story.Title, Description = Sanitize(d.Description) }
        });

        var json = JsonSerializer.Serialize(
            hierarchy,
            new JsonSerializerOptions { WriteIndented = true });

        var sb = new StringBuilder();

        sb.AppendLine("You are a highly meticulous Delivery Manager. Your task is to generate a structured Word document based on the following instructions. Before producing any output, you must reflect on each requirement and confirm how you will meet it. Do not proceed until you have done so.");
        sb.AppendLine();
        sb.AppendLine("Document Purpose:");
        sb.AppendLine("- Create a Word document that includes:");
        sb.AppendLine("  - Release Notes: Clear, plain-language summaries of software changes.");
        sb.AppendLine("  - Change Control Details: A high-level summary, list of stories, and potential risks.");
        sb.AppendLine();
        sb.AppendLine("Checklist of Requirements:");
        sb.AppendLine("1. Audience Awareness");
        sb.AppendLine("   - Write for a general audience, including non-technical stakeholders.");
        sb.AppendLine();
        sb.AppendLine("2. Release Notes Section");
        sb.AppendLine("   - Write a high-level summary of all stories in 1–2 paragraphs.");
        sb.AppendLine("   - Group stories under their respective Features and Epics.");
        sb.AppendLine("   - For each story:");
        sb.AppendLine("     - Write a new summary in plain, non-technical language.");
        sb.AppendLine("     - Do NOT copy or paraphrase the original description.");
        sb.AppendLine("     - Use the context of the Feature and Epic to explain the story’s purpose and value.");
        sb.AppendLine();
        sb.AppendLine("3. Change Control Section");
        sb.AppendLine("   - Write a high-level summary of all stories in 1–2 paragraphs.");
        sb.AppendLine("   - Include a list of all stories with their IDs and titles.");
        sb.AppendLine("   - Highlight any potential risks associated with the changes.");
        sb.AppendLine();
        sb.AppendLine("4. Formatting");
        sb.AppendLine("   - Use clear headings for each Epic, Feature, and Story.");
        sb.AppendLine("   - Use bullet points or paragraphs as appropriate for readability.");
        sb.AppendLine();
        sb.AppendLine("Reflection Step (Mandatory Before Output):");
        sb.AppendLine("- For each checklist item above, explain how you will fulfill it.");
        sb.AppendLine("- If any item is ambiguous or incomplete or requires further context, ask for clarification.");
        sb.AppendLine("- Only proceed once you have confirmed that all requirements are understood and feasible.");

        sb.AppendLine();
        sb.AppendLine("Work items:");

        sb.AppendLine(json);
        return sb.ToString();
    }

    private static string Sanitize(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return string.Empty;

        var text = WebUtility.HtmlDecode(input);
        text = Regex.Replace(text, "<.*?>", string.Empty);
        text = Regex.Replace(text, "\\s+", " ");
        return text.Trim();
    }

}