@page "/release-notes"
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using DevOpsAssistant.Services
@using MudBlazor
@inject DevOpsApiService ApiService
@inject IJSRuntime JS
@inject DevOpsConfigService ConfigService
@inject PageStateService StateService

<PageTitle>DevOpsAssistant - Release Notes</PageTitle>

<MudAlert Severity="Severity.Info" Class="mb-4">
    Search and select user stories, then click <b>Generate</b> to build a
    prompt summarizing them for release notes. Use the copy button to
    copy the generated text to the clipboard.
</MudAlert>
@if (!string.IsNullOrWhiteSpace(_error))
{
    <MudAlert Severity="Severity.Error" Class="mb-4">@_error</MudAlert>
}

<MudPaper Class="p-4 mb-4">
    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.End" Wrap="Wrap.Wrap">
        @if (ConfigService.Config.ReleaseNotesTreeView)
        {
            <MudSelect T="string" @bind-Value="_path" Label="Backlog">
                @foreach (var b in _backlogs)
                {
                    <MudSelectItem Value="@b">@b</MudSelectItem>
                }
            </MudSelect>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="_loading" OnClick="Load">Load</MudButton>
        }
        else
        {
            <MudAutocomplete T="WorkItemInfo"
                             Label="Work Items"
                             SearchFunc="SearchItems"
                             ToStringFunc="@(s => $"{s.Id} - {s.Title}")"
                             Value="_searchValue"
                             ValueChanged="OnItemSelected"/>
        }
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="_loading" OnClick="Generate">Generate Prompt</MudButton>
        <MudButton Variant="Variant.Outlined" OnClick="Reset">Reset</MudButton>
    </MudStack>
</MudPaper>

@if (ConfigService.Config.ReleaseNotesTreeView && _treeItems != null)
{
    <MudTreeView T="WorkItemNode"
                 Items="@_treeItems"
                 SelectionMode="SelectionMode.MultiSelection"
                 SelectedValues="@_selectedNodes"
                 SelectedValuesChanged="OnNodesSelected"
                 Style="max-height:300px; overflow:auto; width:100%;">
        <ItemTemplate>
            <MudTreeViewItem Items="@context.Children"
                             Value="@context.Value"
                             Text="@($"{context.Value!.Info.Id} - {context.Value!.Info.Title}")"
                             @bind-Expanded="@context.Expanded" />
        </ItemTemplate>
    </MudTreeView>
}

@if (_selectedItems.Any() && !ConfigService.Config.ReleaseNotesTreeView)
{
    <MudTable Items="_selectedItems" Dense="true" Class="mb-4">
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Title</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Error"
                               Size="Size.Small"
                               OnClick="() => Remove(context)"/>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
}
else if (!string.IsNullOrWhiteSpace(_prompt))
{
    <MudPaper Class="pa-2">
        <MudStack Spacing="2">
            <MudTextField T="string"
                          Text="@_prompt"
                          Lines="10"
                          ReadOnly="true"
                          Class="w-100"/>
            <MudButton Variant="Variant.Text"
                       StartIcon="@Icons.Material.Filled.ContentCopy"
                       OnClick="CopyPrompt">
                Copy
            </MudButton>
        </MudStack>
    </MudPaper>
}

@code {
    private readonly HashSet<WorkItemInfo> _selectedItems = [];
    private WorkItemInfo? _searchValue;
    private bool _loading;
    private string? _prompt;
    private string? _error;
    private string _path = string.Empty;
    private string[] _backlogs = [];
    private List<TreeItemData<WorkItemNode>>? _treeItems;
    private IReadOnlyCollection<WorkItemNode>? _selectedNodes;
    private const string StateKey = "release-notes";

    protected override async Task OnInitializedAsync()
    {
        if (ConfigService.Config.ReleaseNotesTreeView)
        {
            try
            {
                _backlogs = await ApiService.GetBacklogsAsync();
                if (_backlogs.Length > 0)
                    _path = _backlogs[0];

                var state = await StateService.LoadAsync<PageState>(StateKey);
                if (state != null && !string.IsNullOrWhiteSpace(state.Path))
                    _path = state.Path;
                _error = null;
            }
            catch (Exception ex)
            {
                _error = ex.Message;
            }
        }
    }

    private async Task Load()
    {
        _loading = true;
        StateHasChanged();
        try
        {
            var roots = await ApiService.GetWorkItemHierarchyAsync(_path);
            _treeItems = roots.Select(BuildTreeItem).ToList();
            await StateService.SaveAsync(StateKey, new PageState { Path = _path });
            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private Task OnNodesSelected(IReadOnlyCollection<WorkItemNode> nodes)
    {
        _selectedNodes = nodes;
        _selectedItems.Clear();
        foreach (var n in nodes)
            _selectedItems.Add(n.Info);
        return Task.CompletedTask;
    }

    private async Task<IEnumerable<WorkItemInfo>> SearchItems(string value, CancellationToken _)
    {
        if (string.IsNullOrWhiteSpace(value) || value.Length < 2)
            return Array.Empty<WorkItemInfo>();
        try
        {
            var result = await ApiService.SearchReleaseItemsAsync(value);
            _error = null;
            return result.Where(r => !_selectedItems.Contains(r));
        }
        catch (Exception ex)
        {
            _error = ex.Message;
            return Array.Empty<WorkItemInfo>();
        }
    }

    private void OnItemSelected(WorkItemInfo? item)
    {
        if (item != null)
            _selectedItems.Add(item);
        _searchValue = null;
        StateHasChanged();
    }

    private void Remove(WorkItemInfo story)
    {
        _selectedItems.Remove(story);
        StateHasChanged();
    }

    private async Task Generate()
    {
        if (_selectedItems.Count == 0) return;
        _loading = true;
        StateHasChanged();
        try
        {
            var ids = _selectedItems.Select(s => s.Id);
            var details = await ApiService.GetStoryHierarchyDetailsAsync(ids);
            _prompt = BuildPrompt(details, ConfigService.Config);
            _error = null;
            await CopyPrompt();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private static TreeItemData<WorkItemNode> BuildTreeItem(WorkItemNode node)
    {
        var item = new TreeItemData<WorkItemNode>
        {
            Value = node,
            Text = $"{node.Info.Id} - {node.Info.Title}"
        };
        if (node.Children.Count > 0)
            item.Children = node.Children.Select(BuildTreeItem).ToList();
        return item;
    }

    private async Task CopyPrompt()
    {
        if (!string.IsNullOrWhiteSpace(_prompt))
            await JS.InvokeVoidAsync("copyText", _prompt);
    }

    private async Task Reset()
    {
        if (ConfigService.Config.ReleaseNotesTreeView && _backlogs.Length > 0)
            _path = _backlogs[0];
        _selectedItems.Clear();
        _treeItems = null;
        _selectedNodes = null;
        _prompt = null;
        await StateService.ClearAsync(StateKey);
        StateHasChanged();
    }

    private class PageState
    {
        public string Path { get; set; } = string.Empty;
    }

    private static string BuildPrompt(IEnumerable<StoryHierarchyDetails> details, DevOpsConfig config)
    {
        var hierarchy = details.Select(d => new
        {
            Epic = d.Epic == null
                ? null
                : new
                {
                    d.Epic.Id,
                    d.Epic.Title,
                    Description = TextHelpers.Sanitize(d.EpicDescription)
                },
            Feature = d.Feature == null
                ? null
                : new
                {
                    d.Feature.Id,
                    d.Feature.Title,
                    Description = TextHelpers.Sanitize(d.FeatureDescription)
                },
            Item = new
            {
                d.Story.Id,
                d.Story.Title,
                d.Story.WorkItemType,
                Description = TextHelpers.Sanitize(d.Description),
                ReproSteps = config.Rules.Bug.IncludeReproSteps ? TextHelpers.Sanitize(d.ReproSteps) : null,
                SystemInfo = config.Rules.Bug.IncludeSystemInfo ? TextHelpers.Sanitize(d.SystemInfo) : null,
                AcceptanceCriteria = TextHelpers.Sanitize(d.AcceptanceCriteria)
            }
        });

        var json = JsonSerializer.Serialize(
            hierarchy,
            new JsonSerializerOptions
            {
                WriteIndented = true,
                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
            });

        var sb = new StringBuilder();

        sb.AppendLine("You are a highly meticulous Delivery Manager. Your task is to generate a structured Word document based on the following instructions. Before producing any output, you must reflect on each requirement and confirm how you will meet it. Do not proceed until you have done so.");
        sb.AppendLine();
        sb.AppendLine("Document Purpose:");
        sb.AppendLine("- Create a Word document that includes:");
        sb.AppendLine("  - Release Notes: Clear, plain-language summaries of software changes.");
        sb.AppendLine("  - Change Control Details: A high-level summary, list of stories, and potential risks.");
        sb.AppendLine("  - No branding is required.");
        sb.AppendLine();
        sb.AppendLine("Checklist of Requirements:");
        sb.AppendLine("1. Audience Awareness");
        sb.AppendLine("   - Write for a general audience, including non-technical stakeholders.");
        sb.AppendLine();
        sb.AppendLine("2. Release Notes Section");
        sb.AppendLine("   - Write a high-level summary of all stories in 1–2 paragraphs.");
        sb.AppendLine("   - Group stories under their respective Features and Epics.");
        sb.AppendLine("   - Bugs are also in scope and may not have a Feature.");
        sb.AppendLine("   - For each story:");
        sb.AppendLine("     - Write a new summary in plain, non-technical language.");
        sb.AppendLine("     - Do NOT copy or paraphrase the original description.");
        sb.AppendLine("     - Use the context of the Feature and Epic to explain the story’s purpose and value.");
        sb.AppendLine();
        sb.AppendLine("3. Change Control Section");
        sb.AppendLine("   - Write a high-level summary of all stories in 1–2 paragraphs.");
        sb.AppendLine("   - Include a list of all stories with their IDs and titles.");
        sb.AppendLine("   - Highlight any potential risks associated with the changes.");
        sb.AppendLine();
        sb.AppendLine("4. Formatting");
        sb.AppendLine("   - Use clear headings for each Epic, Feature, and Story.");
        sb.AppendLine("   - Use bullet points or paragraphs as appropriate for readability.");
        sb.AppendLine();
        sb.AppendLine("Reflection Step (Mandatory Before Output):");
        sb.AppendLine("- For each checklist item above, explain how you will fulfill it.");
        sb.AppendLine("- If any item is ambiguous or incomplete or requires further context, ask for clarification.");
        sb.AppendLine("- Only proceed once you have confirmed that all requirements are understood and feasible.");

        sb.AppendLine();
        sb.AppendLine("Work items:");

        sb.AppendLine(json);
        return sb.ToString();
    }

}