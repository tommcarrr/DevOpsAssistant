@page "/release-notes"
@using DevOpsAssistant.Services
@using Microsoft.JSInterop
@inject DevOpsApiService ApiService
@inject IJSRuntime JS

<PageTitle>Release Notes Prompt</PageTitle>

<MudPaper Class="p-4 mb-4">
    <MudAutocomplete T="WorkItemInfo"
                     Label="User Stories"
                     SearchFunc="SearchStories"
                     ToStringFunc="@(s => $"{s.Id} - {s.Title}")"
                     Value="_searchValue"
                     ValueChanged="OnStorySelected" />
    <MudButton Class="mt-2" Color="Color.Primary" Disabled="_loading" OnClick="Generate">Generate Prompt</MudButton>
</MudPaper>

@if (_selectedStories.Any())
{
    <MudTable Items="_selectedStories" Dense="true" Class="mb-4">
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Title</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Error"
                               Size="Size.Small"
                               OnClick="(() => Remove(context))" />
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (!string.IsNullOrWhiteSpace(_prompt))
{
    <MudPaper Class="pa-2">
        <MudStack Spacing="2">
            <MudText Class="white-space-pre-line">@_prompt</MudText>
            <MudButton Variant="Variant.Text"
                       StartIcon="@Icons.Material.Filled.ContentCopy"
                       OnClick="CopyPrompt">Copy</MudButton>
        </MudStack>
    </MudPaper>
}

@code {
    private HashSet<WorkItemInfo> _selectedStories = new();
    private WorkItemInfo? _searchValue;
    private bool _loading;
    private string? _prompt;

    private Task<IEnumerable<WorkItemInfo>> SearchStories(string value, CancellationToken _)
    {
        if (string.IsNullOrWhiteSpace(value) || value.Length < 2)
            return Task.FromResult<IEnumerable<WorkItemInfo>>(Array.Empty<WorkItemInfo>());
        return ApiService.SearchUserStoriesAsync(value).ContinueWith(t => (IEnumerable<WorkItemInfo>)t.Result);
    }

    private void OnStorySelected(WorkItemInfo? item)
    {
        if (item != null)
            _selectedStories.Add(item);
        _searchValue = null;
        StateHasChanged();
    }

    private void Remove(WorkItemInfo story)
    {
        _selectedStories.Remove(story);
        StateHasChanged();
    }

    private async Task Generate()
    {
        if (_selectedStories.Count == 0) return;
        _loading = true;
        StateHasChanged();
        try
        {
            var ids = _selectedStories.Select(s => s.Id);
            var details = await ApiService.GetStoryHierarchyDetailsAsync(ids);
            _prompt = BuildPrompt(details);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task CopyPrompt()
    {
        if (!string.IsNullOrWhiteSpace(_prompt))
            await JS.InvokeVoidAsync("copyText", _prompt);
    }

    private static string BuildPrompt(IEnumerable<StoryHierarchyDetails> details)
    {
        var sb = new System.Text.StringBuilder();
        sb.AppendLine("Create release notes and change control details for the following stories:");
        foreach (var item in details)
        {
            sb.AppendLine();
            sb.AppendLine($"Story {item.Story.Id}: {item.Story.Title}");
            if (!string.IsNullOrWhiteSpace(item.Description))
                sb.AppendLine(item.Description);
            if (item.Feature != null)
                sb.AppendLine($"Feature {item.Feature.Id}: {item.Feature.Title}");
            if (item.Epic != null)
                sb.AppendLine($"Epic {item.Epic.Id}: {item.Epic.Title}");
        }
        return sb.ToString();
    }
}
