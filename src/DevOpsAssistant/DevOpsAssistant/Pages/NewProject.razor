@page "/projects/new"
@layout SimpleLayout
@using DevOpsAssistant.Services
@using DevOpsAssistant.Components
@inject DevOpsConfigService ConfigService
@inject NavigationManager NavigationManager
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SettingsDialog> L
@inject IStringLocalizer<GlobalOptionsDialog> TL

<PageTitle>DevOpsAssistant - New Project</PageTitle>

<MudPaper Class="p-4">
    <MudStack Spacing="2">
        <MudText Typo="Typo.h5">@L["NewProject"]</MudText>
        <MudText Typo="Typo.body2" Class="mb-2">
            For help finding these values see the <MudLink Href="/help">help page</MudLink>.
        </MudText>
        <MudTextField T="string" Value="_name" ValueChanged="OnNameChanged" Label='@L["ProjectName"]' Immediate="true" />
        @if (string.IsNullOrWhiteSpace(ConfigService.GlobalOrganization))
        {
            <MudTextField T="string" Value="_organization" ValueChanged="OnOrgChanged" Label="DevOps Organization" Immediate="true" />
            <MudCheckBox T="bool" Value="_useOrgAsGlobal" ValueChanged="OnUseOrgAsGlobalChanged" Label="Use as global organization" />
        }
        else
        {
            <MudCheckBox T="bool" Value="_overrideOrg" ValueChanged="OnOverrideOrgChanged" Label="Override global organization" />
            @if (_overrideOrg)
            {
                <MudTextField T="string" Value="_organization" ValueChanged="OnOrgChanged" Label="DevOps Organization" Immediate="true" />
            }
        }
        <MudTextField T="string" Value="_project" ValueChanged="OnProjectChanged" Label="DevOps Project" Immediate="true" />
        @if (string.IsNullOrWhiteSpace(ConfigService.GlobalPatToken))
        {
            <MudTextField T="string" Value="_patToken" ValueChanged="OnPatChanged" Label="@TL["PatToken"]" InputType="InputType.Password" HelperText="Leave blank to use global token" Immediate="true" />
            <MudCheckBox T="bool" Value="_useAsGlobal" ValueChanged="OnUseAsGlobalChanged" Label="Use as global token" />
        }
        else
        {
            <MudCheckBox T="bool" Value="_overridePat" ValueChanged="OnOverridePatChanged" Label="Override global token" />
            @if (_overridePat)
            {
                <MudTextField T="string" Value="_patToken" ValueChanged="OnPatChanged" Label="@TL["PatToken"]" InputType="InputType.Password" Immediate="true" />
            }
        }
        @if (_errors.Count > 0)
        {
            <MudAlert Severity="Severity.Error">
                @foreach (var e in _errors)
                {
                    <div>@e</div>
                }
            </MudAlert>
        }
        <MudStack Row="true" Spacing="1">
            @if (ConfigService.Projects.Any())
            {
                <MudButton OnClick="Back" Color="Color.Secondary" Variant="Variant.Text">@L["Back"]</MudButton>
            }
            <MudButton OnClick="Create" Variant="Variant.Filled" Color="Color.Primary" Disabled="!CanCreate">@L["Create"]</MudButton>
        </MudStack>
    </MudStack>
</MudPaper>

@code {
    private string _name = string.Empty;
    private string _organization = string.Empty;
    private string _project = string.Empty;
    private string _patToken = string.Empty;
    private bool _overrideOrg;
    private bool _overridePat;
    private bool _useOrgAsGlobal;
    private bool _useAsGlobal;
    private List<string> _errors = new();

    private bool CanCreate => _errors.Count == 0;

    protected override async Task OnInitializedAsync()
    {
        await ConfigService.LoadAsync();
        _overrideOrg = string.IsNullOrWhiteSpace(ConfigService.GlobalOrganization);
        _overridePat = string.IsNullOrWhiteSpace(ConfigService.GlobalPatToken);
        _useOrgAsGlobal = _overrideOrg;
        _useAsGlobal = _overridePat;
        Validate();
    }

    private Task OnNameChanged(string value)
    {
        _name = value;
        Validate();
        return Task.CompletedTask;
    }

    private Task OnOrgChanged(string value)
    {
        _organization = value;
        Validate();
        return Task.CompletedTask;
    }

    private Task OnProjectChanged(string value)
    {
        _project = value;
        Validate();
        return Task.CompletedTask;
    }

    private Task OnPatChanged(string value)
    {
        _patToken = value;
        Validate();
        return Task.CompletedTask;
    }

    private Task OnOverrideOrgChanged(bool value)
    {
        _overrideOrg = value;
        Validate();
        return Task.CompletedTask;
    }

    private Task OnOverridePatChanged(bool value)
    {
        _overridePat = value;
        Validate();
        return Task.CompletedTask;
    }

    private Task OnUseOrgAsGlobalChanged(bool value)
    {
        _useOrgAsGlobal = value;
        return Task.CompletedTask;
    }

    private Task OnUseAsGlobalChanged(bool value)
    {
        _useAsGlobal = value;
        return Task.CompletedTask;
    }

    private void Validate()
    {
        _errors.Clear();
        if (string.IsNullOrWhiteSpace(_name))
            _errors.Add(L["MissingName"]);
        else if (ConfigService.Projects.Any(p => p.Name.Equals(_name, StringComparison.OrdinalIgnoreCase)))
            _errors.Add(L["DuplicateName"]);
        if ((_overrideOrg || string.IsNullOrWhiteSpace(ConfigService.GlobalOrganization)) &&
            string.IsNullOrWhiteSpace(_organization))
            _errors.Add(L["MissingOrganization"]);
        if (string.IsNullOrWhiteSpace(_project))
            _errors.Add(L["MissingProject"]);
        if ((_overridePat || string.IsNullOrWhiteSpace(ConfigService.GlobalPatToken)) &&
            string.IsNullOrWhiteSpace(_patToken))
            _errors.Add(L["MissingPat"]);
    }


    private async Task Create()
    {
        Validate();
        if (!CanCreate)
            return;

        var added = await ConfigService.AddProjectAsync(_name);
        if (!added)
        {
            _errors = new List<string> { L["DuplicateName"] };
            return;
        }
        await ConfigService.SaveAsync(new DevOpsConfig
        {
            Organization = _overrideOrg || string.IsNullOrWhiteSpace(ConfigService.GlobalOrganization) ? _organization : string.Empty,
            Project = _project,
            PatToken = _overridePat || string.IsNullOrWhiteSpace(ConfigService.GlobalPatToken) ? _patToken : string.Empty
        });
        if (_useOrgAsGlobal && !string.IsNullOrWhiteSpace(_organization))
        {
            await ConfigService.SaveGlobalOrganizationAsync(_organization);
        }
        if (_useAsGlobal && !string.IsNullOrWhiteSpace(_patToken))
        {
            await ConfigService.SaveGlobalPatAsync(_patToken);
        }
        NavigationManager.NavigateTo($"/projects/{_name}/settings", forceLoad: true);
    }

    private void Back()
    {
        NavigationManager.NavigateTo("/projects");
    }
}
