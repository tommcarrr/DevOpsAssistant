@page "/projects/new"
@layout SimpleLayout
@using DevOpsAssistant.Services
@using DevOpsAssistant.Components
@inject DevOpsConfigService ConfigService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SettingsDialog> L
@inject IStringLocalizer<GlobalOptionsDialog> TL
@inject IStringLocalizer<Help> HL
@inject IStringLocalizer<NewProject> NL

<PageTitle>@NL["PageTitle"]</PageTitle>

<MudPaper Class="p-4">
    <MudStack Spacing="2">
        <MudText Typo="Typo.h5">@L["NewProject"]</MudText>
        <MudText Typo="Typo.body2">
            @NL["HelpText"] <MudLink Class="cursor-pointer" OnClick="OpenHelpDialog">@HL["GuideLinkText"]</MudLink>.
        </MudText>
        @if (ConfigService.Projects.Any())
        {
            <MudCheckBox T="bool" Value="_cloneExisting" ValueChanged="OnCloneExistingChanged" Label='@L["CloneExisting"]' Color="Color.Primary" />
            @if (_cloneExisting)
            {
                <MudSelect T="string" Value="_cloneProjectName" ValueChanged="OnCloneProjectChanged" Label='@L["CloneSource"]'>
                    @foreach (var p in ConfigService.Projects)
                    {
                        <MudSelectItem T="string" Value="@p.Name">@p.Name</MudSelectItem>
                    }
                </MudSelect>
            }
        }
        @if (!_cloneExisting)
        {
            @if (string.IsNullOrWhiteSpace(ConfigService.GlobalOrganization))
            {
                <MudTextField T="string" Value="_organization" ValueChanged="OnOrgChanged" Label='@L["Organization"]' Immediate="true" autocomplete="off" />
                <MudCheckBox T="bool" Value="_useOrgAsGlobal" ValueChanged="OnUseOrgAsGlobalChanged" Label='@NL["UseAsGlobalOrganization"]' Color="Color.Primary" />
            }
            else
            {
                <MudCheckBox T="bool" Value="_overrideOrg" ValueChanged="OnOverrideOrgChanged" Label='@NL["OverrideGlobalOrganization"]' Color="Color.Primary" />
                @if (_overrideOrg)
                {
                    <MudTextField T="string" Value="_organization" ValueChanged="OnOrgChanged" Label='@L["Organization"]' Immediate="true" />
                }
            }
            @if (string.IsNullOrWhiteSpace(ConfigService.GlobalPatToken))
            {
                <MudTextField T="string" Value="_patToken" ValueChanged="OnPatChanged" Label="@TL["PatToken"]" InputType="InputType.Password" HelperText='@NL["PatTokenHelper"]' Immediate="true" autocomplete="off" />
                <MudCheckBox T="bool" Value="_useAsGlobal" ValueChanged="OnUseAsGlobalChanged" Label='@NL["UseAsGlobalToken"]' Color="Color.Primary" />
            }
            else
            {
                <MudCheckBox T="bool" Value="_overridePat" ValueChanged="OnOverridePatChanged" Label='@NL["OverrideGlobalToken"]' Color="Color.Primary" />
                @if (_overridePat)
                {
                    <MudTextField T="string" Value="_patToken" ValueChanged="OnPatChanged" Label="@TL["PatToken"]" InputType="InputType.Password" Immediate="true" autocomplete="off" />
                }
            }
        }
        <MudTextField T="string" Value="_project" ValueChanged="OnProjectChanged" Label='@L["Project"]' Immediate="true" autocomplete="off" />
        @if (_errors.Count > 0)
        {
            <MudAlert Severity="Severity.Error">
                @foreach (var e in _errors)
                {
                    <div>@e</div>
                }
            </MudAlert>
        }
        <MudStack Row="true" Spacing="1">
            @if (ConfigService.Projects.Any())
            {
                <MudButton OnClick="Back" Color="Color.Secondary" Variant="Variant.Text">@L["Back"]</MudButton>
            }
            <MudButton OnClick="Create" Variant="Variant.Filled" Color="Color.Primary" Disabled="!CanCreate">@L["Create"]</MudButton>
        </MudStack>
    </MudStack>
</MudPaper>

@code {
    private string _organization = string.Empty;
    private string _project = string.Empty;
    private string _patToken = string.Empty;
    private bool _overrideOrg;
    private bool _overridePat;
    private bool _useOrgAsGlobal;
    private bool _useAsGlobal;
    private bool _cloneExisting;
    private string _cloneProjectName = string.Empty;
    private List<string> _errors = new();

    private bool CanCreate => _errors.Count == 0;

    protected override async Task OnInitializedAsync()
    {
        await ConfigService.LoadAsync();
        _overrideOrg = string.IsNullOrWhiteSpace(ConfigService.GlobalOrganization);
        _overridePat = string.IsNullOrWhiteSpace(ConfigService.GlobalPatToken);
        _useOrgAsGlobal = _overrideOrg;
        _useAsGlobal = _overridePat;
        if (ConfigService.Projects.Any())
        {
            _cloneProjectName = ConfigService.Projects[0].Name;
        }
        Validate();
    }


    private Task OnOrgChanged(string value)
    {
        _organization = value;
        Validate();
        return Task.CompletedTask;
    }

    private Task OnProjectChanged(string value)
    {
        _project = value;
        Validate();
        return Task.CompletedTask;
    }

    private Task OnPatChanged(string value)
    {
        _patToken = value;
        Validate();
        return Task.CompletedTask;
    }

    private Task OnOverrideOrgChanged(bool value)
    {
        _overrideOrg = value;
        Validate();
        return Task.CompletedTask;
    }

    private Task OnOverridePatChanged(bool value)
    {
        _overridePat = value;
        Validate();
        return Task.CompletedTask;
    }

    private Task OnUseOrgAsGlobalChanged(bool value)
    {
        _useOrgAsGlobal = value;
        return Task.CompletedTask;
    }

    private Task OnUseAsGlobalChanged(bool value)
    {
        _useAsGlobal = value;
        return Task.CompletedTask;
    }

    private Task OnCloneProjectChanged(string value)
    {
        _cloneProjectName = value;
        Validate();
        return Task.CompletedTask;
    }

    private Task OnCloneExistingChanged(bool value)
    {
        _cloneExisting = value;
        Validate();
        return Task.CompletedTask;
    }

    private void Validate()
    {
        _errors.Clear();
        if (ConfigService.Projects.Any(p => p.Name.Equals(_project, StringComparison.OrdinalIgnoreCase)))
            _errors.Add(L["DuplicateName"]);
        if (string.IsNullOrWhiteSpace(_project))
            _errors.Add(L["MissingProject"]);
        if (!_cloneExisting)
        {
            if ((_overrideOrg || string.IsNullOrWhiteSpace(ConfigService.GlobalOrganization)) &&
                string.IsNullOrWhiteSpace(_organization))
                _errors.Add(L["MissingOrganization"]);
            if ((_overridePat || string.IsNullOrWhiteSpace(ConfigService.GlobalPatToken)) &&
                string.IsNullOrWhiteSpace(_patToken))
                _errors.Add(L["MissingPat"]);
        }
    }


    private async Task Create()
    {
        Validate();
        if (!CanCreate)
            return;

        DevOpsProject? source = null;
        if (_cloneExisting)
            source = ConfigService.Projects.FirstOrDefault(p => p.Name == _cloneProjectName);

        var added = await ConfigService.AddProjectAsync(_project, source);
        if (!added)
        {
            _errors = [ L["DuplicateName"] ];
            return;
        }

        if (!_cloneExisting)
        {
            await ConfigService.SaveAsync(new DevOpsConfig
            {
                Organization = _overrideOrg || string.IsNullOrWhiteSpace(ConfigService.GlobalOrganization) ? _organization : string.Empty,
                Project = _project,
                PatToken = _overridePat || string.IsNullOrWhiteSpace(ConfigService.GlobalPatToken) ? _patToken : string.Empty
            });
            if (_useOrgAsGlobal && !string.IsNullOrWhiteSpace(_organization))
                await ConfigService.SaveGlobalOrganizationAsync(_organization);
            if (_useAsGlobal && !string.IsNullOrWhiteSpace(_patToken))
                await ConfigService.SaveGlobalPatAsync(_patToken);
        }

        NavigationManager.NavigateTo($"/projects/{_project}/settings");
    }

    private void Back()
    {
        NavigationManager.NavigateTo("/projects");
    }

    private async Task OpenHelpDialog()
    {
        await DialogService.ShowAsync<HelpDialog>(HL["Heading"]);
    }
}
