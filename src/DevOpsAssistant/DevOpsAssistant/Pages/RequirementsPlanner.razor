@page "/requirements-planner"
@using System.Text.Json
@using MudBlazor
@using DevOpsAssistant.Services
@inject DevOpsApiService ApiService
@inject DevOpsConfigService ConfigService
@inject IJSRuntime JS

<PageTitle>DevOpsAssistant - Requirement Planner</PageTitle>

<MudAlert Severity="Severity.Info" Class="mb-4">
    Search a wiki page and generate a prompt to break requirements into Epics, Features and User Stories.
    Paste the LLM response below to import items and create them in a backlog.
</MudAlert>
@if (!string.IsNullOrWhiteSpace(_error))
{
    <MudAlert Severity="Severity.Error" Class="mb-4">@_error</MudAlert>
}

<MudStepper @ref="_stepper" Class="mb-4" ActionContent="@(_ => (RenderFragment)(builder => { }) )">
    <MudStep Title="Select Requirements">
        <MudStack Spacing="2">
            @if (_wikiItems != null)
            {
                <MudTreeView T="WikiPageNode" Items="@_wikiItems" SelectionMode="SelectionMode.MultiSelection" @bind-SelectedValues="_selectedPages" Style="max-height:300px; overflow:auto; width:100%;">
                    <ItemTemplate>
                        <MudTreeViewItem Items="@context.Children" Value="@context.Value" Text="@context.Text" @bind-Expanded="@context.Expanded" />
                    </ItemTemplate>
                </MudTreeView>
            }
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="_selectedPages == null || _selectedPages.Count == 0" OnClick="Generate">Generate Prompt</MudButton>
        </MudStack>
    </MudStep>
    <MudStep Title="Import Response" Disabled="@string.IsNullOrWhiteSpace(_prompt)">
        <MudStack Spacing="2">
            <MudTextField T="string" Text="@_prompt" Lines="10" ReadOnly="true" Class="w-100" />
            <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.ContentCopy" OnClick="CopyPrompt">Copy</MudButton>
            <MudTextField T="string" @bind-Value="_responseText" Lines="6" Label="LLM Response" Class="w-100" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ImportPlan">Import</MudButton>
        </MudStack>
    </MudStep>
    <MudStep Title="Create Work Items" Disabled="@(_plan == null)">
        @if (_plan != null)
        {
            @foreach (var epic in _plan.Epics)
            {
                <MudPaper Class="pa-2 mb-2">
                    <MudText Typo="Typo.h6" Class="@WorkItemHelpers.GetItemClass("Epic")">Epic</MudText>
                    <MudTextField @bind-Value="epic.Title" Label="Title" Class="mb-2" />
                    <MudTextField @bind-Value="epic.Description" Label="Description" Lines="3" Class="mb-2" />

                    @foreach (var feature in epic.Features)
                    {
                        <MudPaper Class="pa-2 mb-2 ms-4">
                            <MudText Typo="Typo.subtitle1" Class="@WorkItemHelpers.GetItemClass("Feature")">Feature</MudText>
                            <MudTextField @bind-Value="feature.Title" Label="Title" Class="mb-2" />
                            <MudTextField @bind-Value="feature.Description" Label="Description" Lines="3" Class="mb-2" />

                            @foreach (var story in feature.Stories)
                            {
                                <MudPaper Class="pa-2 mb-2 ms-4">
                                    <MudText Typo="Typo.subtitle2" Class="@WorkItemHelpers.GetItemClass("User Story")">Story</MudText>
                                    <MudTextField @bind-Value="story.Title" Label="Title" Class="mb-2" />
                                    <MudTextField @bind-Value="story.Description" Label="Description" Lines="3" Class="mb-2" />
                                    <MudTextField @bind-Value="story.AcceptanceCriteria" Label="Acceptance Criteria" Lines="3" Class="mb-2" />
                                </MudPaper>
                            }
                        </MudPaper>
                    }
                </MudPaper>
            }

            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap">
                <MudSelect T="string" @bind-Value="_backlog" Label="Backlog">
                    @foreach (var b in _backlogs)
                    {
                        <MudSelectItem Value="@b">@b</MudSelectItem>
                    }
                </MudSelect>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="_loading" OnClick="CreateItems">Create Work Items</MudButton>
            </MudStack>
        }
    </MudStep>
</MudStepper>

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}

@code {
    private MudStepper? _stepper;
    private List<TreeItemData<WikiPageNode>>? _wikiItems;
    private IReadOnlyCollection<WikiPageNode>? _selectedPages;
    private string _wikiId = string.Empty;
    private string _prompt = string.Empty;
    private string _responseText = string.Empty;
    private bool _loading;
    private string? _error;
    private string[] _backlogs = [];
    private string _backlog = string.Empty;
    private Plan? _plan;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ConfigService.LoadAsync();
            _backlogs = await ApiService.GetBacklogsAsync();
            if (_backlogs.Length > 0)
                _backlog = _backlogs[0];

            var wikis = await ApiService.GetWikisAsync();
            if (wikis.Count > 0)
            {
                _wikiId = wikis[0].Id;
                var root = await ApiService.GetWikiPageTreeAsync(_wikiId);
                if (root != null)
                    _wikiItems = [BuildTreeItem(root)];
            }

            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    private async Task Generate()
    {
        if (_selectedPages == null || _selectedPages.Count == 0) return;
        _loading = true;
        StateHasChanged();
        try
        {
            List<(string Name, string Text)> pages = [];
            foreach (var p in _selectedPages)
            {
                var text = await ApiService.GetWikiPageContentAsync(_wikiId, p.Path);
                pages.Add((p.Name, text));
            }
            _prompt = BuildPrompt(pages);
            _error = null;
            await (_stepper?.NextStepAsync() ?? Task.CompletedTask);
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task CopyPrompt()
    {
        if (!string.IsNullOrWhiteSpace(_prompt))
            await JS.InvokeVoidAsync("copyText", _prompt);
    }

    private void ImportPlan()
    {
        try
        {
            var json = ExtractJson(_responseText);
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _plan = JsonSerializer.Deserialize<Plan>(json, options);
            _error = null;
            _ = _stepper?.NextStepAsync();
        }
        catch (Exception ex)
        {
            _plan = null;
            _error = ex.Message;
        }
    }

    private static string ExtractJson(string text)
    {
        var start = text.IndexOf('{');
        var end = text.LastIndexOf('}');
        return start >= 0 && end > start
            ? text[start..(end + 1)]
            : text;
    }

    private async Task CreateItems()
    {
        if (_plan == null) return;
        _loading = true;
        StateHasChanged();
        try
        {
            foreach (var epic in _plan.Epics)
            {
                epic.Id = await ApiService.CreateWorkItemAsync("Epic", epic.Title, epic.Description, _backlog, null, null, new[] { "AI Generated" });
                foreach (var feature in epic.Features)
                {
                    feature.Id = await ApiService.CreateWorkItemAsync("Feature", feature.Title, feature.Description, _backlog, epic.Id, null, new[] { "AI Generated" });
                    foreach (var story in feature.Stories)
                        story.Id = await ApiService.CreateWorkItemAsync(
                            "User Story",
                            story.Title,
                            story.Description,
                            _backlog,
                            feature.Id,
                            story.AcceptanceCriteria,
                            new[] { "AI Generated" }
                        );
                }
            }
            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private static TreeItemData<WikiPageNode> BuildTreeItem(WikiPageNode node)
    {
        var item = new TreeItemData<WikiPageNode> { Value = node, Text = node.Name };
        if (node.Children.Count > 0)
            item.Children = node.Children.Select(BuildTreeItem).ToList();
        return item;
    }

    private static string BuildPrompt(IEnumerable<(string Name, string Text)> pages)
    {
        var sb = new System.Text.StringBuilder();
        sb.AppendLine("You are a business analyst. Break down the following requirements into Epics, Features and User Stories.");
        sb.AppendLine(
            "Return JSON in this format:\n{\"epics\":[{\"title\":\"\",\"description\":\"\",\"features\":[{\"title\":\"\",\"description\":\"\",\"stories\":[{\"title\":\"\",\"description\":\"\",\"acceptanceCriteria\":\"\"}]}]}]}"
        );
        sb.AppendLine();
        sb.AppendLine("Document:");
        foreach (var page in pages)
        {
            sb.AppendLine($"## {page.Name}");
            sb.AppendLine(page.Text);
            sb.AppendLine();
        }
        return sb.ToString();
    }

    private class Plan
    {
        public List<Epic> Epics { get; set; } = new();
    }

    private class Epic
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public List<Feature> Features { get; set; } = new();
    }

    private class Feature
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public List<Story> Stories { get; set; } = new();
    }

    private class Story
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string AcceptanceCriteria { get; set; } = string.Empty;
    }
}
