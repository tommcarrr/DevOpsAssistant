@page "/projects/{ProjectName}/requirements-planner"
@using System.Text.Json
@using System.Text.Json.Serialization
@using MudBlazor
@using DevOpsAssistant.Services
@using DevOpsAssistant.Services.Models
@using DevOpsAssistant.Utils
@using Microsoft.AspNetCore.Components.Forms
@using DevOpsAssistant.Components
@using GeneratedPrompts
@inject DevOpsApiService ApiService
@inject IJSRuntime JS
@inject PageStateService StateService
@inherits ProjectComponentBase
@inject ISnackbar Snackbar
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<RequirementsPlanner> L
@inject IDialogService DialogService

<PageTitle>DevOpsAssistant - Requirement Planner</PageTitle>

<MudExpansionPanels>
    <MudExpansionPanel Text="@L["CopyPromptMessage"]">
        <MudStack Spacing="2">
            <MudButton Variant="Variant.Text" OnClick="CopyInitialPrompt">@L["CopyPromptLink"]</MudButton>
            <WikiDocumentSelector Source="@_promptSource"
                                   SourceChanged="@(v => _promptSource = v)"
                                   File="@_promptFile"
                                   FileChanged="@(f => _promptFile = f)"
                                   Text="@_promptText"
                                   TextChanged="@(t => _promptText = t)"
                                   WikiItems="@_promptWikiItems"
                                   SelectedPages="@_promptSelectedPages"
                                   SelectedPagesChanged="@(p => _promptSelectedPages = p)" />
        </MudStack>
    </MudExpansionPanel>
</MudExpansionPanels>
@if (!string.IsNullOrWhiteSpace(_error))
{
    <MudAlert Severity="Severity.Error">@_error</MudAlert>
}

<MudStepper @ref="_stepper" NonLinear="true">
    <MudStep Title="Select Requirements" Skippable="true">
        <MudStack Spacing="2">
            <WikiDocumentSelector Source="@_source"
                                   SourceChanged="@(v => _source = v)"
                                   File="@_file"
                                   FileChanged="@(f => _file = f)"
                                   Text="@_text"
                                   TextChanged="@(t => _text = t)"
                                   WikiItems="@_wikiItems"
                                   SelectedPages="@_selectedPages"
                                   SelectedPagesChanged="@(p => _selectedPages = p)" />
            <MudTooltip Text='@L["StoriesOnlyTooltip"]'>
                <MudSwitch T="bool" @bind-Value="_storiesOnly" Color="Color.Primary" Label="Stories Only" />
            </MudTooltip>
            <MudTooltip Text='@L["ClarifyTooltip"]'>
                <MudSwitch T="bool" @bind-Value="_clarify" Color="Color.Primary" Label='@L["ClarifyLabel"]' />
            </MudTooltip>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@GenerateDisabled" OnClick="Generate">Generate Prompt</MudButton>
        </MudStack>
    </MudStep>
    <MudStep Title="Import Response" Skippable="true">
        <MudStack Spacing="2">
            @if (_promptParts != null)
            {
                <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Download" OnClick="DownloadPrompt">Download</MudButton>
                <MudTextField T="string" Text="@_promptParts[_partIndex]" Lines="10" ReadOnly="true" />
                <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                    <MudTooltip Text='@L["PrevPartTooltip"]'>
                        <MudIconButton Icon="@Icons.Material.Filled.ChevronLeft" Disabled="_partIndex == 0" OnClick="PrevPart" />
                    </MudTooltip>
                    <MudText Typo="Typo.body2">@($"Part {_partIndex + 1}/{_promptParts.Count}")</MudText>
                    <MudTooltip Text='@L["NextPartTooltip"]'>
                        <MudIconButton Icon="@Icons.Material.Filled.ChevronRight" Disabled="_partIndex == _promptParts.Count - 1" OnClick="NextPart" />
                    </MudTooltip>
                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.ContentCopy" OnClick="() => CopyPart(_promptParts[_partIndex])">Copy</MudButton>
                </MudStack>
            }
            <MudTextField T="string" @bind-Value="_responseText" Lines="6" Label="LLM Response" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ImportPlan">Import</MudButton>
        </MudStack>
    </MudStep>
    <MudStep Title="Create Work Items" Disabled="@(_plan == null)">
        @if (_plan != null)
        {
            if (_storiesOnly)
            {
                <MudAutocomplete T="WorkItemInfo"
                                 @bind-Value="_feature"
                                 SearchFunc="SearchFeatures"
                                 ToStringFunc="@(f => f == null ? string.Empty : $"{f.Id} - {f.Title}")"
                                 Label="Feature" />

                @foreach (var story in _plan.Stories)
                {
                    <PlanItemEditor Type="User Story"
                                    Draggable="true"
                                    Droppable="true"
                                    DragStart="EventCallback.Factory.Create(this, () => OnDragStart(story))"
                                    Drop="EventCallback.Factory.Create(this, () => OnDropOnStoryList(story))"
                                    OnDelete="EventCallback.Factory.Create(this, () => RemoveStory(story))"
                                    @bind-Title="story.Title"
                                    @bind-Description="story.Description"
                                    @bind-AcceptanceCriteria="story.AcceptanceCriteria"
                                    @bind-Tags="story.Tags" />
                }
                <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add" OnClick="AddStory">Add Story</MudButton>
            }
            else
            {
                @foreach (var epic in _plan.Epics)
                {
                    <PlanItemEditor Type="Epic"
                                    Draggable="true"
                                    Droppable="true"
                                    DragStart="EventCallback.Factory.Create(this, () => OnDragStart(epic))"
                                    Drop="EventCallback.Factory.Create(this, () => OnDropOnPlan(epic))"
                                    OnDelete="EventCallback.Factory.Create(this, () => RemoveEpic(epic))"
                                    @bind-Title="epic.Title"
                                    @bind-Description="epic.Description"
                                    @bind-Tags="epic.Tags" >
                        @foreach (var feature in epic.Features)
                        {
                            <PlanItemEditor Type="Feature"
                                            Draggable="true"
                                            Droppable="true"
                                            DragStart="EventCallback.Factory.Create(this, () => OnDragStart(feature))"
                                            Drop="EventCallback.Factory.Create(this, () => OnDropOnEpic(epic))"
                                            OnDelete="EventCallback.Factory.Create(this, () => RemoveFeature(feature))"
                                            @bind-Title="feature.Title"
                                            @bind-Description="feature.Description"
                                            @bind-Tags="feature.Tags" >
                                @foreach (var story in feature.Stories)
                                {
                                    <PlanItemEditor Type="User Story"
                                                    Draggable="true"
                                                    Droppable="true"
                                                    DragStart="EventCallback.Factory.Create(this, () => OnDragStart(story))"
                                                    Drop="EventCallback.Factory.Create(this, () => OnDropOnFeature(feature))"
                                                    OnDelete="EventCallback.Factory.Create(this, () => RemoveStory(story))"
                                                    @bind-Title="story.Title"
                                                    @bind-Description="story.Description"
                                                    @bind-AcceptanceCriteria="story.AcceptanceCriteria"
                                                    @bind-Tags="story.Tags" />
                                }
                                <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add" OnClick="() => AddStory(feature)">Add Story</MudButton>
                            </PlanItemEditor>
                        }
                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add" OnClick="() => AddFeature(epic)">Add Feature</MudButton>
                    </PlanItemEditor>
                }
                <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add" OnClick="AddEpic">Add Epic</MudButton>
            }

            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap">
                <MudSelect T="string" @bind-Value="_backlog" Label="Backlog">
                    @foreach (var b in _backlogs)
                    {
                        <MudSelectItem Value="@b">@b</MudSelectItem>
                    }
                </MudSelect>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="_loading" OnClick="CreateItems">Create Work Items</MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Error" Disabled="_loading || _createdItems.Count == 0" OnClick="UndoCreatedItems">@L["Undo"]</MudButton>
            </MudStack>
        }
    </MudStep>
</MudStepper>

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}

@code {
    [Parameter] public string ProjectName { get; set; } = string.Empty;
    private MudStepper? _stepper;
    private List<TreeItemData<WikiPageNode>>? _wikiItems;
    private List<TreeItemData<WikiPageNode>>? _promptWikiItems;
    private IReadOnlyCollection<WikiPageNode>? _selectedPages;
    private IBrowserFile? _file;
    private string _text = string.Empty;
    private DocumentSource _source;
    private IReadOnlyCollection<WikiPageNode>? _promptSelectedPages;
    private IBrowserFile? _promptFile;
    private string _promptText = string.Empty;
    private DocumentSource _promptSource;
    private string _wikiId = string.Empty;
    private string _prompt = string.Empty;
    private List<string>? _promptParts;
    private int _partIndex;
    private string _responseText = string.Empty;
    private bool _loading;
    private string? _error;
    private string[] _backlogs = [];
    private string _backlog = string.Empty;
    private bool _storiesOnly;
    private bool _clarify;
    private WorkItemInfo? _feature;
    private Plan? _plan;
    private readonly List<int> _createdItems = new();
    private const string StateKey = "requirements-planner";
    private const long MaxFileSize = 10 * 1024 * 1024;

    private static readonly string InitialPrompt = GeneratedPrompts.RequirementsPlanner_MainPrompt.Value;
    private bool GenerateDisabled => _loading || _source switch
        {
            DocumentSource.Document => _file == null,
            DocumentSource.Text => string.IsNullOrWhiteSpace(_text),
            _ => _selectedPages == null || _selectedPages.Count == 0
        };

    protected override async Task OnInitializedAsync()
    {
        await ConfigService.LoadAsync();
        if (!string.IsNullOrWhiteSpace(ProjectName) &&
            ConfigService.CurrentProject.Name != ProjectName)
        {
            await ConfigService.SelectProjectAsync(ProjectName);
        }
        try
        {
            _backlogs = await ApiService.GetBacklogsAsync();
            if (_backlogs.Length > 0)
                _backlog = _backlogs[0];

            var state = await StateService.LoadAsync<PageState>(StateKey);
            if (state != null)
            {
                if (!string.IsNullOrWhiteSpace(state.Backlog))
                    _backlog = state.Backlog;
                if (!string.IsNullOrWhiteSpace(state.WikiId))
                    _wikiId = state.WikiId;
            }

            var wikis = await ApiService.GetWikisAsync();
            if (wikis.Count > 0)
            {
                if (string.IsNullOrWhiteSpace(_wikiId))
                    _wikiId = wikis[0].Id;
                var root = await ApiService.GetWikiPageTreeAsync(_wikiId);
                if (root != null)
                {
                    _wikiItems = [BuildTreeItem(root)];
                    _promptWikiItems = [BuildTreeItem(root)];
                }
            }

            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    private async Task Generate()
    {
        if (GenerateDisabled) return;
        _loading = true;
        StateHasChanged();
        try
        {
            List<(string Name, string Text)> pages = [];
            switch (_source)
            {
                case DocumentSource.Document:
                    if (_file != null)
                    {
                        using var stream = _file.OpenReadStream(MaxFileSize);
                        var text = DocumentHelpers.ExtractText(stream, _file.Name);
                        pages.Add((_file.Name, text));
                    }
                    break;
                case DocumentSource.Text:
                    if (!string.IsNullOrWhiteSpace(_text))
                        pages.Add(("Pasted", _text));
                    break;
                default:
                    if (_selectedPages != null)
                    {
                        foreach (var p in _selectedPages)
                        {
                            var text = await ApiService.GetWikiPageContentAsync(_wikiId, p.Path);
                            pages.Add((p.Name, text));
                        }
                    }
                    break;
            }
            _prompt = BuildPrompt(pages, _storiesOnly, _clarify, ConfigService.Config);
            _promptParts = PromptHelpers.SplitPrompt(_prompt, ConfigService.Config.PromptCharacterLimit).ToList();
            _partIndex = 0;
            await StateService.SaveAsync(StateKey, new PageState
            {
                Backlog = _backlog,
                WikiId = _wikiId
            });
            _error = null;
            await CopyPrompt();
            await (_stepper?.NextStepAsync() ?? Task.CompletedTask);
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task UndoCreatedItems()
    {
        if (_createdItems.Count == 0) return;
        var parameters = new DialogParameters { ["Message"] = L["UndoWarning"].Value };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>(L["Confirm"], parameters);
        var result = await dialog.Result;
        if (result?.Canceled != false) return;

        _loading = true;
        StateHasChanged();
        try
        {
            await DeleteCreatedItems();
            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task DeleteCreatedItems()
    {
        for (var i = _createdItems.Count - 1; i >= 0; i--)
            await ApiService.DeleteWorkItemAsync(_createdItems[i]);
        _createdItems.Clear();
    }

    private async Task CopyPrompt()
    {
        if (!string.IsNullOrWhiteSpace(_prompt))
        {
            await JS.InvokeVoidAsync("copyText", _prompt);
            Snackbar.Add(L["CopyToast"].Value, Severity.Success);
        }
    }

    private async Task CopyInitialPrompt()
    {
        var prompt = await BuildInitialPrompt();
        await JS.InvokeVoidAsync("copyText", prompt);
        Snackbar.Add(L["CopyToast"].Value, Severity.Success);
    }

    private async Task CopyPart(string text)
    {
        await JS.InvokeVoidAsync("copyText", text);
        Snackbar.Add(L["CopyToast"].Value, Severity.Success);
    }

    private void PrevPart()
    {
        if (_partIndex > 0)
            _partIndex--;
    }

    private void NextPart()
    {
        if (_promptParts != null && _partIndex < _promptParts.Count - 1)
            _partIndex++;
    }

    private async Task DownloadPrompt()
    {
        if (!string.IsNullOrWhiteSpace(_prompt))
            await JS.InvokeVoidAsync("downloadText", "prompt.txt", _prompt);
    }

    private Task OnFileSelected(InputFileChangeEventArgs e)
    {
        _file = e.File;
        return Task.CompletedTask;
    }

    private async Task<string> BuildInitialPrompt()
    {
        var sb = new System.Text.StringBuilder(InitialPrompt);
        List<(string Name, string Text)> pages = [];
        switch (_promptSource)
        {
            case DocumentSource.Document:
                if (_promptFile != null)
                {
                    using var stream = _promptFile.OpenReadStream(MaxFileSize);
                    var text = DocumentHelpers.ExtractText(stream, _promptFile.Name);
                    pages.Add((_promptFile.Name, text));
                }
                break;
            case DocumentSource.Text:
                if (!string.IsNullOrWhiteSpace(_promptText))
                    pages.Add(("Pasted", _promptText));
                break;
            default:
                if (_promptSelectedPages != null)
                {
                    foreach (var p in _promptSelectedPages)
                    {
                        var text = await ApiService.GetWikiPageContentAsync(_wikiId, p.Path);
                        pages.Add((p.Name, text));
                    }
                }
                break;
        }
        if (pages.Count > 0)
        {
            sb.AppendLine();
            sb.AppendLine(GeneratedPrompts.RequirementsPlanner_DocumentIntroPrompt.Value);
            foreach (var page in pages)
            {
                sb.AppendLine($"## {page.Name}");
                sb.AppendLine(page.Text);
                sb.AppendLine();
            }
        }
        return sb.ToString();
    }


    private void ImportPlan()
    {
        try
        {
            var json = ExtractJson(_responseText);
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _plan = JsonSerializer.Deserialize<Plan>(json, options);
            if (_plan != null)
            {
                AddAiGeneratedTags(_plan);
                SetTagStrings(_plan);
            }
            _error = null;
            _ = _stepper?.NextStepAsync();
        }
        catch (Exception ex)
        {
            _plan = null;
            _error = ex.Message;
        }
    }

    private static string ExtractJson(string text)
    {
        var start = text.IndexOf('{');
        var end = text.LastIndexOf('}');
        return start >= 0 && end > start
            ? text[start..(end + 1)]
            : text;
    }

    private static void SetTagStrings(Plan plan)
    {
        foreach (var story in plan.Stories)
            story.TagString = string.Join(", ", story.Tags);
        foreach (var epic in plan.Epics)
        {
            epic.TagString = string.Join(", ", epic.Tags);
            foreach (var feature in epic.Features)
            {
                feature.TagString = string.Join(", ", feature.Tags);
                foreach (var story in feature.Stories)
                    story.TagString = string.Join(", ", story.Tags);
            }
        }
    }

    private static void AddAiGeneratedTags(Plan plan)
    {
        foreach (var story in plan.Stories)
            AddTagIfMissing(story.Tags);
        foreach (var epic in plan.Epics)
        {
            AddTagIfMissing(epic.Tags);
            foreach (var feature in epic.Features)
            {
                AddTagIfMissing(feature.Tags);
                foreach (var story in feature.Stories)
                    AddTagIfMissing(story.Tags);
            }
        }
    }

    private static void AddTagIfMissing(ICollection<string> tags)
    {
        if (!tags.Any(t => string.Equals(t, AppConstants.AiGeneratedTag, StringComparison.OrdinalIgnoreCase)))
            tags.Add(AppConstants.AiGeneratedTag);
    }

    private async Task CreateItems()
    {
        if (_plan == null) return;
        _loading = true;
        StateHasChanged();
        try
        {
            if (_storiesOnly)
            {
                var parentId = _feature?.Id;
                foreach (var story in _plan.Stories)
                {
                    var tags = story.Tags.Concat([AppConstants.AiGeneratedTag]).ToArray();
                    story.Id = await ApiService.CreateWorkItemAsync(
                        "User Story",
                        story.Title,
                        story.Description,
                        _backlog,
                        parentId,
                        story.AcceptanceCriteria,
                        tags
                    );
                    _createdItems.Add(story.Id);
                }
            }
            else
            {
                foreach (var epic in _plan.Epics)
                {
                    var epicTags = epic.Tags.Concat([AppConstants.AiGeneratedTag]).ToArray();
                    epic.Id = await ApiService.CreateWorkItemAsync("Epic", epic.Title, epic.Description, _backlog, null, null, epicTags);
                    _createdItems.Add(epic.Id);
                    foreach (var feature in epic.Features)
                    {
                        var featureTags = feature.Tags.Concat([AppConstants.AiGeneratedTag]).ToArray();
                        feature.Id = await ApiService.CreateWorkItemAsync("Feature", feature.Title, feature.Description, _backlog, epic.Id, null, featureTags);
                        _createdItems.Add(feature.Id);
                        foreach (var story in feature.Stories)
                        {
                            var tags2 = story.Tags.Concat([AppConstants.AiGeneratedTag]).ToArray();
                            story.Id = await ApiService.CreateWorkItemAsync(
                                "User Story",
                                story.Title,
                                story.Description,
                                _backlog,
                                feature.Id,
                                story.AcceptanceCriteria,
                                tags2
                            );
                            _createdItems.Add(story.Id);
                        }
                    }
                }
            }
            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private static TreeItemData<WikiPageNode> BuildTreeItem(WikiPageNode node)
    {
        var item = new TreeItemData<WikiPageNode> { Value = node, Text = node.Name };
        if (node.Children.Count > 0)
            item.Children = node.Children.Select(BuildTreeItem).ToList();
        return item;
    }

        private static string BuildPrompt(IEnumerable<(string Name, string Text)> pages, bool storiesOnly, bool clarify, DevOpsConfig config)
    {
        var sb = new System.Text.StringBuilder();
        if (string.IsNullOrWhiteSpace(config.RequirementsPrompt) ||
            config.RequirementsPromptMode == PromptMode.Append)
        {
            if (storiesOnly)
            {
                sb.AppendLine(GeneratedPrompts.RequirementsPlanner_UserStoriesBlockPrompt.Value);
            }
            else
            {
                sb.AppendLine(GeneratedPrompts.RequirementsPlanner_EpicsBlockPrompt.Value);
            }
            if (config.Standards.UserStoryDescription.Contains("ScrumUserStory"))
                sb.AppendLine(GeneratedPrompts.RequirementsPlanner_Description_ScrumPrompt.Value);
            else if (config.Standards.UserStoryDescription.Contains("JobStory"))
                sb.AppendLine(GeneratedPrompts.RequirementsPlanner_Description_JobPrompt.Value);
            else
                sb.AppendLine(GeneratedPrompts.RequirementsPlanner_Description_GenericPrompt.Value);
            if (config.Standards.UserStoryAcceptanceCriteria.Contains("Gherkin"))
                sb.AppendLine(GeneratedPrompts.RequirementsPlanner_AcceptanceCriteria_GherkinPrompt.Value);
            else if (config.Standards.UserStoryAcceptanceCriteria.Contains("BulletPoints"))
                sb.AppendLine(GeneratedPrompts.RequirementsPlanner_AcceptanceCriteria_BulletPointsPrompt.Value);
            else if (config.Standards.UserStoryAcceptanceCriteria.Contains("SAFeStyle"))
                sb.AppendLine(GeneratedPrompts.RequirementsPlanner_AcceptanceCriteria_SAFeStylePrompt.Value);
            sb.AppendLine(GeneratedPrompts.RequirementsPlanner_TagsAndHtmlAdvicePrompt.Value);
            sb.AppendLine($"Work item granularity level {config.WorkItemGranularity}/10: 1 = large complex items, 10 = smallest sensible tasks.");

            if (config.Standards.UserStoryQuality.Count > 0)
            {
                sb.AppendLine();
                sb.AppendLine(GeneratedPrompts.RequirementsPlanner_StoryQualityStandardsIntroPrompt.Value);
                foreach (var s in config.Standards.UserStoryQuality)
                    sb.AppendLine($"- {StandardsCatalog.GetName(s)}");
            }

            if (config.Standards.RequirementsDocumentation.Count > 0)
            {
                sb.AppendLine();
                sb.AppendLine(GeneratedPrompts.RequirementsDocumentationStandardsIntroPrompt.Value);
                foreach (var s in config.Standards.RequirementsDocumentation)
                    sb.AppendLine($"- {StandardsCatalog.GetName(s)}");
            }

            if (storiesOnly)
            {
                sb.AppendLine();
                sb.AppendLine(GeneratedPrompts.RequirementsPlanner_StoriesOnlyBlockPrompt.Value);
            }
            else
            {
                sb.AppendLine();
                sb.AppendLine(GeneratedPrompts.RequirementsPlanner_EpicsJsonBlockPrompt.Value);
            }

            if (clarify)
            {
                sb.AppendLine();
                sb.AppendLine(GeneratedPrompts.RequirementsPlanner_ClarifyBlockPrompt.Value);
            }
        }
        if (!string.IsNullOrWhiteSpace(config.RequirementsPrompt))
        {
            sb.AppendLine(config.RequirementsPrompt.Trim());
        }
        sb.AppendLine();
        sb.AppendLine(GeneratedPrompts.RequirementsPlanner_DocumentIntroPrompt.Value);
        foreach (var page in pages)
        {
            sb.AppendLine($"## {page.Name}");
            sb.AppendLine(page.Text);
            sb.AppendLine();
        }
        sb.AppendLine();
        return sb.ToString();
    }

    private async Task<IEnumerable<WorkItemInfo>> SearchFeatures(string value, CancellationToken _)
    {
        if (string.IsNullOrWhiteSpace(value) || value.Length < 2)
            return Array.Empty<WorkItemInfo>();
        try
        {
            var result = await ApiService.SearchFeaturesAsync(value);
            _error = null;
            return result;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
            return Array.Empty<WorkItemInfo>();
        }
    }

    private object? _dragItem;

    private void OnDragStart(object item)
    {
        _dragItem = item;
    }


    private void OnDropOnPlan(Epic target)
    {
        if (_dragItem is not Epic epic || _plan == null || epic == target)
            return;
        _plan.Epics.Remove(epic);
        var index = _plan.Epics.IndexOf(target);
        _plan.Epics.Insert(index + 1, epic);
        _dragItem = null;
    }

    private void OnDropOnEpic(Epic epic)
    {
        if (_dragItem is not Feature feature || _plan == null)
            return;
        var parent = _plan.Epics.FirstOrDefault(e => e.Features.Remove(feature));
        if (parent != null && !epic.Features.Contains(feature))
            epic.Features.Add(feature);
        _dragItem = null;
    }

    private void OnDropOnFeature(Feature feature)
    {
        if (_dragItem is not Story story || _plan == null)
            return;
        foreach (var e in _plan.Epics)
            foreach (var f in e.Features)
                f.Stories.Remove(story);
        if (!feature.Stories.Contains(story))
            feature.Stories.Add(story);
        _dragItem = null;
    }

    private void OnDropOnStoryList(Story target)
    {
        if (_dragItem is not Story story || _plan == null || story == target)
            return;
        var list = _plan.Stories;
        list.Remove(story);
        var index = list.IndexOf(target);
        list.Insert(index + 1, story);
        _dragItem = null;
    }

    private void RemoveEpic(Epic epic)
    {
        _plan?.Epics.Remove(epic);
    }

    private void RemoveFeature(Feature feature)
    {
        if (_plan == null)
            return;
        foreach (var e in _plan.Epics)
            if (e.Features.Remove(feature))
                break;
    }

    private void RemoveStory(Story story)
    {
        if (_plan == null)
            return;
        if (_storiesOnly)
        {
            _plan.Stories.Remove(story);
            return;
        }
        foreach (var e in _plan.Epics)
            foreach (var f in e.Features)
                if (f.Stories.Remove(story))
                    return;
    }

    private void AddEpic()
    {
        _plan?.Epics.Add(new Epic());
    }

    private void AddFeature(Epic epic)
    {
        epic.Features.Add(new Feature());
    }

    private void AddStory(Feature feature)
    {
        feature.Stories.Add(new Story());
    }

    private void AddStory()
    {
        _plan?.Stories.Add(new Story());
    }

    private class Plan
    {
        public List<Epic> Epics { get; set; } = new();
        public List<Story> Stories { get; set; } = new();
    }

    private class Epic
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public List<string> Tags { get; set; } = new();

        [JsonIgnore]
        public string TagString
        {
            get => string.Join(", ", Tags);
            set => Tags = value.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                .Select(t => t.Trim())
                                .ToList();
        }
        public List<Feature> Features { get; set; } = new();
    }

    private class Feature
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public List<string> Tags { get; set; } = new();

        [JsonIgnore]
        public string TagString
        {
            get => string.Join(", ", Tags);
            set => Tags = value.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                .Select(t => t.Trim())
                                .ToList();
        }
        public List<Story> Stories { get; set; } = new();
    }

    private class Story
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string AcceptanceCriteria { get; set; } = string.Empty;
        public List<string> Tags { get; set; } = new();

        [JsonIgnore]
        public string TagString
        {
            get => string.Join(", ", Tags);
            set => Tags = value.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                .Select(t => t.Trim())
                                .ToList();
        }
    }

    private class PageState
    {
        public string Backlog { get; set; } = string.Empty;
        public string WikiId { get; set; } = string.Empty;
    }

    protected override Task OnProjectChangedAsync()
    {
        return OnInitializedAsync();
    }
}
