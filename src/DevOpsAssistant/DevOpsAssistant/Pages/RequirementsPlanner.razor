@page "/projects/{ProjectName}/requirements-planner"
@using System.Text.Json
@using System.Text.Json.Serialization
@using MudBlazor
@using DevOpsAssistant.Services
@using DevOpsAssistant.Services.Models
@using DevOpsAssistant.Utils
@using Microsoft.AspNetCore.Components.Forms
@using DevOpsAssistant.Components
@inject DevOpsApiService ApiService
@inject IJSRuntime JS
@inject PageStateService StateService
@inherits ProjectComponentBase
@inject ISnackbar Snackbar
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<RequirementsPlanner> L

<PageTitle>DevOpsAssistant - Requirement Planner</PageTitle>

<MudExpansionPanels>
    <MudExpansionPanel Text="@L["CopyPromptMessage"]">
        <MudStack Spacing="2">
            <MudButton Variant="Variant.Text" OnClick="CopyInitialPrompt">@L["CopyPromptLink"]</MudButton>
            <WikiDocumentSelector UseDocument="@_promptUseDocument"
                                   UseDocumentChanged="@(v => _promptUseDocument = v)"
                                   File="@_promptFile"
                                   FileChanged="@(f => _promptFile = f)"
                                   WikiItems="@_wikiItems"
                                   SelectedPages="@_promptSelectedPages"
                                   SelectedPagesChanged="@(p => _promptSelectedPages = p)" />
        </MudStack>
    </MudExpansionPanel>
</MudExpansionPanels>
@if (!string.IsNullOrWhiteSpace(_error))
{
    <MudAlert Severity="Severity.Error">@_error</MudAlert>
}

<MudStepper @ref="_stepper" ActionContent="@(_ => (RenderFragment)(builder => { }) )">
    <MudStep Title="Select Requirements">
        <MudStack Spacing="2">
            <WikiDocumentSelector UseDocument="@_useDocument"
                                   UseDocumentChanged="@(v => _useDocument = v)"
                                   File="@_file"
                                   FileChanged="@(f => _file = f)"
                                   WikiItems="@_wikiItems"
                                   SelectedPages="@_selectedPages"
                                   SelectedPagesChanged="@(p => _selectedPages = p)" />
            <MudTooltip Text='@L["StoriesOnlyTooltip"]'>
                <MudSwitch T="bool" @bind-Value="_storiesOnly" Color="Color.Primary" Label="Stories Only" />
            </MudTooltip>
            <MudTooltip Text='@L["ClarifyTooltip"]'>
                <MudSwitch T="bool" @bind-Value="_clarify" Color="Color.Primary" Label='@L["ClarifyLabel"]' />
            </MudTooltip>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@GenerateDisabled" OnClick="Generate">Generate Prompt</MudButton>
        </MudStack>
    </MudStep>
    <MudStep Title="Import Response" Disabled="@string.IsNullOrWhiteSpace(_prompt)">
        <MudStack Spacing="2">
            @if (_promptParts != null)
            {
                <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Download" OnClick="DownloadPrompt">Download</MudButton>
                <MudTextField T="string" Text="@_promptParts[_partIndex]" Lines="10" ReadOnly="true" />
                <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                    <MudTooltip Text='@L["PrevPartTooltip"]'>
                        <MudIconButton Icon="@Icons.Material.Filled.ChevronLeft" Disabled="_partIndex == 0" OnClick="PrevPart" />
                    </MudTooltip>
                    <MudText Typo="Typo.body2">@($"Part {_partIndex + 1}/{_promptParts.Count}")</MudText>
                    <MudTooltip Text='@L["NextPartTooltip"]'>
                        <MudIconButton Icon="@Icons.Material.Filled.ChevronRight" Disabled="_partIndex == _promptParts.Count - 1" OnClick="NextPart" />
                    </MudTooltip>
                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.ContentCopy" OnClick="() => CopyPart(_promptParts[_partIndex])">Copy</MudButton>
                </MudStack>
            }
            <MudTextField T="string" @bind-Value="_responseText" Lines="6" Label="LLM Response" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ImportPlan">Import</MudButton>
        </MudStack>
    </MudStep>
    <MudStep Title="Create Work Items" Disabled="@(_plan == null)">
        @if (_plan != null)
        {
            <MudSwitch T="bool" @bind-Value="_previewHtml" Color="Color.Primary" Label="Preview HTML" />
            if (_storiesOnly)
            {
                <MudAutocomplete T="WorkItemInfo"
                                 @bind-Value="_feature"
                                 SearchFunc="SearchFeatures"
                                 ToStringFunc="@(f => f == null ? string.Empty : $"{f.Id} - {f.Title}")"
                                 Label="Feature" />

                @foreach (var story in _plan.Stories)
                {
                    <MudPaper Class="@($"pa-6 {WorkItemHelpers.GetItemClass("User Story")}")">
                        <MudText Typo="Typo.subtitle2">Story</MudText>
                        @if (_previewHtml)
                        {
                            <MudText Typo="Typo.subtitle2">Description</MudText>
                            <div class="preview-box">@((MarkupString)story.Description)</div>
                            <MudText Typo="Typo.subtitle2">Acceptance Criteria</MudText>
                            <div class="preview-box">@((MarkupString)story.AcceptanceCriteria)</div>
                            <MudText Typo="Typo.subtitle2">Tags</MudText>
                            <div>@string.Join(", ", story.Tags)</div>
                        }
                        else
                        {
                            <MudTextField @bind-Value="story.Title" Label="Title" />
                            <MudTextField @bind-Value="story.Description" Label="Description" Lines="3" />
                            <MudTextField @bind-Value="story.AcceptanceCriteria" Label="Acceptance Criteria" Lines="3" />
                            <MudTextField @bind-Value="story.TagString" Label="Tags" />
                        }
                    </MudPaper>
                }
            }
            else
            {
                @foreach (var epic in _plan.Epics)
                {
                    <MudPaper Class="@($"pa-6 {WorkItemHelpers.GetItemClass("Epic")}")">
                        <MudText Typo="Typo.h6">Epic</MudText>
                        <MudTextField @bind-Value="epic.Title" Label="Title" />
                        <MudTextField @bind-Value="epic.Description" Label="Description" Lines="3" />

                        @foreach (var feature in epic.Features)
                        {
                            <MudPaper Class="@($"pa-6 {WorkItemHelpers.GetItemClass("Feature")}")">
                                <MudText Typo="Typo.subtitle1">Feature</MudText>
                                <MudTextField @bind-Value="feature.Title" Label="Title" />
                                <MudTextField @bind-Value="feature.Description" Label="Description" Lines="3" />

                                @foreach (var story in feature.Stories)
                                {
                                    <MudPaper Class="@($"pa-6 {WorkItemHelpers.GetItemClass("User Story")}")">
                                        <MudText Typo="Typo.subtitle2">Story</MudText>
                                        @if (_previewHtml)
                                        {
                                            <MudText Typo="Typo.subtitle2">Description</MudText>
                                            <div class="preview-box">@((MarkupString)story.Description)</div>
                                            <MudText Typo="Typo.subtitle2">Acceptance Criteria</MudText>
                                            <div class="preview-box">@((MarkupString)story.AcceptanceCriteria)</div>
                                            <MudText Typo="Typo.subtitle2">Tags</MudText>
                                            <div>@string.Join(", ", story.Tags)</div>
                                        }
                                        else
                                        {
                                            <MudTextField @bind-Value="story.Title" Label="Title" />
                                            <MudTextField @bind-Value="story.Description" Label="Description" Lines="3" />
                                            <MudTextField @bind-Value="story.AcceptanceCriteria" Label="Acceptance Criteria" Lines="3" />
                                            <MudTextField @bind-Value="story.TagString" Label="Tags" />
                                        }
                                    </MudPaper>
                                }
                            </MudPaper>
                        }
                    </MudPaper>
                }
            }

            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap">
                <MudSelect T="string" @bind-Value="_backlog" Label="Backlog">
                    @foreach (var b in _backlogs)
                    {
                        <MudSelectItem Value="@b">@b</MudSelectItem>
                    }
                </MudSelect>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="_loading" OnClick="CreateItems">Create Work Items</MudButton>
            </MudStack>
        }
    </MudStep>
</MudStepper>

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}

@code {
    [Parameter] public string ProjectName { get; set; } = string.Empty;
    private MudStepper? _stepper;
    private List<TreeItemData<WikiPageNode>>? _wikiItems;
    private IReadOnlyCollection<WikiPageNode>? _selectedPages;
    private IBrowserFile? _file;
    private bool _useDocument;
    private IReadOnlyCollection<WikiPageNode>? _promptSelectedPages;
    private IBrowserFile? _promptFile;
    private bool _promptUseDocument;
    private string _wikiId = string.Empty;
    private string _prompt = string.Empty;
    private List<string>? _promptParts;
    private int _partIndex;
    private string _responseText = string.Empty;
    private bool _loading;
    private string? _error;
    private string[] _backlogs = [];
    private string _backlog = string.Empty;
    private bool _storiesOnly;
    private bool _clarify;
    private bool _previewHtml;
    private WorkItemInfo? _feature;
    private Plan? _plan;
    private const string StateKey = "requirements-planner";
    private const long MaxFileSize = 10 * 1024 * 1024;

    private static readonly string InitialPrompt = @"You are a senior Agile Business Analyst and Scrum Agent helping a product owner or stakeholder build a clear Agile-ready feature requirements document.

Your job is to:
1. Ask structured, iterative questions to gather **all relevant details** for the feature.
2. Organize the answers into a professional **requirements document** in **Markdown format**.
3. Include **both functional and non-functional requirements**.
4. Ensure the final document includes all the sections needed to break the feature down into INVEST-compliant user stories.

Use a conversational tone. Do not generate the full document until you have gathered all necessary inputs from the user.

---

### 🧱 Document Template to Fill (Markdown Output)
Only output this once all required info has been collected.

```markdown
# Feature Name: [Title]

## Summary
[1–2 sentence overview of the feature and business need.]

## Goals and Objectives
- [Goal 1]
- [Goal 2]

## Functional Requirements
List the system behaviors, capabilities, or interactions this feature must provide.

- FR1: [Functional requirement 1]
- FR2: [Functional requirement 2]

## Non-Functional Requirements
Document performance, usability, reliability, and other quality criteria.

- NFR1: [e.g. Must support 10,000 users concurrently]
- NFR2: [e.g. Page loads in under 2 seconds on 3G]

## Success Criteria
Define what success looks like — business or system-level outcomes.

- [e.g. 95% of users complete the flow without error]
- [e.g. Reduction in manual support tickets]

## Stakeholders
- [Role: Name or description]
- [Role: Name or description]

## Dependencies / Constraints
- [List any system, team, or timing constraints]

## Open Questions
- [Use this to track clarification needed during refinement]

## Notes
- [Any background info, URLs, legacy behavior, etc.]
```";
    private bool GenerateDisabled =>
        _loading ||
        (_useDocument ? _file == null : _selectedPages == null || _selectedPages.Count == 0);

    protected override async Task OnInitializedAsync()
    {
        await ConfigService.LoadAsync();
        if (!string.IsNullOrWhiteSpace(ProjectName) &&
            ConfigService.CurrentProject.Name != ProjectName)
        {
            await ConfigService.SelectProjectAsync(ProjectName);
        }
        try
        {
            _backlogs = await ApiService.GetBacklogsAsync();
            if (_backlogs.Length > 0)
                _backlog = _backlogs[0];

            var state = await StateService.LoadAsync<PageState>(StateKey);
            if (state != null)
            {
                if (!string.IsNullOrWhiteSpace(state.Backlog))
                    _backlog = state.Backlog;
                if (!string.IsNullOrWhiteSpace(state.WikiId))
                    _wikiId = state.WikiId;
            }

            var wikis = await ApiService.GetWikisAsync();
            if (wikis.Count > 0)
            {
                if (string.IsNullOrWhiteSpace(_wikiId))
                    _wikiId = wikis[0].Id;
                var root = await ApiService.GetWikiPageTreeAsync(_wikiId);
                if (root != null)
                    _wikiItems = [BuildTreeItem(root)];
            }

            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    private async Task Generate()
    {
        if (GenerateDisabled) return;
        _loading = true;
        StateHasChanged();
        try
        {
            List<(string Name, string Text)> pages = [];
            if (_useDocument)
            {
                if (_file != null)
                {
                    using var stream = _file.OpenReadStream(MaxFileSize);
                    var text = DocumentHelpers.ExtractText(stream, _file.Name);
                    pages.Add((_file.Name, text));
                }
            }
            else if (_selectedPages != null)
            {
                foreach (var p in _selectedPages)
                {
                    var text = await ApiService.GetWikiPageContentAsync(_wikiId, p.Path);
                    pages.Add((p.Name, text));
                }
            }
            _prompt = BuildPrompt(pages, _storiesOnly, _clarify, ConfigService.Config);
            _promptParts = PromptHelpers.SplitPrompt(_prompt, ConfigService.Config.PromptCharacterLimit).ToList();
            _partIndex = 0;
            await StateService.SaveAsync(StateKey, new PageState
            {
                Backlog = _backlog,
                WikiId = _wikiId
            });
            _error = null;
            await CopyPrompt();
            await (_stepper?.NextStepAsync() ?? Task.CompletedTask);
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task CopyPrompt()
    {
        if (!string.IsNullOrWhiteSpace(_prompt))
        {
            await JS.InvokeVoidAsync("copyText", _prompt);
            Snackbar.Add(L["CopyToast"].Value, Severity.Success);
        }
    }

    private async Task CopyInitialPrompt()
    {
        var prompt = await BuildInitialPrompt();
        await JS.InvokeVoidAsync("copyText", prompt);
        Snackbar.Add(L["CopyToast"].Value, Severity.Success);
    }

    private async Task CopyPart(string text)
    {
        await JS.InvokeVoidAsync("copyText", text);
        Snackbar.Add(L["CopyToast"].Value, Severity.Success);
    }

    private void PrevPart()
    {
        if (_partIndex > 0)
            _partIndex--;
    }

    private void NextPart()
    {
        if (_promptParts != null && _partIndex < _promptParts.Count - 1)
            _partIndex++;
    }

    private async Task DownloadPrompt()
    {
        if (!string.IsNullOrWhiteSpace(_prompt))
            await JS.InvokeVoidAsync("downloadText", "prompt.txt", _prompt);
    }

    private Task OnFileSelected(InputFileChangeEventArgs e)
    {
        _file = e.File;
        return Task.CompletedTask;
    }

    private async Task<string> BuildInitialPrompt()
    {
        var sb = new System.Text.StringBuilder(InitialPrompt);
        List<(string Name, string Text)> pages = [];
        if (_promptUseDocument)
        {
            if (_promptFile != null)
            {
                using var stream = _promptFile.OpenReadStream(MaxFileSize);
                var text = DocumentHelpers.ExtractText(stream, _promptFile.Name);
                pages.Add((_promptFile.Name, text));
            }
        }
        else if (_promptSelectedPages != null)
        {
            foreach (var p in _promptSelectedPages)
            {
                var text = await ApiService.GetWikiPageContentAsync(_wikiId, p.Path);
                pages.Add((p.Name, text));
            }
        }
        if (pages.Count > 0)
        {
            sb.AppendLine();
            sb.AppendLine("Document:");
            sb.AppendLine("The following document provides an overview of the current state of the application these requirements apply to.");
            foreach (var page in pages)
            {
                sb.AppendLine($"## {page.Name}");
                sb.AppendLine(page.Text);
                sb.AppendLine();
            }
        }
        return sb.ToString();
    }


    private void ImportPlan()
    {
        try
        {
            var json = ExtractJson(_responseText);
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            _plan = JsonSerializer.Deserialize<Plan>(json, options);
            if (_plan != null)
                SetTagStrings(_plan);
            _error = null;
            _ = _stepper?.NextStepAsync();
        }
        catch (Exception ex)
        {
            _plan = null;
            _error = ex.Message;
        }
    }

    private static string ExtractJson(string text)
    {
        var start = text.IndexOf('{');
        var end = text.LastIndexOf('}');
        return start >= 0 && end > start
            ? text[start..(end + 1)]
            : text;
    }

    private static void SetTagStrings(Plan plan)
    {
        foreach (var story in plan.Stories)
            story.TagString = string.Join(", ", story.Tags);
        foreach (var epic in plan.Epics)
        {
            foreach (var feature in epic.Features)
            {
                foreach (var story in feature.Stories)
                    story.TagString = string.Join(", ", story.Tags);
            }
        }
    }

    private async Task CreateItems()
    {
        if (_plan == null) return;
        _loading = true;
        StateHasChanged();
        try
        {
            if (_storiesOnly)
            {
                var parentId = _feature?.Id;
                foreach (var story in _plan.Stories)
                {
                    var tags = story.Tags.Concat(["AI Generated"]).ToArray();
                    story.Id = await ApiService.CreateWorkItemAsync(
                        "User Story",
                        story.Title,
                        story.Description,
                        _backlog,
                        parentId,
                        story.AcceptanceCriteria,
                        tags
                    );
                }
            }
            else
            {
                foreach (var epic in _plan.Epics)
                {
                    epic.Id = await ApiService.CreateWorkItemAsync("Epic", epic.Title, epic.Description, _backlog, null, null, ["AI Generated"]);
                    foreach (var feature in epic.Features)
                    {
                        feature.Id = await ApiService.CreateWorkItemAsync("Feature", feature.Title, feature.Description, _backlog, epic.Id, null, ["AI Generated"]);
                        foreach (var story in feature.Stories)
                            {
                                var tags2 = story.Tags.Concat(["AI Generated"]).ToArray();
                                story.Id = await ApiService.CreateWorkItemAsync(
                                    "User Story",
                                    story.Title,
                                    story.Description,
                                    _backlog,
                                    feature.Id,
                                    story.AcceptanceCriteria,
                                    tags2
                                );
                            }
                    }
                }
            }
            _error = null;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private static TreeItemData<WikiPageNode> BuildTreeItem(WikiPageNode node)
    {
        var item = new TreeItemData<WikiPageNode> { Value = node, Text = node.Name };
        if (node.Children.Count > 0)
            item.Children = node.Children.Select(BuildTreeItem).ToList();
        return item;
    }

        private static string BuildPrompt(IEnumerable<(string Name, string Text)> pages, bool storiesOnly, bool clarify, DevOpsConfig config)
    {
        var sb = new System.Text.StringBuilder();
        if (string.IsNullOrWhiteSpace(config.RequirementsPrompt))
        {
            if (storiesOnly)
            {
                sb.AppendLine("You are a senior business analyst. Break down the following product requirement into User Stories.");
            }
            else
            {
                sb.AppendLine("You are a senior business analyst. Break down the following product requirement into Epics, Features, and User Stories.");
            }
            sb.AppendLine("Each story must include:");
            sb.AppendLine("- A clear, user-centric title and description");
            sb.AppendLine("- Acceptance criteria in Gherkin-style format");
            sb.AppendLine("- A \"tags\" array for engineering triage (e.g., [\"frontend\", \"backend\", \"integration\", \"performance\", \"security\", \"accessibility\", \"needs-design\"])");
            sb.AppendLine("Use HTML formatting in descriptions and acceptance criteria only when it improves readability, such as for bulleted lists. Avoid unnecessary tags like wrapping everything in <p> elements.");

            if (storiesOnly)
            {
                sb.AppendLine();
                sb.AppendLine("Stories Only:");
                sb.AppendLine("Do not generate epics or features. Only return an array of user stories in this format:");
                sb.AppendLine("{\"stories\":[{\"title\":\"\",\"description\":\"\",\"acceptanceCriteria\":\"\",\"tags\":[\"\"]}]}");
            }
            else
            {
                sb.AppendLine();
                sb.AppendLine("Return strict JSON using this format:");
                sb.AppendLine("{\"epics\":[{\"title\":\"\",\"description\":\"\",\"features\":[{\"title\":\"\",\"description\":\"\",\"stories\":[{\"title\":\"\",\"description\":\"\",\"acceptanceCriteria\":\"\",\"tags\":[\"\"]}]}]}]}");
            }

            if (clarify)
            {
                sb.AppendLine();
                sb.AppendLine("Clarify Requirements:");
                sb.AppendLine("Before writing the output, review the requirement and ask for clarification if:");
                sb.AppendLine("- Expected user behaviors or flows are ambiguous");
                sb.AppendLine("- Access restrictions or permissions are not clearly defined");
                sb.AppendLine("- Search or filtering functionality is mentioned without scope (e.g., partial matches, filtering fields)");
                sb.AppendLine("- External system dependencies are implied but not detailed (e.g., email sending, file uploads, audit logging)");
                sb.AppendLine("- Non-functional requirements are vague (e.g., \"must be fast\")");
                sb.AppendLine("- It's unclear if optional elements (e.g., \"nice to have\" features) are in scope");
                sb.AppendLine();
                sb.AppendLine("If anything is unclear, ask precise, targeted clarification questions first, then proceed once answered.");
            }
        }
        else
        {
            sb.AppendLine(config.RequirementsPrompt.Trim());
        }
        sb.AppendLine();
        sb.AppendLine("Document:");
        sb.AppendLine("The following document provides an overview of the current state of the application these requirements apply to.");
        foreach (var page in pages)
        {
            sb.AppendLine($"## {page.Name}");
            sb.AppendLine(page.Text);
            sb.AppendLine();
        }
        sb.AppendLine();
        if (config.OutputFormat == OutputFormat.Inline)
            sb.AppendLine("Reply inline with the final requirements.");
        else
            sb.AppendLine($"Once finished, convert the entire output to {config.OutputFormat} format and provide that version.");
        return sb.ToString();
    }

    private async Task<IEnumerable<WorkItemInfo>> SearchFeatures(string value, CancellationToken _)
    {
        if (string.IsNullOrWhiteSpace(value) || value.Length < 2)
            return Array.Empty<WorkItemInfo>();
        try
        {
            var result = await ApiService.SearchFeaturesAsync(value);
            _error = null;
            return result;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
            return Array.Empty<WorkItemInfo>();
        }
    }

    private class Plan
    {
        public List<Epic> Epics { get; set; } = new();
        public List<Story> Stories { get; set; } = new();
    }

    private class Epic
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public List<Feature> Features { get; set; } = new();
    }

    private class Feature
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public List<Story> Stories { get; set; } = new();
    }

    private class Story
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string AcceptanceCriteria { get; set; } = string.Empty;
        public List<string> Tags { get; set; } = new();

        [JsonIgnore]
        public string TagString
        {
            get => string.Join(", ", Tags);
            set => Tags = value.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                .Select(t => t.Trim())
                                .ToList();
        }
    }

    private class PageState
    {
        public string Backlog { get; set; } = string.Empty;
        public string WikiId { get; set; } = string.Empty;
    }

    protected override Task OnProjectChangedAsync()
    {
        return OnInitializedAsync();
    }
}
