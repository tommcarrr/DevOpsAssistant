==== RequirementsPlanner_Main ====
//Requirements to stories
//{0} - Epics, Features, and User Stories or User Stories
You are a senior business analyst. Break down the following product requirement document into {0}

Allowed link types: "related", "successor" and "predecessor".
Set "target" to the title of the linked item.
Use "successor" when the current item depends on the target. The reverse
"predecessor" link is implied; do not create both directions.
Only add links where there is a clear dependency or relationship that must be considered
during refinement.

Each story must include:
- Description
- Acceptance Criteria
- Tags to be used for refinement (e.g., ["frontend", "backend", "integration", "performance", "security", "accessibility", "needs-design"])
- Where the requirements document contains named artifacts for traceability, can you ensure that these are referenced in the relevant work items?

Use HTML for formatting in descriptions and acceptance criteria only when it improves readability, such as for bulleted lists, bold or italic. Avoid unnecessary tags like wrapping everything in <p> elements.

//{1} User story granularity
The granularity of the work items should be {1}/5 based on the following scale...

User Story Granularity Grading Scale (1–5)

| **Grade** | **Description** | **Typical Characteristics** | **Implication for Feature Decomposition** |
|-----------|------------------|------------------------------|--------------------------------------------|
| **1 — Broad Story** | Covers multiple related user goals, flows, or system areas. | Combines several functions or states; touches multiple parts of the system. | ⚠️ Too large to be a story — should be split into multiple features or epics with a single story per feature. |
| **2 — Multi-Aspect Story** | Focused on a single user goal but includes multiple flows or conditions. | Involves several variations, edge cases, or system interactions. | Likely 1–2 stories per feature — still too coarse for sprint planning. |
| **3 — Focused Story** | Targets a single user goal or flow with defined scope. | Covers one path or behaviour; clear outcome. | Ideal: 2–4 stories per feature. |
| **4 — Narrow Story** | Describes a small, specific element of a user goal. | Limited function or variation; minimal scope. | 4–6+ stories per feature. |
| **5 — Micro Story** | Very small unit of work, often tied to a single UI element or technical task. | Minor detail or one technical aspect. | 6–10+ stories per feature — may be too fine-grained unless justified. |


//{2} Work Item Standards
{2}
//{3} Work Item Description Standards
{3}
//{4} Work Item AC Standards
{4}

//{5} Non-Functional Requirements
{5}

//{6} Clarify Requirements
{6}

────────────────────── PRE-FLIGHT & SELF-CHECK BLOCK ──────────────────────
↳  Run this loop **before emitting any JSON**:

1 DRAFT  
   - Build the full JSON exactly as specified above (schema & link rules).

2 EXTRACT LOCAL RULES  
   - Scan the prompt you just read for the latest occurrences of:  
     • “User Story Granularity” table → store as `granularityScale`.  
     • “Work Item Standards”          → store as `storyQualityRules`.  
     • “Work Item Description Standards” → store as `descriptionTemplate`.  
     • “Work Item AC Standards”          → store as `acceptanceFormat`.  
     (If more than one appears, use the one nearest to the JSON instruction.)

3 VALIDATE THE DRAFT  

   Coverage  
   ▸ Every stated Functional / Non-Functional requirement, Business Rule,  
     and Constraint is referenced in at least one item or <links> entry.  

   Structure & Granularity  
   ▸ Respect `granularityScale` → ensure each Story lands on the *ideal*  
     grade (or mid-point if no “ideal” grade was given).  
   ▸ 1 ≤ #Epics ≤ 7; every Epic ≥ 1 Feature; Features have the #stories  
     implied by the ideal grade.  

   Quality framework (`storyQualityRules`)  
   ▸ Each Story satisfies ALL listed attributes (e.g. INVEST, SAFe, SMART…).  

   Description & AC formats  
   ▸ Story <description> follows `descriptionTemplate` exactly, **if one is set**.  
   ▸ Acceptance Criteria follow `acceptanceFormat` exactly, **if one is set**.  

   Links & Semantics  
   ▸ Titles unique; allowed link types only; no circular links.  

   JSON Hygiene  
   ▸ Strictly matches the provided schema; valid UTF-8; no trailing commas.  

4 REPAIR OR CONTINUE  
   ▸ If any check fails, revise the draft and repeat from step 1.  
   ▸ Continue looping until **all** checks pass.  

─────────────── Fallback if information is missing ───────────────  
If mandatory criteria cannot be satisfied because source data is missing
or ambiguous:

• **IF the prompt contains a “Clarify Requirements” section** (look for the
  header text “Clarify Requirements:”) →  
  ↳ Stop generating JSON and instead ask the user concise, targeted
  questions that would unblock the missing information.

• **ELSE** (no clarify-block present) →  
  ↳ Inform the user plainly (no JSON) that the task cannot be completed
  because the provided information is insufficient.
──────────────────────────────────────────────────────────────────────────────


//{7} Appended User Prompt
{7}

//{8} - The text of the context documents
Context Documentation:
{8}

//{9} - The text of the requirements document
Requirements Document:
{9}

==== RequirementsPlanner_EpicsFeaturesStories ====
Epics, Features, and User Stories.
Return strict JSON using this format:
{"epics":[{"title":"","description":"","links":[{"type":"","target":""}],"features":[{"title":"","description":"","links":[{"type":"","target":""}],"stories":[{"title":"","description":"","acceptanceCriteria":"","tags":[""],"links":[{"type":"","target":""}]}]}]}]}

==== RequirementsPlanner_StoriesOnly ====
User Stories.
Return strict JSON using this format:
{"stories":[{"title":"","description":"","acceptanceCriteria":"","tags":[""],"links":[{"type":"","target":""}]}]}

==== RequirementsPlanner_ClarifyRequirements ====
Clarify Requirements:
Before writing the output, review the requirement and ask for clarification if:
- Expected user behaviours or flows are ambiguous
- Access restrictions or permissions are not clearly defined
- Search or filtering functionality is mentioned without scope (e.g., partial matches, filtering fields)
- External system dependencies are implied but not detailed (e.g., email sending, file uploads, audit logging)
- Non-functional requirements are vague (e.g., "must be fast")
- It's unclear if optional elements (e.g., "nice to have" features) are in scope

If anything is unclear, ask precise, targeted clarification questions first, then proceed once answered.

==== RequirementsPlanner_ClarifyRequirementsNone ====
Use your best judgement if anything is unclear but provide feedback as to what assumptions have been made in generating the stories.

==== RequirementsPlanner_WorkItemStandards ====
Ensure that the relevant work items adhere to the following standards:

==== RequirementsPlanner_WorkItemStandards_INVEST ====
- INVEST - for more information consult https://agilealliance.org/glossary/invest/

==== RequirementsPlanner_WorkItemStandards_SAFe ====
- SAFe - for more information consult https://framework.scaledagile.com/

==== RequirementsPlanner_WorkItemStandards_AgileAlliance ====
- Agile Alliance User Story Specification - for more information consult https://agilealliance.org/glossary/user-stories/

==== RequirementsPlanner_WorkItemDescriptionStandards ====
Ensure that the relevant work item descriptions adhere to the following standards:

==== RequirementsPlanner_WorkItemDescriptionStandardsNone ====
Do not follow any standard framework for writing the work item descriptions, such as the Scrum User Story or Job Story templates, but ensure that the descriptions are clear and unambiguous.

==== RequirementsPlanner_WorkItemDescriptionStandards_ScrumUserStory ====
- Scrum User Story - in the 'As a **role**, I want **goal** so that **benefit**.' format

==== RequirementsPlanner_WorkItemDescriptionStandards_JobStory ====
- Job Story - in the 'When [situation], I want to [motivation], so I can [expected outcome].' format

==== RequirementsPlanner_WorkItemACStandards ====
Ensure that the relevant work item acceptance criteria adhere to the following standards:

==== RequirementsPlanner_WorkItemACStandardsNone ====
Do not use gherkin syntax, bullet points or any other specific framework for writing the work item acceptance criteria, but ensure they are clear, comprehensive and well written.

==== RequirementsPlanner_WorkItemACStandards_Gherkin ====
- Gherkin/BDD - in the 'Given-When-Then-And-But' format

==== RequirementsPlanner_WorkItemACStandards_BulletPoints ====
- Bullet Points - write as plain bullet points that give a clear, simple list of the expected outcomes in the past tense

==== RequirementsPlanner_WorkItemACStandards_SAFe ====
- SAFe - ensure the acceptance criteria follow the guidelines of SAFe, for more information consult https://framework.scaledagile.com/

==== RequirementsPlanner_NonFunctionalIgnore ====
This is a list of existing Non-Functional Requirements for the project. Do not create stories for requirements that are already covered in these or any NFRs present in the documentation:

==== RequirementsPlanner_NonFunctionalCover ====
Create user stories to address these Non-Functional Requirements as well as any that are relevant from the documentation:

